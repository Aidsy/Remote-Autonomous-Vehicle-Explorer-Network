
Wyvern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  000026ac  00002740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004d4  00800222  00800222  00002862  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  00002862  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000096d  00000000  00000000  00002a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036dd  00000000  00000000  0000336f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015dd  00000000  00000000  00006a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000251a  00000000  00000000  00008029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  0000a544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a21  00000000  00000000  0000a9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001176  00000000  00000000  0000b415  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000c58b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 97 09 	jmp	0x132e	; 0x132e <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__vector_23>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_25>
      68:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_26>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	12 e0       	ldi	r17, 0x02	; 2
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ec ea       	ldi	r30, 0xAC	; 172
      c0:	f6 e2       	ldi	r31, 0x26	; 38
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <.do_copy_data_start>

000000c4 <.do_copy_data_loop>:
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0

000000c8 <.do_copy_data_start>:
      c8:	a2 32       	cpi	r26, 0x22	; 34
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <.do_copy_data_loop>

000000ce <__do_clear_bss>:
      ce:	16 e0       	ldi	r17, 0x06	; 6
      d0:	a2 e2       	ldi	r26, 0x22	; 34
      d2:	b2 e0       	ldi	r27, 0x02	; 2
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a6 3f       	cpi	r26, 0xF6	; 246
      da:	b1 07       	cpc	r27, r17
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 be 0b 	call	0x177c	; 0x177c <main>
      e2:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <clockSet>:
Purpose:  Sets clock to 8MHz
Input:    None
Returns:  None
**************************************************************************/
void clockSet(){
	CLKPR = (1<<CLKPCE);
      ea:	e1 e6       	ldi	r30, 0x61	; 97
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 e8       	ldi	r24, 0x80	; 128
      f0:	80 83       	st	Z, r24
	CLKPR = 0;
      f2:	10 82       	st	Z, r1
}
      f4:	08 95       	ret

000000f6 <disableJTAG>:
		  fortunately, all the other bits in MCUCR should be 0, so this is fine
Input:    None
Returns:  None
**************************************************************************/
void disableJTAG(){
	MCUCR = (1 << JTD);
      f6:	80 e8       	ldi	r24, 0x80	; 128
      f8:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << JTD);
      fa:	85 bf       	out	0x35, r24	; 53
}
      fc:	08 95       	ret

000000fe <init_uc>:
Purpose:  Sets clock to 8MHz
Input:    None
Returns:  None
**************************************************************************/
void clockSet(){
	CLKPR = (1<<CLKPCE);
      fe:	e1 e6       	ldi	r30, 0x61	; 97
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 e8       	ldi	r24, 0x80	; 128
     104:	80 83       	st	Z, r24
	CLKPR = 0;
     106:	10 82       	st	Z, r1
void init_uc(){
	// Set system clock to 8MHzs
	clockSet();

	// Set up Red and Green UC LED Ports
	set(DDRE,2);
     108:	6a 9a       	sbi	0x0d, 2	; 13
	set(DDRE,6);
     10a:	6e 9a       	sbi	0x0d, 6	; 13
	set(PORTE,2);
     10c:	72 9a       	sbi	0x0e, 2	; 14
	set(PORTE,6);
     10e:	76 9a       	sbi	0x0e, 6	; 14

	// Set up Red, Green, Yellow, and Blue LEDs
	set(DDRD,4);
     110:	54 9a       	sbi	0x0a, 4	; 10
	set(DDRD,5);
     112:	55 9a       	sbi	0x0a, 5	; 10
	set(DDRD,6);
     114:	56 9a       	sbi	0x0a, 6	; 10
	set(DDRD,7);
     116:	57 9a       	sbi	0x0a, 7	; 10
	set(PORTD,4);
     118:	5c 9a       	sbi	0x0b, 4	; 11
	set(PORTD,5);
     11a:	5d 9a       	sbi	0x0b, 5	; 11
	set(PORTD,6);
     11c:	5e 9a       	sbi	0x0b, 6	; 11
	set(PORTD,7);
     11e:	5f 9a       	sbi	0x0b, 7	; 11
		  fortunately, all the other bits in MCUCR should be 0, so this is fine
Input:    None
Returns:  None
**************************************************************************/
void disableJTAG(){
	MCUCR = (1 << JTD);
     120:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << JTD);
     122:	85 bf       	out	0x35, r24	; 53
	set(PORTD,6);
	set(PORTD,7);

	// Enable Pins F4-F7
	disableJTAG();
}
     124:	08 95       	ret

00000126 <init_uart>:
**************************************************************************/
void init_uart(void)
{
	//UCSR1A |= 0x02;  // Uncomment to set U2X1 = 1
	// Set baudrate
	UBRR1L = baud;
     126:	80 91 00 01 	lds	r24, 0x0100
     12a:	80 93 cc 00 	sts	0x00CC, r24
	// Enable Rx and Tx
	UCSR1B |=(1<<RXEN1)|(1<<TXEN1);
     12e:	e9 ec       	ldi	r30, 0xC9	; 201
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	88 61       	ori	r24, 0x18	; 24
     136:	80 83       	st	Z, r24
	// Set to 8 bit tranmission, 1 stop bit
	UCSR1C |=(1<<UMSEL11)|(1<<UCSZ10)|(1<<UCSZ11);
     138:	aa ec       	ldi	r26, 0xCA	; 202
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	8c 91       	ld	r24, X
     13e:	86 68       	ori	r24, 0x86	; 134
     140:	8c 93       	st	X, r24
	// Enable USART Receive Complete Interrupt
	UCSR1B |=(1<<RXCIE1);
     142:	80 81       	ld	r24, Z
     144:	80 68       	ori	r24, 0x80	; 128
     146:	80 83       	st	Z, r24
	// Flush receive buffer
	UART_RxTail = 0;
     148:	10 92 bd 04 	sts	0x04BD, r1
	UART_RxHead = 0;
     14c:	10 92 bc 04 	sts	0x04BC, r1
	UART_TxTail = 0;
     150:	10 92 bf 06 	sts	0x06BF, r1
	UART_TxHead = 0;
     154:	10 92 be 06 	sts	0x06BE, r1
}
     158:	08 95       	ret

0000015a <__vector_25>:
		  Interrupt Vector 26
Input:
Returns:
**************************************************************************/
ISR(USART1_RX_vect)
{
     15a:	1f 92       	push	r1
     15c:	0f 92       	push	r0
     15e:	0f b6       	in	r0, 0x3f	; 63
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	8f 93       	push	r24
     166:	9f 93       	push	r25
     168:	ef 93       	push	r30
     16a:	ff 93       	push	r31
	unsigned char data;
	unsigned char tmphead;
	// Read the received data
	data = UDR1;
     16c:	90 91 ce 00 	lds	r25, 0x00CE
	/// Calculate buffer index
	tmphead = ( UART_RxHead + 1 ) & UART_RX_BUFFER_MASK;
     170:	e0 91 bc 04 	lds	r30, 0x04BC
     174:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxHead = tmphead;
     176:	e0 93 bc 04 	sts	0x04BC, r30
	if ( tmphead == UART_RxTail )
     17a:	80 91 bd 04 	lds	r24, 0x04BD
     17e:	e8 17       	cp	r30, r24
     180:	21 f4       	brne	.+8      	; 0x18a <__vector_25+0x30>
Input:
Returns:
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
     182:	80 91 bd 04 	lds	r24, 0x04BD
     186:	80 93 bc 04 	sts	0x04BC, r24
	{
		//ERROR! Receive buffer overflow
		uart_flush();
	}
	// Store received data in buffer
	UART_RxBuf[tmphead] = data;
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	e4 54       	subi	r30, 0x44	; 68
     18e:	fd 4f       	sbci	r31, 0xFD	; 253
     190:	90 83       	st	Z, r25
}
     192:	ff 91       	pop	r31
     194:	ef 91       	pop	r30
     196:	9f 91       	pop	r25
     198:	8f 91       	pop	r24
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	0f 90       	pop	r0
     1a0:	1f 90       	pop	r1
     1a2:	18 95       	reti

000001a4 <__vector_26>:
		  Interrupt Vector 27
Input:
Returns:
**************************************************************************/
ISR(USART1_UDRE_vect)
{
     1a4:	1f 92       	push	r1
     1a6:	0f 92       	push	r0
     1a8:	0f b6       	in	r0, 0x3f	; 63
     1aa:	0f 92       	push	r0
     1ac:	11 24       	eor	r1, r1
     1ae:	8f 93       	push	r24
     1b0:	9f 93       	push	r25
     1b2:	ef 93       	push	r30
     1b4:	ff 93       	push	r31
	unsigned char tmptail;
	// Check if all data is transmitted
	if ( UART_TxHead != UART_TxTail )
     1b6:	90 91 be 06 	lds	r25, 0x06BE
     1ba:	80 91 bf 06 	lds	r24, 0x06BF
     1be:	98 17       	cp	r25, r24
     1c0:	61 f0       	breq	.+24     	; 0x1da <__vector_26+0x36>
	{
		// Calculate buffer index
		tmptail = ( UART_TxTail + 1 ) & UART_TX_BUFFER_MASK;
     1c2:	e0 91 bf 06 	lds	r30, 0x06BF
     1c6:	ef 5f       	subi	r30, 0xFF	; 255
		// Store new index
		UART_TxTail = tmptail;
     1c8:	e0 93 bf 06 	sts	0x06BF, r30
		// Start transmition
		UDR1 = UART_TxBuf[tmptail];
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	e2 54       	subi	r30, 0x42	; 66
     1d0:	fb 4f       	sbci	r31, 0xFB	; 251
     1d2:	80 81       	ld	r24, Z
     1d4:	80 93 ce 00 	sts	0x00CE, r24
     1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <__vector_26+0x40>
	}
	else
	{
		// Disable UDRE interrupt
		UCSR1B &= ~(1<<UDRIE);
     1da:	80 91 c9 00 	lds	r24, 0x00C9
     1de:	8f 7d       	andi	r24, 0xDF	; 223
     1e0:	80 93 c9 00 	sts	0x00C9, r24
	}
}
     1e4:	ff 91       	pop	r31
     1e6:	ef 91       	pop	r30
     1e8:	9f 91       	pop	r25
     1ea:	8f 91       	pop	r24
     1ec:	0f 90       	pop	r0
     1ee:	0f be       	out	0x3f, r0	; 63
     1f0:	0f 90       	pop	r0
     1f2:	1f 90       	pop	r1
     1f4:	18 95       	reti

000001f6 <ReceiveByte>:
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
     1f6:	90 91 bc 04 	lds	r25, 0x04BC
     1fa:	80 91 bd 04 	lds	r24, 0x04BD
     1fe:	98 17       	cp	r25, r24
     200:	d1 f3       	breq	.-12     	; 0x1f6 <ReceiveByte>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
     202:	e0 91 bd 04 	lds	r30, 0x04BD
     206:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
     208:	e0 93 bd 04 	sts	0x04BD, r30
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e4 54       	subi	r30, 0x44	; 68
     210:	fd 4f       	sbci	r31, 0xFD	; 253
	 // Return data
	return UART_RxBuf[tmptail];
}
     212:	80 81       	ld	r24, Z
     214:	08 95       	ret

00000216 <TransmitByte>:
		  Waits for free space if no room in buffer
Input:    Data to transmit
Returns:
**************************************************************************/
void TransmitByte(unsigned char data)
{
     216:	28 2f       	mov	r18, r24
	unsigned char tmphead;
	tmphead=0;
	// Calculate buffer index
	tmphead = ( UART_TxHead + 1 ) & UART_TX_BUFFER_MASK;
     218:	90 91 be 06 	lds	r25, 0x06BE
     21c:	9f 5f       	subi	r25, 0xFF	; 255
	// Wait for free space in buffer
	while ( tmphead == UART_TxTail );
     21e:	80 91 bf 06 	lds	r24, 0x06BF
     222:	98 17       	cp	r25, r24
     224:	e1 f3       	breq	.-8      	; 0x21e <TransmitByte+0x8>
	// Store data in buffer
	UART_TxBuf[tmphead] = data;
     226:	e9 2f       	mov	r30, r25
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	e2 54       	subi	r30, 0x42	; 66
     22c:	fb 4f       	sbci	r31, 0xFB	; 251
     22e:	20 83       	st	Z, r18
	// Store new index
	UART_TxHead = tmphead;
     230:	90 93 be 06 	sts	0x06BE, r25
	// Enable UDRE interrupt
	UCSR1B |= (1<<UDRIE1);
     234:	80 91 c9 00 	lds	r24, 0x00C9
     238:	80 62       	ori	r24, 0x20	; 32
     23a:	80 93 c9 00 	sts	0x00C9, r24
}
     23e:	08 95       	ret

00000240 <TransmitString>:
Purpose:  Transmit string to UART
Input:    String to be transmitted
Returns:
**************************************************************************/
void TransmitString(const char *s )
{
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	ec 01       	movw	r28, r24
     246:	03 c0       	rjmp	.+6      	; 0x24e <TransmitString+0xe>
    while (*s)
      TransmitByte(*s++);
     248:	21 96       	adiw	r28, 0x01	; 1
     24a:	0e 94 0b 01 	call	0x216	; 0x216 <TransmitByte>
Input:    String to be transmitted
Returns:
**************************************************************************/
void TransmitString(const char *s )
{
    while (*s)
     24e:	88 81       	ld	r24, Y
     250:	88 23       	and	r24, r24
     252:	d1 f7       	brne	.-12     	; 0x248 <TransmitString+0x8>
      TransmitByte(*s++);
}
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <DataInReceiveBuffer>:
Input:
Returns:  Return 0 (FALSE) if Rx buffer is empty
**************************************************************************/
unsigned char DataInReceiveBuffer(void)
{
	return ( UART_RxHead != UART_RxTail );
     25a:	90 91 bc 04 	lds	r25, 0x04BC
     25e:	80 91 bd 04 	lds	r24, 0x04BD
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	98 13       	cpse	r25, r24
     266:	21 e0       	ldi	r18, 0x01	; 1
}
     268:	82 2f       	mov	r24, r18
     26a:	08 95       	ret

0000026c <uart_available>:
Input:
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
     26c:	80 91 bc 04 	lds	r24, 0x04BC
     270:	20 91 bd 04 	lds	r18, 0x04BD
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	81 50       	subi	r24, 0x01	; 1
     278:	9e 4f       	sbci	r25, 0xFE	; 254
     27a:	82 1b       	sub	r24, r18
     27c:	91 09       	sbc	r25, r1
     27e:	6f ef       	ldi	r22, 0xFF	; 255
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	0e 94 c5 12 	call	0x258a	; 0x258a <__divmodhi4>
}
     286:	08 95       	ret

00000288 <uart_flush>:
Input:
Returns:
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
     288:	80 91 bd 04 	lds	r24, 0x04BD
     28c:	80 93 bc 04 	sts	0x04BC, r24
}
     290:	08 95       	ret

00000292 <init_pwm>:
Returns:  None
**************************************************************************/
void init_pwm(void){
	//////// SET TIME PRESCALER ////////
	// Timer 1 - use system clock (system_clock/1)
	clear(TCCR1B,CS10);
     292:	e1 e8       	ldi	r30, 0x81	; 129
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	80 81       	ld	r24, Z
     298:	8e 7f       	andi	r24, 0xFE	; 254
     29a:	80 83       	st	Z, r24
	set(TCCR1B,CS11);
     29c:	80 81       	ld	r24, Z
     29e:	82 60       	ori	r24, 0x02	; 2
     2a0:	80 83       	st	Z, r24
	clear(TCCR1B,CS12);
     2a2:	80 81       	ld	r24, Z
     2a4:	8b 7f       	andi	r24, 0xFB	; 251
     2a6:	80 83       	st	Z, r24

	// Timer 3 - use system clock (system_clock/1)
	clear(TCCR3B,CS30);
     2a8:	a1 e9       	ldi	r26, 0x91	; 145
     2aa:	b0 e0       	ldi	r27, 0x00	; 0
     2ac:	8c 91       	ld	r24, X
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	8c 93       	st	X, r24
	set(TCCR3B,CS31);
     2b2:	8c 91       	ld	r24, X
     2b4:	82 60       	ori	r24, 0x02	; 2
     2b6:	8c 93       	st	X, r24
	clear(TCCR3B,CS32);
     2b8:	8c 91       	ld	r24, X
     2ba:	8b 7f       	andi	r24, 0xFB	; 251
     2bc:	8c 93       	st	X, r24

	//////// SET PWM MODE ////////
	// Timer 1 - UP to ICR1 PWM Mode (Mode 14 - 16bit 65535)
	set(TCCR1B,WGM13);
     2be:	80 81       	ld	r24, Z
     2c0:	80 61       	ori	r24, 0x10	; 16
     2c2:	80 83       	st	Z, r24
	set(TCCR1B,WGM12);
     2c4:	80 81       	ld	r24, Z
     2c6:	88 60       	ori	r24, 0x08	; 8
     2c8:	80 83       	st	Z, r24
	set(TCCR1A,WGM11);
     2ca:	e0 e8       	ldi	r30, 0x80	; 128
     2cc:	f0 e0       	ldi	r31, 0x00	; 0
     2ce:	80 81       	ld	r24, Z
     2d0:	82 60       	ori	r24, 0x02	; 2
     2d2:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10);
     2d4:	80 81       	ld	r24, Z
     2d6:	8e 7f       	andi	r24, 0xFE	; 254
     2d8:	80 83       	st	Z, r24
	ICR1 = PWM_PERIOD;
     2da:	20 91 02 01 	lds	r18, 0x0102
     2de:	30 91 03 01 	lds	r19, 0x0103
     2e2:	30 93 87 00 	sts	0x0087, r19
     2e6:	20 93 86 00 	sts	0x0086, r18

	// Timer 1 Channel A - clear at OCR1A, set at rollover
	set(TCCR1A,COM1A1);
     2ea:	80 81       	ld	r24, Z
     2ec:	80 68       	ori	r24, 0x80	; 128
     2ee:	80 83       	st	Z, r24
	clear(TCCR1A,COM1A0);
     2f0:	80 81       	ld	r24, Z
     2f2:	8f 7b       	andi	r24, 0xBF	; 191
     2f4:	80 83       	st	Z, r24
	OCR1A = 0;
     2f6:	10 92 89 00 	sts	0x0089, r1
     2fa:	10 92 88 00 	sts	0x0088, r1

	// Timer 1 Channel B - clear at OCR1B, set at rollover
	set(TCCR1A,COM1B1);
     2fe:	80 81       	ld	r24, Z
     300:	80 62       	ori	r24, 0x20	; 32
     302:	80 83       	st	Z, r24
	clear(TCCR1A,COM1B0);
     304:	80 81       	ld	r24, Z
     306:	8f 7e       	andi	r24, 0xEF	; 239
     308:	80 83       	st	Z, r24
	OCR1B = 0;
     30a:	10 92 8b 00 	sts	0x008B, r1
     30e:	10 92 8a 00 	sts	0x008A, r1

	// Timer 1 Channel C - clear at OCR1C, set at rollover
	set(TCCR1A,COM1C1);
     312:	80 81       	ld	r24, Z
     314:	88 60       	ori	r24, 0x08	; 8
     316:	80 83       	st	Z, r24
	clear(TCCR1A,COM1C0);
     318:	80 81       	ld	r24, Z
     31a:	8b 7f       	andi	r24, 0xFB	; 251
     31c:	80 83       	st	Z, r24
	OCR1C = 0;
     31e:	10 92 8d 00 	sts	0x008D, r1
     322:	10 92 8c 00 	sts	0x008C, r1

	// Timer 3 - UP to ICR3 PWM Mode (Mode 14 - 16bit 65535)
	set(TCCR3B,WGM33);
     326:	8c 91       	ld	r24, X
     328:	80 61       	ori	r24, 0x10	; 16
     32a:	8c 93       	st	X, r24
	set(TCCR3B,WGM32);
     32c:	8c 91       	ld	r24, X
     32e:	88 60       	ori	r24, 0x08	; 8
     330:	8c 93       	st	X, r24
	set(TCCR3A,WGM31);
     332:	e0 e9       	ldi	r30, 0x90	; 144
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	82 60       	ori	r24, 0x02	; 2
     33a:	80 83       	st	Z, r24
	clear(TCCR3A,WGM30);
     33c:	80 81       	ld	r24, Z
     33e:	8e 7f       	andi	r24, 0xFE	; 254
     340:	80 83       	st	Z, r24
	ICR3 = PWM_PERIOD;
     342:	30 93 97 00 	sts	0x0097, r19
     346:	20 93 96 00 	sts	0x0096, r18

	// Timer 3 Channel A - clear at OCR3A, set at rollover
	set(TCCR3A,COM3A1);
     34a:	80 81       	ld	r24, Z
     34c:	80 68       	ori	r24, 0x80	; 128
     34e:	80 83       	st	Z, r24
	clear(TCCR3A,COM3A0);
     350:	80 81       	ld	r24, Z
     352:	8f 7b       	andi	r24, 0xBF	; 191
     354:	80 83       	st	Z, r24
	OCR3A = 0;
     356:	10 92 99 00 	sts	0x0099, r1
     35a:	10 92 98 00 	sts	0x0098, r1

	// Enable Timer 1 (B5,B6,B7) and Timer 3 (C6) Output
	set(DDRB,5);
     35e:	25 9a       	sbi	0x04, 5	; 4
	set(DDRB,6);
     360:	26 9a       	sbi	0x04, 6	; 4
	set(DDRB,7);
     362:	27 9a       	sbi	0x04, 7	; 4
	set(DDRC,6);
     364:	3e 9a       	sbi	0x07, 6	; 7
}
     366:	08 95       	ret

00000368 <set_duty>:
Input:    motor number, duty value
Returns:  None
**************************************************************************/
void set_duty(unsigned int motornum,unsigned int duty){
	// Prevent invalid Duty Cycle
	if(duty>2000){
     368:	27 e0       	ldi	r18, 0x07	; 7
     36a:	61 3d       	cpi	r22, 0xD1	; 209
     36c:	72 07       	cpc	r23, r18
     36e:	18 f0       	brcs	.+6      	; 0x376 <set_duty+0xe>
     370:	60 ed       	ldi	r22, 0xD0	; 208
     372:	77 e0       	ldi	r23, 0x07	; 7
     374:	06 c0       	rjmp	.+12     	; 0x382 <set_duty+0x1a>
		duty = 2000;
	}else if(duty<1000){
     376:	23 e0       	ldi	r18, 0x03	; 3
     378:	68 3e       	cpi	r22, 0xE8	; 232
     37a:	72 07       	cpc	r23, r18
     37c:	10 f4       	brcc	.+4      	; 0x382 <set_duty+0x1a>
     37e:	68 ee       	ldi	r22, 0xE8	; 232
     380:	73 e0       	ldi	r23, 0x03	; 3
		duty = 1000;
	}

	switch(motornum){
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	91 05       	cpc	r25, r1
     386:	89 f0       	breq	.+34     	; 0x3aa <set_duty+0x42>
     388:	83 30       	cpi	r24, 0x03	; 3
     38a:	91 05       	cpc	r25, r1
     38c:	18 f4       	brcc	.+6      	; 0x394 <set_duty+0x2c>
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	d1 f4       	brne	.+52     	; 0x3c6 <set_duty+0x5e>
     392:	06 c0       	rjmp	.+12     	; 0x3a0 <set_duty+0x38>
     394:	83 30       	cpi	r24, 0x03	; 3
     396:	91 05       	cpc	r25, r1
     398:	69 f0       	breq	.+26     	; 0x3b4 <set_duty+0x4c>
     39a:	04 97       	sbiw	r24, 0x04	; 4
     39c:	a1 f4       	brne	.+40     	; 0x3c6 <set_duty+0x5e>
     39e:	0f c0       	rjmp	.+30     	; 0x3be <set_duty+0x56>
		case 1:
			OCR1A = duty;
     3a0:	70 93 89 00 	sts	0x0089, r23
     3a4:	60 93 88 00 	sts	0x0088, r22
     3a8:	08 95       	ret
			break;
		case 2:
			OCR1B = duty;
     3aa:	70 93 8b 00 	sts	0x008B, r23
     3ae:	60 93 8a 00 	sts	0x008A, r22
     3b2:	08 95       	ret
			break;
		case 3:
			OCR1C = duty;
     3b4:	70 93 8d 00 	sts	0x008D, r23
     3b8:	60 93 8c 00 	sts	0x008C, r22
     3bc:	08 95       	ret
			break;
		case 4:
			OCR3A = duty;
     3be:	70 93 99 00 	sts	0x0099, r23
     3c2:	60 93 98 00 	sts	0x0098, r22
     3c6:	08 95       	ret

000003c8 <SPIsetup>:
#define CONFIG_VAL (1<<EN_CRC) | (1<<MASK_TX_DS) | (1<<MASK_MAX_RT)

// set up the spi port in master mode with the polarity options (etc.) that the 24L01 requires. Also set DDR of the CE pin of rf module.
void SPIsetup(){
	//Make sure Power Save didn't turn SPI off
 	PRR0 &= ~(1 << PRSPI);
     3c8:	80 91 64 00 	lds	r24, 0x0064
     3cc:	8b 7f       	andi	r24, 0xFB	; 251
     3ce:	80 93 64 00 	sts	0x0064, r24

	// Set MOSI and SCK and SS output, all others input. SS MUST be config. to output 
	// Also configure the CE pin of the rf module as an output
	DDR_SPI |= (1 << DD_MOSI) | (1<<DD_SCK) | (1<<DD_SS);
     3d2:	84 b1       	in	r24, 0x04	; 4
     3d4:	87 60       	ori	r24, 0x07	; 7
     3d6:	84 b9       	out	0x04, r24	; 4

	// Enable SPI, Master, set clock rate sys_clk/128
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR1) | (1<<SPR0);
     3d8:	83 e5       	ldi	r24, 0x53	; 83
     3da:	8c bd       	out	0x2c, r24	; 44
     3dc:	80 ed       	ldi	r24, 0xD0	; 208
     3de:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3e0:	28 ec       	ldi	r18, 0xC8	; 200
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	f9 01       	movw	r30, r18
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <SPIsetup+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ec:	d9 f7       	brne	.-10     	; 0x3e4 <SPIsetup+0x1c>

	//PAUSE to let the wireless chip go through initialization 
	_delay_ms(200);
}
     3ee:	08 95       	ret

000003f0 <RFwriteReg>:
Returns:  None
**************************************************************************/
void RFwriteReg(char writeReg, char* writeDat, int numBytes){

	// turn the CS channel low to begin transmission
	PORT_CS &= ~(1<<P_RF_CS);
     3f0:	47 98       	cbi	0x08, 7	; 8

	// send 1 byte out the spi port to request write of writeReg
	// in order to do this we add 0x20 to our write register as per the format of the 23L01 datasheet
	SPDR = W_REGISTER + writeReg;
     3f2:	80 5e       	subi	r24, 0xE0	; 224
     3f4:	8e bd       	out	0x2e, r24	; 46

	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );
     3f6:	0d b4       	in	r0, 0x2d	; 45
     3f8:	07 fe       	sbrs	r0, 7
     3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <RFwriteReg+0x6>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	0a c0       	rjmp	.+20     	; 0x416 <RFwriteReg+0x26>
	// write the number of bytes we want from writeDat
	int i;
	for(i = 0; i < numBytes; i++)
	{
		// send 1 byte out the spi port. this is the data we want to write to the RF chip
		SPDR = writeDat[i];
     402:	fb 01       	movw	r30, r22
     404:	e2 0f       	add	r30, r18
     406:	f3 1f       	adc	r31, r19
     408:	80 81       	ld	r24, Z
     40a:	8e bd       	out	0x2e, r24	; 46

		// wait for transmission to finish
		while(!(SPSR & (1<<SPIF) ) );
     40c:	0d b4       	in	r0, 0x2d	; 45
     40e:	07 fe       	sbrs	r0, 7
     410:	fd cf       	rjmp	.-6      	; 0x40c <RFwriteReg+0x1c>
	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );

	// write the number of bytes we want from writeDat
	int i;
	for(i = 0; i < numBytes; i++)
     412:	2f 5f       	subi	r18, 0xFF	; 255
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	24 17       	cp	r18, r20
     418:	35 07       	cpc	r19, r21
     41a:	9c f3       	brlt	.-26     	; 0x402 <RFwriteReg+0x12>
		// wait for transmission to finish
		while(!(SPSR & (1<<SPIF) ) );
	}

	// turn the CS channel high to end transmission
	PORT_CS |= (1<<P_RF_CS);
     41c:	47 9a       	sbi	0x08, 7	; 8
}
     41e:	08 95       	ret

00000420 <RFfillTransferBuffer>:


// function to fill the transfer (TX) buffer with data we wish to transmit wirelessly
// txDat - an appropriately sized storage container containing the data we plan on pushing into the TX register
// numBytes - the number of bytes to push in back. !! The txDat storage container must be at least this size in bytes (char's)
void RFfillTransferBuffer( char* txDat, int numBytes ){
     420:	ac 01       	movw	r20, r24
	// turn the CS channel low to begin transmission
	PORT_CS &= ~(1<<P_RF_CS);
     422:	47 98       	cbi	0x08, 7	; 8

	// send 1 byte out the spi port that indicates we want to fill the TX buffer
	SPDR = W_TX_PAYLOAD;
     424:	80 ea       	ldi	r24, 0xA0	; 160
     426:	8e bd       	out	0x2e, r24	; 46

	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );
     428:	0d b4       	in	r0, 0x2d	; 45
     42a:	07 fe       	sbrs	r0, 7
     42c:	fd cf       	rjmp	.-6      	; 0x428 <RFfillTransferBuffer+0x8>
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	0a c0       	rjmp	.+20     	; 0x448 <RFfillTransferBuffer+0x28>
	// write the number of bytes we want to write out to the TX buffer
	int i;
	for(i = 0; i < numBytes; i++)
	{
		// send 1 byte out the spi port. this is the data we want to write to the RF chip
		SPDR = txDat[i];
     434:	fa 01       	movw	r30, r20
     436:	e2 0f       	add	r30, r18
     438:	f3 1f       	adc	r31, r19
     43a:	80 81       	ld	r24, Z
     43c:	8e bd       	out	0x2e, r24	; 46

		// wait for transmission to finish
		while(!(SPSR & (1<<SPIF) ) );
     43e:	0d b4       	in	r0, 0x2d	; 45
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <RFfillTransferBuffer+0x1e>
	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );

	// write the number of bytes we want to write out to the TX buffer
	int i;
	for(i = 0; i < numBytes; i++)
     444:	2f 5f       	subi	r18, 0xFF	; 255
     446:	3f 4f       	sbci	r19, 0xFF	; 255
     448:	26 17       	cp	r18, r22
     44a:	37 07       	cpc	r19, r23
     44c:	9c f3       	brlt	.-26     	; 0x434 <RFfillTransferBuffer+0x14>
		// wait for transmission to finish
		while(!(SPSR & (1<<SPIF) ) );
	}

	// turn the CS channel high to end transmission
	PORT_CS |= (1<<P_RF_CS);
     44e:	47 9a       	sbi	0x08, 7	; 8
}
     450:	08 95       	ret

00000452 <RFreadReg>:
// retDat - an appropriately sized storage container for the data we plan on getting back
// numBytes - the number of bytes to read back. !! The retDat storage container must be at least this size in bytes (char's)
void RFreadReg(char readReg, char* retDat, int numBytes){

	// turn the CS channel low to begin transmission
	PORT_CS &= ~(1<<P_RF_CS);
     452:	47 98       	cbi	0x08, 7	; 8

	// send 1 byte out the spi port to request write of writeReg
	SPDR = R_REGISTER + readReg;
     454:	8e bd       	out	0x2e, r24	; 46

	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );
     456:	0d b4       	in	r0, 0x2d	; 45
     458:	07 fe       	sbrs	r0, 7
     45a:	fd cf       	rjmp	.-6      	; 0x456 <RFreadReg+0x4>
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	30 e0       	ldi	r19, 0x00	; 0

	// read the number of bytes we intend to receive into retDat
	int i;
	for(i = 0; i < numBytes; i++){
		// send 1 byte out the spi port. this is a dummy send just to read the incoming MISO data from our read request above
		SPDR = 0xFF;
     460:	9f ef       	ldi	r25, 0xFF	; 255
     462:	0b c0       	rjmp	.+22     	; 0x47a <RFreadReg+0x28>
     464:	9e bd       	out	0x2e, r25	; 46

		// wait for transmission to finish
		while(!(SPSR & (1<<SPIF) ) );
     466:	0d b4       	in	r0, 0x2d	; 45
     468:	07 fe       	sbrs	r0, 7
     46a:	fd cf       	rjmp	.-6      	; 0x466 <RFreadReg+0x14>

		// read off the contents of our return data that is in SPDR (the value we requested to read). This came from MISO
		retDat[i] = SPDR;
     46c:	8e b5       	in	r24, 0x2e	; 46
     46e:	fb 01       	movw	r30, r22
     470:	e2 0f       	add	r30, r18
     472:	f3 1f       	adc	r31, r19
     474:	80 83       	st	Z, r24
	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );

	// read the number of bytes we intend to receive into retDat
	int i;
	for(i = 0; i < numBytes; i++){
     476:	2f 5f       	subi	r18, 0xFF	; 255
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	24 17       	cp	r18, r20
     47c:	35 07       	cpc	r19, r21
     47e:	94 f3       	brlt	.-28     	; 0x464 <RFreadReg+0x12>
		// read off the contents of our return data that is in SPDR (the value we requested to read). This came from MISO
		retDat[i] = SPDR;
	}

	// turn the CS channel high to end transmission
	PORT_CS |= (1<<P_RF_CS);
     480:	47 9a       	sbi	0x08, 7	; 8
}
     482:	08 95       	ret

00000484 <RFsetRxAddr>:


// put the chip into receiving mode
void RFsetRxAddr(char * recvAddr, int numBytes){
     484:	9c 01       	movw	r18, r24
     486:	ab 01       	movw	r20, r22
	RFwriteReg(RX_ADDR_P1,recvAddr,numBytes);
     488:	8b e0       	ldi	r24, 0x0B	; 11
     48a:	b9 01       	movw	r22, r18
     48c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>
}
     490:	08 95       	ret

00000492 <RFflushTXBuffer>:

// flush the tx buffer
void RFflushTXBuffer(){

	// turn the CS channel low to begin transmission
	PORT_CS &= ~(1<<P_RF_CS);
     492:	47 98       	cbi	0x08, 7	; 8

	// send 1 byte out the spi port to request write of writeReg
	SPDR = FLUSH_TX;
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	8e bd       	out	0x2e, r24	; 46

	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );
     498:	0d b4       	in	r0, 0x2d	; 45
     49a:	07 fe       	sbrs	r0, 7
     49c:	fd cf       	rjmp	.-6      	; 0x498 <RFflushTXBuffer+0x6>

	// turn the CS channel high to end transmission
	PORT_CS |= (1<<P_RF_CS);
     49e:	47 9a       	sbi	0x08, 7	; 8
}
     4a0:	08 95       	ret

000004a2 <RFflushRXBuffer>:

// flush the rx buffer
void RFflushRXBuffer(){

	// turn the CS channel low to begin transmission
	PORT_CS &= ~(1<<P_RF_CS);
     4a2:	47 98       	cbi	0x08, 7	; 8

	// send 1 byte out the spi port to request write of writeReg
	SPDR = FLUSH_RX;
     4a4:	82 ee       	ldi	r24, 0xE2	; 226
     4a6:	8e bd       	out	0x2e, r24	; 46

	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );
     4a8:	0d b4       	in	r0, 0x2d	; 45
     4aa:	07 fe       	sbrs	r0, 7
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <RFflushRXBuffer+0x6>

	// turn the CS channel high to end transmission
	PORT_CS |= (1<<P_RF_CS);
     4ae:	47 9a       	sbi	0x08, 7	; 8
}
     4b0:	08 95       	ret

000004b2 <RFstartReceiving>:

// put the chip into receiving mode
void RFstartReceiving(){
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	0f 92       	push	r0
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62

	char writeDat[1] = { CONFIG_VAL | (1<<PWR_UP) | (1<<PRIM_RX) };
     4bc:	8b e3       	ldi	r24, 0x3B	; 59
     4be:	89 83       	std	Y+1, r24	; 0x01

	// turn the PWR_UP and PRIM_RX bits high
	RFwriteReg( CONFIG, writeDat, 1);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	be 01       	movw	r22, r28
     4c4:	6f 5f       	subi	r22, 0xFF	; 255
     4c6:	7f 4f       	sbci	r23, 0xFF	; 255
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>
     4d0:	80 ea       	ldi	r24, 0xA0	; 160
     4d2:	9f e0       	ldi	r25, 0x0F	; 15
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <RFstartReceiving+0x22>

	// wait a millisecond 
	_delay_ms(2);

	// turn pin CE high
	PORT_CE |= (1<<P_RF_CE);
     4d8:	28 9a       	sbi	0x05, 0	; 5
}
     4da:	0f 90       	pop	r0
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <RFstopReceiving>:

// take the chip out of receiving mode
void RFstopReceiving(){

	// turn pin CE low
	PORT_CE &= ~(1<<P_RF_CE);
     4e2:	28 98       	cbi	0x05, 0	; 5
}
     4e4:	08 95       	ret

000004e6 <RFtransmitUntil>:

// transmit txDat wirelessly and repeat until we receive verification that the packet was received. Returns chip to receive state when done
char RFtransmitUntil( char* txDat, char* destAddr, char txTries){
     4e6:	2f 92       	push	r2
     4e8:	3f 92       	push	r3
     4ea:	4f 92       	push	r4
     4ec:	5f 92       	push	r5
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	00 d0       	rcall	.+0      	; 0x50c <RFtransmitUntil+0x26>
     50c:	00 d0       	rcall	.+0      	; 0x50e <RFtransmitUntil+0x28>
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	5c 01       	movw	r10, r24
     514:	6b 01       	movw	r12, r22
     516:	4c 83       	std	Y+4, r20	; 0x04

	char txAttempt = 0;
	char success = 0;
	char tempWrite[1] = { 0x00 };
     518:	19 82       	std	Y+1, r1	; 0x01

// take the chip out of receiving mode
void RFstopReceiving(){

	// turn pin CE low
	PORT_CE &= ~(1<<P_RF_CE);
     51a:	28 98       	cbi	0x05, 0	; 5
     51c:	00 e0       	ldi	r16, 0x00	; 0

		RFflushTXBuffer();
		
		// clear the TX transmission bit
		tempWrite[0] = (1<<TX_DS);
		RFwriteReg(STATUS, tempWrite, 1);
     51e:	7e 01       	movw	r14, r28
     520:	08 94       	sec
     522:	e1 1c       	adc	r14, r1
     524:	f1 1c       	adc	r15, r1

		// setup our write data to configure the chip into TX mode
		char writeDat[1] = { CONFIG_VAL | (1<<PWR_UP) };

		// turn the PWR_UP high and PRIM_RX bit low for transmitting
		RFwriteReg( CONFIG, writeDat, 1);
     526:	32 e0       	ldi	r19, 0x02	; 2
     528:	23 2e       	mov	r2, r19
     52a:	31 2c       	mov	r3, r1
     52c:	2c 0e       	add	r2, r28
     52e:	3d 1e       	adc	r3, r29
     530:	20 ea       	ldi	r18, 0xA0	; 160
     532:	42 2e       	mov	r4, r18
     534:	2f e0       	ldi	r18, 0x0F	; 15
     536:	52 2e       	mov	r5, r18
		// delay so we have time to receive an ACK response
		_delay_ms(4);
		
		// temp variable to store our STATUS register state
		char tempStatus[1] = {0x00};
		RFreadReg(STATUS,tempStatus,1);
     538:	90 e4       	ldi	r25, 0x40	; 64
     53a:	69 2e       	mov	r6, r25
     53c:	9f e1       	ldi	r25, 0x1F	; 31
     53e:	79 2e       	mov	r7, r25
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	88 2e       	mov	r8, r24
     544:	91 2c       	mov	r9, r1
     546:	8c 0e       	add	r8, r28
     548:	9d 1e       	adc	r9, r29
     54a:	40 c0       	rjmp	.+128    	; 0x5cc <RFtransmitUntil+0xe6>

	
	// repeat transmission until the TX bit goes high (verifies receipt) or we've tried txTries times
	while( (!success) &&  (txAttempt < txTries)  ){

		RFflushTXBuffer();
     54c:	0e 94 49 02 	call	0x492	; 0x492 <RFflushTXBuffer>
		
		// clear the TX transmission bit
		tempWrite[0] = (1<<TX_DS);
     550:	80 e2       	ldi	r24, 0x20	; 32
     552:	89 83       	std	Y+1, r24	; 0x01
		RFwriteReg(STATUS, tempWrite, 1);
     554:	87 e0       	ldi	r24, 0x07	; 7
     556:	b7 01       	movw	r22, r14
     558:	41 e0       	ldi	r20, 0x01	; 1
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>

		// increment the attempt counter
		txAttempt++; 		
		
		// set up the destination transmit address
		RFwriteReg(TX_ADDR,destAddr,5);
     560:	80 e1       	ldi	r24, 0x10	; 16
     562:	b6 01       	movw	r22, r12
     564:	45 e0       	ldi	r20, 0x05	; 5
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>

		// set up the destination recive address for auto-acknowledgement
		RFwriteReg(RX_ADDR_P0,destAddr,5);
     56c:	8a e0       	ldi	r24, 0x0A	; 10
     56e:	b6 01       	movw	r22, r12
     570:	45 e0       	ldi	r20, 0x05	; 5
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>

		// setup our write data to configure the chip into TX mode
		char writeDat[1] = { CONFIG_VAL | (1<<PWR_UP) };
     578:	8a e3       	ldi	r24, 0x3A	; 58
     57a:	8a 83       	std	Y+2, r24	; 0x02

		// turn the PWR_UP high and PRIM_RX bit low for transmitting
		RFwriteReg( CONFIG, writeDat, 1);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	b1 01       	movw	r22, r2
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>

		//write data to TX register for outputting
		RFfillTransferBuffer(txDat,PACKET_SIZE);
     588:	60 91 c0 06 	lds	r22, 0x06C0
     58c:	c5 01       	movw	r24, r10
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	0e 94 10 02 	call	0x420	; 0x420 <RFfillTransferBuffer>

		// turn pin CE high
		PORT_CE |= (1<<P_RF_CE);
     594:	28 9a       	sbi	0x05, 0	; 5
     596:	c2 01       	movw	r24, r4
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <RFtransmitUntil+0xb2>

		// wait 2 millisecond to make sure transfer fires
		_delay_ms(2);

		// end transmission by pulling CE low
		PORT_CE &= ~(1<<P_RF_CE);
     59c:	28 98       	cbi	0x05, 0	; 5
     59e:	c3 01       	movw	r24, r6
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <RFtransmitUntil+0xba>
		
		// delay so we have time to receive an ACK response
		_delay_ms(4);
		
		// temp variable to store our STATUS register state
		char tempStatus[1] = {0x00};
     5a4:	1b 82       	std	Y+3, r1	; 0x03
		RFreadReg(STATUS,tempStatus,1);
     5a6:	87 e0       	ldi	r24, 0x07	; 7
     5a8:	b4 01       	movw	r22, r8
     5aa:	41 e0       	ldi	r20, 0x01	; 1
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	0e 94 29 02 	call	0x452	; 0x452 <RFreadReg>

		// check for acknowledgement from the receiving node
		//success = tempStatus[0];
		success = ( tempStatus[0] & (1<<TX_DS));
     5b2:	1b 81       	ldd	r17, Y+3	; 0x03
     5b4:	10 72       	andi	r17, 0x20	; 32

		// clear any MAX_RT bits transmission bit
		tempWrite[0] = (1<<MAX_RT);
     5b6:	80 e1       	ldi	r24, 0x10	; 16
     5b8:	89 83       	std	Y+1, r24	; 0x01
		RFwriteReg(STATUS, tempWrite, 1);	
     5ba:	87 e0       	ldi	r24, 0x07	; 7
     5bc:	b7 01       	movw	r22, r14
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>
	// take out of receiving mode
	RFstopReceiving();

	
	// repeat transmission until the TX bit goes high (verifies receipt) or we've tried txTries times
	while( (!success) &&  (txAttempt < txTries)  ){
     5c6:	11 23       	and	r17, r17
     5c8:	39 f4       	brne	.+14     	; 0x5d8 <RFtransmitUntil+0xf2>
		tempWrite[0] = (1<<TX_DS);
		RFwriteReg(STATUS, tempWrite, 1);


		// increment the attempt counter
		txAttempt++; 		
     5ca:	0f 5f       	subi	r16, 0xFF	; 255
	// take out of receiving mode
	RFstopReceiving();

	
	// repeat transmission until the TX bit goes high (verifies receipt) or we've tried txTries times
	while( (!success) &&  (txAttempt < txTries)  ){
     5cc:	8c 81       	ldd	r24, Y+4	; 0x04
     5ce:	08 17       	cp	r16, r24
     5d0:	08 f4       	brcc	.+2      	; 0x5d4 <RFtransmitUntil+0xee>
     5d2:	bc cf       	rjmp	.-136    	; 0x54c <RFtransmitUntil+0x66>
     5d4:	10 e0       	ldi	r17, 0x00	; 0
     5d6:	08 c0       	rjmp	.+16     	; 0x5e8 <RFtransmitUntil+0x102>
		RFwriteReg(STATUS, tempWrite, 1);	
	}
		
	// if the TX bit is high clear the TX transmission bit
	if(success){
		tempWrite[0] =  (1<<TX_DS);
     5d8:	80 e2       	ldi	r24, 0x20	; 32
     5da:	89 83       	std	Y+1, r24	; 0x01
		RFwriteReg(STATUS, tempWrite, 1);
     5dc:	87 e0       	ldi	r24, 0x07	; 7
     5de:	b7 01       	movw	r22, r14
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>
	}

	// turn receiving mode back on 
	RFstartReceiving();
     5e8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <RFstartReceiving>
     5ec:	81 2f       	mov	r24, r17
     5ee:	11 11       	cpse	r17, r1
     5f0:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	else{
		return 0;
	}
}
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	cf 91       	pop	r28
     5fc:	df 91       	pop	r29
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	9f 90       	pop	r9
     610:	8f 90       	pop	r8
     612:	7f 90       	pop	r7
     614:	6f 90       	pop	r6
     616:	5f 90       	pop	r5
     618:	4f 90       	pop	r4
     61a:	3f 90       	pop	r3
     61c:	2f 90       	pop	r2
     61e:	08 95       	ret

00000620 <RFtransmit>:


// transmit txDat wirelessly and leave the chip in receive mode when done. Function only fires 1 packet and does not check if data was received.
void RFtransmit( char* txDat, char* destAddr){
	RFtransmitUntil(txDat,destAddr,1);
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RFtransmitUntil>
}
     626:	08 95       	ret

00000628 <RFRXdataReady>:


int RFRXdataReady(){
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	0f 92       	push	r0
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
	// dummy write data
	char retDat[1] = {0xFF};
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	89 83       	std	Y+1, r24	; 0x01

	RFreadReg(STATUS,retDat,1);
     636:	87 e0       	ldi	r24, 0x07	; 7
     638:	be 01       	movw	r22, r28
     63a:	6f 5f       	subi	r22, 0xFF	; 255
     63c:	7f 4f       	sbci	r23, 0xFF	; 255
     63e:	41 e0       	ldi	r20, 0x01	; 1
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	0e 94 29 02 	call	0x452	; 0x452 <RFreadReg>
     646:	29 81       	ldd	r18, Y+1	; 0x01
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	46 e0       	ldi	r20, 0x06	; 6
     64c:	36 95       	lsr	r19
     64e:	27 95       	ror	r18
     650:	4a 95       	dec	r20
     652:	e1 f7       	brne	.-8      	; 0x64c <RFRXdataReady+0x24>
     654:	21 70       	andi	r18, 0x01	; 1
     656:	30 70       	andi	r19, 0x00	; 0

	else{
		return 0;
	}

}
     658:	c9 01       	movw	r24, r18
     65a:	0f 90       	pop	r0
     65c:	cf 91       	pop	r28
     65e:	df 91       	pop	r29
     660:	08 95       	ret

00000662 <RFRXbufferEmpty>:


int RFRXbufferEmpty(){
     662:	df 93       	push	r29
     664:	cf 93       	push	r28
     666:	0f 92       	push	r0
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
	// dummy write data
	char retDat[1] = {0xFF};
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	89 83       	std	Y+1, r24	; 0x01

	RFreadReg(STATUS,retDat,1);
     670:	87 e0       	ldi	r24, 0x07	; 7
     672:	be 01       	movw	r22, r28
     674:	6f 5f       	subi	r22, 0xFF	; 255
     676:	7f 4f       	sbci	r23, 0xFF	; 255
     678:	41 e0       	ldi	r20, 0x01	; 1
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	0e 94 29 02 	call	0x452	; 0x452 <RFreadReg>
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	28 2f       	mov	r18, r24
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	2e 70       	andi	r18, 0x0E	; 14
     688:	30 70       	andi	r19, 0x00	; 0
     68a:	21 15       	cp	r18, r1
     68c:	31 05       	cpc	r19, r1
     68e:	11 f0       	breq	.+4      	; 0x694 <RFRXbufferEmpty+0x32>
     690:	21 e0       	ldi	r18, 0x01	; 1
     692:	30 e0       	ldi	r19, 0x00	; 0
	}

	else{
		return 0;
	}
}
     694:	c9 01       	movw	r24, r18
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <RFreadRXFIFO>:

// read data out of the receive FIFO and turn off the data-ready flag RX_DR if the buffer is empty
// this function stores the previous value of the CONFIG register, which indicated whether we were transmitting or receiving prior to this function call, and restores this state after reading
// NOTE: it is not possible to receive or transmit new packets while readings, all packets will be lost during this time
void RFreadRXFIFO( char* retDat){
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	0f 92       	push	r0
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	fc 01       	movw	r30, r24

// take the chip out of receiving mode
void RFstopReceiving(){

	// turn pin CE low
	PORT_CE &= ~(1<<P_RF_CE);
     6aa:	28 98       	cbi	0x05, 0	; 5
void RFreadRXFIFO( char* retDat){
	// take out of receiving mode
	RFstopReceiving();

	// dummy write data
	retDat[0] = 0xFF;
     6ac:	8f ef       	ldi	r24, 0xFF	; 255
     6ae:	80 83       	st	Z, r24

	// turn the CS channel low to begin transmission
	PORT_CS &= ~(1<<P_RF_CS);
     6b0:	47 98       	cbi	0x08, 7	; 8

	// send 1 byte out the spi port that indicates we want to read the RX FIFO
	SPDR = R_RX_PAYLOAD;
     6b2:	81 e6       	ldi	r24, 0x61	; 97
     6b4:	8e bd       	out	0x2e, r24	; 46

	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );
     6b6:	0d b4       	in	r0, 0x2d	; 45
     6b8:	07 fe       	sbrs	r0, 7
     6ba:	fd cf       	rjmp	.-6      	; 0x6b6 <RFreadRXFIFO+0x18>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <RFreadRXFIFO+0x36>

	// read the number of bytes we want to read out to the RX buffer
	int i;
	for(i = 0; i < PACKET_SIZE; i++){
		// read 1 byte out the spi port
		SPDR = retDat[i];
     6c2:	80 81       	ld	r24, Z
     6c4:	8e bd       	out	0x2e, r24	; 46

		// wait for transmission to finish
		while(!(SPSR & (1<<SPIF) ) );
     6c6:	0d b4       	in	r0, 0x2d	; 45
     6c8:	07 fe       	sbrs	r0, 7
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <RFreadRXFIFO+0x28>

		// store the returned data
		retDat[i] = SPDR;
     6cc:	8e b5       	in	r24, 0x2e	; 46
     6ce:	81 93       	st	Z+, r24
	// wait for transmission to finish
	while(!(SPSR & (1<<SPIF) ) );

	// read the number of bytes we want to read out to the RX buffer
	int i;
	for(i = 0; i < PACKET_SIZE; i++){
     6d0:	2f 5f       	subi	r18, 0xFF	; 255
     6d2:	3f 4f       	sbci	r19, 0xFF	; 255
     6d4:	80 91 c0 06 	lds	r24, 0x06C0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	28 17       	cp	r18, r24
     6dc:	39 07       	cpc	r19, r25
     6de:	8c f3       	brlt	.-30     	; 0x6c2 <RFreadRXFIFO+0x24>
		retDat[i] = SPDR;
	}


	// turn the CS channel high to end transmission
	PORT_CS |= (1<<P_RF_CS);
     6e0:	47 9a       	sbi	0x08, 7	; 8
     6e2:	80 ea       	ldi	r24, 0xA0	; 160
     6e4:	9f e0       	ldi	r25, 0x0F	; 15
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	f1 f7       	brne	.-4      	; 0x6e6 <RFreadRXFIFO+0x48>

	_delay_ms(2);

	// if there is no new data ready to be read then turn the RX_DR data ready pin low
	if(RFRXbufferEmpty()){
     6ea:	0e 94 31 03 	call	0x662	; 0x662 <RFRXbufferEmpty>
     6ee:	89 2b       	or	r24, r25
     6f0:	51 f0       	breq	.+20     	; 0x706 <RFreadRXFIFO+0x68>
		char writeDat[1] = { (1<<RX_DR) };
     6f2:	80 e4       	ldi	r24, 0x40	; 64
     6f4:	89 83       	std	Y+1, r24	; 0x01
		RFwriteReg(STATUS,writeDat,1);
     6f6:	87 e0       	ldi	r24, 0x07	; 7
     6f8:	be 01       	movw	r22, r28
     6fa:	6f 5f       	subi	r22, 0xFF	; 255
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>
	}

	// put back in receiving mode
	RFstartReceiving();
     706:	0e 94 59 02 	call	0x4b2	; 0x4b2 <RFstartReceiving>
}
     70a:	0f 90       	pop	r0
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <RFRXbufferFull>:


int RFRXbufferFull(){
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	0f 92       	push	r0
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
	// dummy write data
	char retDat[1] = {0xFF};
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	89 83       	std	Y+1, r24	; 0x01

	RFreadReg(FIFO_STATUS,retDat,1);
     720:	87 e1       	ldi	r24, 0x17	; 23
     722:	be 01       	movw	r22, r28
     724:	6f 5f       	subi	r22, 0xFF	; 255
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	0e 94 29 02 	call	0x452	; 0x452 <RFreadReg>
     730:	29 81       	ldd	r18, Y+1	; 0x01
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	36 95       	lsr	r19
     736:	27 95       	ror	r18
     738:	21 70       	andi	r18, 0x01	; 1
     73a:	30 70       	andi	r19, 0x00	; 0
	if(retDat[0] & (1<<RX_FULL)){
		return 1;
	}else{
		return 0;
	}
}
     73c:	c9 01       	movw	r24, r18
     73e:	0f 90       	pop	r0
     740:	cf 91       	pop	r28
     742:	df 91       	pop	r29
     744:	08 95       	ret

00000746 <RFreceive>:


// clear out the FIFO and return the last received packet
void RFreceive(char * buffer){
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24

	clear(PCICR,PCIE0); // disable pin-change interrupts
     74c:	80 91 68 00 	lds	r24, 0x0068
     750:	8e 7f       	andi	r24, 0xFE	; 254
     752:	80 93 68 00 	sts	0x0068, r24
     756:	03 c0       	rjmp	.+6      	; 0x75e <RFreceive+0x18>

	while(RFRXdataReady()){
		RFreadRXFIFO(buffer);
     758:	ce 01       	movw	r24, r28
     75a:	0e 94 4f 03 	call	0x69e	; 0x69e <RFreadRXFIFO>
// clear out the FIFO and return the last received packet
void RFreceive(char * buffer){

	clear(PCICR,PCIE0); // disable pin-change interrupts

	while(RFRXdataReady()){
     75e:	0e 94 14 03 	call	0x628	; 0x628 <RFRXdataReady>
     762:	89 2b       	or	r24, r25
     764:	c9 f7       	brne	.-14     	; 0x758 <RFreceive+0x12>
		RFreadRXFIFO(buffer);
	}

	set(PCICR,PCIE0); // enable pin-change interrupts
     766:	80 91 68 00 	lds	r24, 0x0068
     76a:	81 60       	ori	r24, 0x01	; 1
     76c:	80 93 68 00 	sts	0x0068, r24
}
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <RFsetup>:


// function to setup the rf chip registers for communication and boot it up in receiving mode
void RFsetup(char * recvAddr, char packet_size){
     776:	ef 92       	push	r14
     778:	ff 92       	push	r15
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	df 93       	push	r29
     780:	cf 93       	push	r28
     782:	0f 92       	push	r0
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	7c 01       	movw	r14, r24
	PACKET_SIZE = packet_size;
     78a:	60 93 c0 06 	sts	0x06C0, r22
     78e:	88 ee       	ldi	r24, 0xE8	; 232
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	28 ec       	ldi	r18, 0xC8	; 200
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	f1 f7       	brne	.-4      	; 0x798 <RFsetup+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     79c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     79e:	d9 f7       	brne	.-10     	; 0x796 <RFsetup+0x20>
	_delay_ms(100);
	
	//setup the SPI port for use with the 24L01 chip
	SPIsetup();
     7a0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SPIsetup>

	//setup the RF CE and CS pins as outputs
	
	DDR_RF_CS|=(1<<DDR_P_RF_CS);
     7a4:	3f 9a       	sbi	0x07, 7	; 7

	DDR_RF_CE |=(1<<DDR_P_RF_CE);
     7a6:	20 9a       	sbi	0x04, 0	; 4

	//set the config register up
	char writeDat[1] = {CONFIG_VAL};
     7a8:	88 e3       	ldi	r24, 0x38	; 56
     7aa:	89 83       	std	Y+1, r24	; 0x01
	RFwriteReg(CONFIG,writeDat,1);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	8e 01       	movw	r16, r28
     7b0:	0f 5f       	subi	r16, 0xFF	; 255
     7b2:	1f 4f       	sbci	r17, 0xFF	; 255
     7b4:	b8 01       	movw	r22, r16
     7b6:	41 e0       	ldi	r20, 0x01	; 1
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>

	//enable PACKET_SIZE byte collection on pipe 1
	writeDat[0]  = PACKET_SIZE;
     7be:	80 91 c0 06 	lds	r24, 0x06C0
     7c2:	89 83       	std	Y+1, r24	; 0x01
	RFwriteReg(RX_PW_P1,writeDat,1);
     7c4:	82 e1       	ldi	r24, 0x12	; 18
     7c6:	b8 01       	movw	r22, r16
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>

	//turn on auto acknowledgement on first two pipes
	writeDat[0] = 0x03;
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	89 83       	std	Y+1, r24	; 0x01
	RFwriteReg(EN_AA,writeDat,1);
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	b8 01       	movw	r22, r16
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>

	//turn off auto retransmit
	writeDat[0] = 0x00;
     7e0:	19 82       	std	Y+1, r1	; 0x01
	RFwriteReg(SETUP_RETR,writeDat,1);		
     7e2:	84 e0       	ldi	r24, 0x04	; 4
     7e4:	b8 01       	movw	r22, r16
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <RFwriteReg>
	//setup address size as 5 bytes (probably deafult setup is already OK)
	//writeDat[0] = 0x03;
	//RFwriteReg(SETUP_AW,writeDat,1);	

	// write receive address to pipe1
	RFsetRxAddr(recvAddr, 5);
     7ee:	c7 01       	movw	r24, r14
     7f0:	65 e0       	ldi	r22, 0x05	; 5
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	0e 94 42 02 	call	0x484	; 0x484 <RFsetRxAddr>

	// turn the receiver on
	RFstartReceiving();
     7f8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <RFstartReceiving>
}
     7fc:	0f 90       	pop	r0
     7fe:	cf 91       	pop	r28
     800:	df 91       	pop	r29
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	ff 90       	pop	r15
     808:	ef 90       	pop	r14
     80a:	08 95       	ret

0000080c <init_adc>:
Returns:  None
**************************************************************************/
void init_adc(void){
	// ADC Multiplexer Selection Register
	// Use Vcc, right justified
	ADMUX |= (0<<REFS1)|(1<<REFS0)|(0<<ADLAR);
     80c:	ec e7       	ldi	r30, 0x7C	; 124
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	80 64       	ori	r24, 0x40	; 64
     814:	80 83       	st	Z, r24
	
	// Digital Input Disable Register 0
	// Used to disable digital input on ADC Channels
	// Channels 0,1,4,5,6,7 (1=disabled)
	// DIDR0 = [ADC7D,ADC6D,ADC5D,ADC4D, - , - , ADC1D, ADC0D]
	DIDR0 |=0xF3;
     816:	ee e7       	ldi	r30, 0x7E	; 126
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	83 6f       	ori	r24, 0xF3	; 243
     81e:	80 83       	st	Z, r24

	// ADC Control and Status Register A
	// Turn on ADC,prescale ADC clock by 64 (8MHz/64 = 125kHz)
	ADCSRA |=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(0<<ADPS0);
     820:	ea e7       	ldi	r30, 0x7A	; 122
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	86 68       	ori	r24, 0x86	; 134
     828:	80 83       	st	Z, r24
}
     82a:	08 95       	ret

0000082c <get_adc>:
Function: 	get_adc()
Purpose:  	Read a value from one of the 6 ADC values
Input:		ADC Channel to obtain value on (0,1,4,5,6,7)
Returns:	ADC Result
**************************************************************************/
uint16_t get_adc(unsigned int ADC_Channel){
     82c:	9c 01       	movw	r18, r24
	// Channel set with	ADMUX => (MUX4,MUX3,MUX2,MUX1,MUX0)

	// Clear ADMUX Channel Select
	ADMUX &=0xE0;
     82e:	80 91 7c 00 	lds	r24, 0x007C
     832:	80 7e       	andi	r24, 0xE0	; 224
     834:	80 93 7c 00 	sts	0x007C, r24

	switch(ADC_Channel){
     838:	24 30       	cpi	r18, 0x04	; 4
     83a:	31 05       	cpc	r19, r1
     83c:	d9 f0       	breq	.+54     	; 0x874 <get_adc+0x48>
     83e:	25 30       	cpi	r18, 0x05	; 5
     840:	31 05       	cpc	r19, r1
     842:	38 f4       	brcc	.+14     	; 0x852 <get_adc+0x26>
     844:	21 15       	cp	r18, r1
     846:	31 05       	cpc	r19, r1
     848:	71 f0       	breq	.+28     	; 0x866 <get_adc+0x3a>
     84a:	21 30       	cpi	r18, 0x01	; 1
     84c:	31 05       	cpc	r19, r1
     84e:	19 f5       	brne	.+70     	; 0x896 <get_adc+0x6a>
     850:	0d c0       	rjmp	.+26     	; 0x86c <get_adc+0x40>
     852:	26 30       	cpi	r18, 0x06	; 6
     854:	31 05       	cpc	r19, r1
     856:	b1 f0       	breq	.+44     	; 0x884 <get_adc+0x58>
     858:	26 30       	cpi	r18, 0x06	; 6
     85a:	31 05       	cpc	r19, r1
     85c:	78 f0       	brcs	.+30     	; 0x87c <get_adc+0x50>
     85e:	27 30       	cpi	r18, 0x07	; 7
     860:	31 05       	cpc	r19, r1
     862:	c9 f4       	brne	.+50     	; 0x896 <get_adc+0x6a>
     864:	13 c0       	rjmp	.+38     	; 0x88c <get_adc+0x60>
		case 0: 	// Channel 0 (00000)
			ADMUX |=0x00;
     866:	80 91 7c 00 	lds	r24, 0x007C
     86a:	13 c0       	rjmp	.+38     	; 0x892 <get_adc+0x66>
			break;
		case 1:		// Channel 1 (00001)
			ADMUX |=0x01;
     86c:	80 91 7c 00 	lds	r24, 0x007C
     870:	81 60       	ori	r24, 0x01	; 1
     872:	0f c0       	rjmp	.+30     	; 0x892 <get_adc+0x66>
			break;
		case 4:		// Channel 4 (00100)
			ADMUX |=0x04;
     874:	80 91 7c 00 	lds	r24, 0x007C
     878:	84 60       	ori	r24, 0x04	; 4
     87a:	0b c0       	rjmp	.+22     	; 0x892 <get_adc+0x66>
			break;
		case 5:		// Channel 5 (00101)
			ADMUX |=0x05;
     87c:	80 91 7c 00 	lds	r24, 0x007C
     880:	85 60       	ori	r24, 0x05	; 5
     882:	07 c0       	rjmp	.+14     	; 0x892 <get_adc+0x66>
			break;
		case 6:		// Channel 6 (00110)
			ADMUX |=0x06;
     884:	80 91 7c 00 	lds	r24, 0x007C
     888:	86 60       	ori	r24, 0x06	; 6
     88a:	03 c0       	rjmp	.+6      	; 0x892 <get_adc+0x66>
			break;
		case 7:		// Channel 7 (00111)
			ADMUX |=0x07;
     88c:	80 91 7c 00 	lds	r24, 0x007C
     890:	87 60       	ori	r24, 0x07	; 7
     892:	80 93 7c 00 	sts	0x007C, r24
		default:
			break;
	}

	// Start converstion
	set(ADCSRA,ADSC);
     896:	80 91 7a 00 	lds	r24, 0x007A
     89a:	80 64       	ori	r24, 0x40	; 64
     89c:	80 93 7a 00 	sts	0x007A, r24

	// Wait until complete
	while(!(check(ADCSRA,ADIF))){
     8a0:	80 91 7a 00 	lds	r24, 0x007A
     8a4:	84 ff       	sbrs	r24, 4
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <get_adc+0x74>
	}
	
	// Clear Flag
	set(ADCSRA,ADIF);
     8a8:	80 91 7a 00 	lds	r24, 0x007A
     8ac:	80 61       	ori	r24, 0x10	; 16
     8ae:	80 93 7a 00 	sts	0x007A, r24
	// Obtain value
	return ADC;
     8b2:	20 91 78 00 	lds	r18, 0x0078
     8b6:	30 91 79 00 	lds	r19, 0x0079
}
     8ba:	c9 01       	movw	r24, r18
     8bc:	08 95       	ret

000008be <get_ucTemp>:
Input:		
Returns:	ADC Temperature Sensor Result
**************************************************************************/
uint16_t get_ucTemp(){
	// Save previous ADMUX settings
	int oldADMUX = ADMUX;
     8be:	90 91 7c 00 	lds	r25, 0x007C
	
	// Clear ADMUX Channel Select
	ADMUX &= 0xE0;
     8c2:	80 91 7c 00 	lds	r24, 0x007C
     8c6:	80 7e       	andi	r24, 0xE0	; 224
     8c8:	80 93 7c 00 	sts	0x007C, r24

	// Set voltage refernce to internal 2.56V
	ADMUX |= 0xC0;
     8cc:	80 91 7c 00 	lds	r24, 0x007C
     8d0:	80 6c       	ori	r24, 0xC0	; 192
     8d2:	80 93 7c 00 	sts	0x007C, r24

	// On-chip Temperature Sensor (11111)
	ADMUX |= 0x1F;
     8d6:	80 91 7c 00 	lds	r24, 0x007C
     8da:	8f 61       	ori	r24, 0x1F	; 31
     8dc:	80 93 7c 00 	sts	0x007C, r24
	
	// Start converstion
	set(ADCSRA,ADSC);
     8e0:	80 91 7a 00 	lds	r24, 0x007A
     8e4:	80 64       	ori	r24, 0x40	; 64
     8e6:	80 93 7a 00 	sts	0x007A, r24

	// Wait until complete
	while(!(check(ADCSRA,ADIF))){
     8ea:	80 91 7a 00 	lds	r24, 0x007A
     8ee:	84 ff       	sbrs	r24, 4
     8f0:	fc cf       	rjmp	.-8      	; 0x8ea <get_ucTemp+0x2c>
	}
	
	// Clear Flag
	set(ADCSRA,ADIF);
     8f2:	80 91 7a 00 	lds	r24, 0x007A
     8f6:	80 61       	ori	r24, 0x10	; 16
     8f8:	80 93 7a 00 	sts	0x007A, r24

	// Read a second time
	// Start converstion
	set(ADCSRA,ADSC);
     8fc:	80 91 7a 00 	lds	r24, 0x007A
     900:	80 64       	ori	r24, 0x40	; 64
     902:	80 93 7a 00 	sts	0x007A, r24

	// Wait until complete
	while(!(check(ADCSRA,ADIF))){
     906:	80 91 7a 00 	lds	r24, 0x007A
     90a:	84 ff       	sbrs	r24, 4
     90c:	fc cf       	rjmp	.-8      	; 0x906 <get_ucTemp+0x48>
	}
	
	// Clear Flag
	set(ADCSRA,ADIF);
     90e:	80 91 7a 00 	lds	r24, 0x007A
     912:	80 61       	ori	r24, 0x10	; 16
     914:	80 93 7a 00 	sts	0x007A, r24

	// Return old ADMUX settings
	ADMUX = oldADMUX;
     918:	90 93 7c 00 	sts	0x007C, r25

	// Obtain value
	return ADC;
     91c:	20 91 78 00 	lds	r18, 0x0078
     920:	30 91 79 00 	lds	r19, 0x0079
}
     924:	c9 01       	movw	r24, r18
     926:	08 95       	ret

00000928 <PID_motorEnable>:
Purpose:  changes PID gain values
Input:    PID gains
Returns:  None
**************************************************************************/
void PID_motorEnable(int status){
	motorEnable = status; // 0 or 1
     928:	90 93 b5 02 	sts	0x02B5, r25
     92c:	80 93 b4 02 	sts	0x02B4, r24
}
     930:	08 95       	ret

00000932 <PID_setAlt>:
Purpose:  changes PID gain values
Input:    PID gains
Returns:  None
**************************************************************************/
void PID_setAlt(int P, int I, int D){
	P_alt = P;
     932:	90 93 31 02 	sts	0x0231, r25
     936:	80 93 30 02 	sts	0x0230, r24
	I_alt = I;
     93a:	70 93 33 02 	sts	0x0233, r23
     93e:	60 93 32 02 	sts	0x0232, r22
	D_alt = D;
     942:	50 93 35 02 	sts	0x0235, r21
     946:	40 93 34 02 	sts	0x0234, r20
}
     94a:	08 95       	ret

0000094c <PID_setThrust>:
Function: PID_setThrust()
Purpose:  stabilize PWM using PID
Input:    IMU values: yaw,pitch,roll,altitude
Returns:  None
**************************************************************************/
void PID_setThrust(int verticalThrust){
     94c:	9c 01       	movw	r18, r24
	if(isStarted == 1){
     94e:	80 91 b6 02 	lds	r24, 0x02B6
     952:	81 30       	cpi	r24, 0x01	; 1
     954:	89 f4       	brne	.+34     	; 0x978 <PID_setThrust+0x2c>
		thrustFloor = (verticalThrust*6)/20 + 1200;
     956:	c9 01       	movw	r24, r18
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	82 0f       	add	r24, r18
     95e:	93 1f       	adc	r25, r19
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	64 e1       	ldi	r22, 0x14	; 20
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	0e 94 c5 12 	call	0x258a	; 0x258a <__divmodhi4>
     96c:	60 55       	subi	r22, 0x50	; 80
     96e:	7b 4f       	sbci	r23, 0xFB	; 251
     970:	70 93 a9 02 	sts	0x02A9, r23
     974:	60 93 a8 02 	sts	0x02A8, r22
     978:	08 95       	ret

0000097a <PID_command>:
Function: PID_setThrust()
Purpose:  stabilize PWM using PID
Input:    IMU values: yaw,pitch,roll,altitude
Returns:  None
**************************************************************************/
void PID_command(char command){
     97a:	1f 93       	push	r17
	switch(command){
     97c:	89 36       	cpi	r24, 0x69	; 105
     97e:	09 f4       	brne	.+2      	; 0x982 <PID_command+0x8>
     980:	d0 c0       	rjmp	.+416    	; 0xb22 <__stack+0x23>
     982:	8a 36       	cpi	r24, 0x6A	; 106
     984:	c8 f4       	brcc	.+50     	; 0x9b8 <PID_command+0x3e>
     986:	82 33       	cpi	r24, 0x32	; 50
     988:	09 f4       	brne	.+2      	; 0x98c <PID_command+0x12>
     98a:	95 c0       	rjmp	.+298    	; 0xab6 <PID_command+0x13c>
     98c:	83 33       	cpi	r24, 0x33	; 51
     98e:	50 f4       	brcc	.+20     	; 0x9a4 <PID_command+0x2a>
     990:	8d 32       	cpi	r24, 0x2D	; 45
     992:	09 f4       	brne	.+2      	; 0x996 <PID_command+0x1c>
     994:	78 c0       	rjmp	.+240    	; 0xa86 <PID_command+0x10c>
     996:	81 33       	cpi	r24, 0x31	; 49
     998:	09 f4       	brne	.+2      	; 0x99c <PID_command+0x22>
     99a:	8a c0       	rjmp	.+276    	; 0xab0 <PID_command+0x136>
     99c:	80 32       	cpi	r24, 0x20	; 32
     99e:	09 f0       	breq	.+2      	; 0x9a2 <PID_command+0x28>
     9a0:	d2 c0       	rjmp	.+420    	; 0xb46 <__stack+0x47>
     9a2:	49 c0       	rjmp	.+146    	; 0xa36 <PID_command+0xbc>
     9a4:	84 33       	cpi	r24, 0x34	; 52
     9a6:	09 f4       	brne	.+2      	; 0x9aa <PID_command+0x30>
     9a8:	90 c0       	rjmp	.+288    	; 0xaca <PID_command+0x150>
     9aa:	84 33       	cpi	r24, 0x34	; 52
     9ac:	08 f4       	brcc	.+2      	; 0x9b0 <PID_command+0x36>
     9ae:	8a c0       	rjmp	.+276    	; 0xac4 <PID_command+0x14a>
     9b0:	8d 33       	cpi	r24, 0x3D	; 61
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <PID_command+0x3c>
     9b4:	c8 c0       	rjmp	.+400    	; 0xb46 <__stack+0x47>
     9b6:	6d c0       	rjmp	.+218    	; 0xa92 <PID_command+0x118>
     9b8:	8f 36       	cpi	r24, 0x6F	; 111
     9ba:	09 f4       	brne	.+2      	; 0x9be <PID_command+0x44>
     9bc:	92 c0       	rjmp	.+292    	; 0xae2 <PID_command+0x168>
     9be:	80 37       	cpi	r24, 0x70	; 112
     9c0:	38 f4       	brcc	.+14     	; 0x9d0 <PID_command+0x56>
     9c2:	8b 36       	cpi	r24, 0x6B	; 107
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <PID_command+0x4e>
     9c6:	a0 c0       	rjmp	.+320    	; 0xb08 <__stack+0x9>
     9c8:	8c 36       	cpi	r24, 0x6C	; 108
     9ca:	09 f0       	breq	.+2      	; 0x9ce <PID_command+0x54>
     9cc:	bc c0       	rjmp	.+376    	; 0xb46 <__stack+0x47>
     9ce:	96 c0       	rjmp	.+300    	; 0xafc <PID_command+0x182>
     9d0:	83 37       	cpi	r24, 0x73	; 115
     9d2:	39 f0       	breq	.+14     	; 0x9e2 <PID_command+0x68>
     9d4:	85 37       	cpi	r24, 0x75	; 117
     9d6:	09 f4       	brne	.+2      	; 0x9da <PID_command+0x60>
     9d8:	aa c0       	rjmp	.+340    	; 0xb2e <__stack+0x2f>
     9da:	80 37       	cpi	r24, 0x70	; 112
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <PID_command+0x66>
     9de:	b3 c0       	rjmp	.+358    	; 0xb46 <__stack+0x47>
     9e0:	7a c0       	rjmp	.+244    	; 0xad6 <PID_command+0x15c>
		case 's':
			// idle throttle
			if(activated == 1){
     9e2:	10 91 b7 02 	lds	r17, 0x02B7
     9e6:	11 30       	cpi	r17, 0x01	; 1
     9e8:	09 f0       	breq	.+2      	; 0x9ec <PID_command+0x72>
     9ea:	ad c0       	rjmp	.+346    	; 0xb46 <__stack+0x47>
				thrustFloor = 1106;
     9ec:	82 e5       	ldi	r24, 0x52	; 82
     9ee:	94 e0       	ldi	r25, 0x04	; 4
     9f0:	90 93 a9 02 	sts	0x02A9, r25
     9f4:	80 93 a8 02 	sts	0x02A8, r24
				motorEnable = 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	90 93 b5 02 	sts	0x02B5, r25
     a00:	80 93 b4 02 	sts	0x02B4, r24
				set_duty(1,1106);
     a04:	62 e5       	ldi	r22, 0x52	; 82
     a06:	74 e0       	ldi	r23, 0x04	; 4
     a08:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
				set_duty(2,1106);
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	62 e5       	ldi	r22, 0x52	; 82
     a12:	74 e0       	ldi	r23, 0x04	; 4
     a14:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
				set_duty(3,1106);
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	62 e5       	ldi	r22, 0x52	; 82
     a1e:	74 e0       	ldi	r23, 0x04	; 4
     a20:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
				set_duty(4,1106);	
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	62 e5       	ldi	r22, 0x52	; 82
     a2a:	74 e0       	ldi	r23, 0x04	; 4
     a2c:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
				isStarted = 1;
     a30:	10 93 b6 02 	sts	0x02B6, r17
     a34:	88 c0       	rjmp	.+272    	; 0xb46 <__stack+0x47>
			}
			break;
		case ' ':
			// emergency dead stop
			//TransmitString("SPACE\n\r");
			activated = 1;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 b7 02 	sts	0x02B7, r24
			motorEnable = 0;
     a3c:	10 92 b5 02 	sts	0x02B5, r1
     a40:	10 92 b4 02 	sts	0x02B4, r1
			thrustFloor = 1000;
     a44:	88 ee       	ldi	r24, 0xE8	; 232
     a46:	93 e0       	ldi	r25, 0x03	; 3
     a48:	90 93 a9 02 	sts	0x02A9, r25
     a4c:	80 93 a8 02 	sts	0x02A8, r24
			set_duty(1,1000);
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	68 ee       	ldi	r22, 0xE8	; 232
     a56:	73 e0       	ldi	r23, 0x03	; 3
     a58:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
			set_duty(2,1000);
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	68 ee       	ldi	r22, 0xE8	; 232
     a62:	73 e0       	ldi	r23, 0x03	; 3
     a64:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
			set_duty(3,1000);
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	68 ee       	ldi	r22, 0xE8	; 232
     a6e:	73 e0       	ldi	r23, 0x03	; 3
     a70:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
			set_duty(4,1000);
     a74:	84 e0       	ldi	r24, 0x04	; 4
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	68 ee       	ldi	r22, 0xE8	; 232
     a7a:	73 e0       	ldi	r23, 0x03	; 3
     a7c:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
			isStarted = 0;			
     a80:	10 92 b6 02 	sts	0x02B6, r1
     a84:	60 c0       	rjmp	.+192    	; 0xb46 <__stack+0x47>
			break;
		case '-':
			userThrust -= 10;
     a86:	80 91 aa 02 	lds	r24, 0x02AA
     a8a:	90 91 ab 02 	lds	r25, 0x02AB
     a8e:	0a 97       	sbiw	r24, 0x0a	; 10
     a90:	0a c0       	rjmp	.+20     	; 0xaa6 <PID_command+0x12c>
			break;
		case '=':
			if(isStarted == 1)
     a92:	80 91 b6 02 	lds	r24, 0x02B6
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	09 f0       	breq	.+2      	; 0xa9c <PID_command+0x122>
     a9a:	55 c0       	rjmp	.+170    	; 0xb46 <__stack+0x47>
				userThrust += 10;
     a9c:	80 91 aa 02 	lds	r24, 0x02AA
     aa0:	90 91 ab 02 	lds	r25, 0x02AB
     aa4:	0a 96       	adiw	r24, 0x0a	; 10
     aa6:	90 93 ab 02 	sts	0x02AB, r25
     aaa:	80 93 aa 02 	sts	0x02AA, r24
     aae:	4b c0       	rjmp	.+150    	; 0xb46 <__stack+0x47>
			break;
		case '1':	// Start Motor 1
			set_duty(1,1250);
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <PID_command+0x140>
			break;
		case '2':	// Start Motor 2
			set_duty(2,1250);
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	62 ee       	ldi	r22, 0xE2	; 226
     abc:	74 e0       	ldi	r23, 0x04	; 4
     abe:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
     ac2:	41 c0       	rjmp	.+130    	; 0xb46 <__stack+0x47>
			break;
		case '3':	// Start Motor 3
			set_duty(3,1250);
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	f8 cf       	rjmp	.-16     	; 0xaba <PID_command+0x140>
			break;
		case '4':	// Start Motor 4
			set_duty(4,1250);
     aca:	84 e0       	ldi	r24, 0x04	; 4
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	62 ee       	ldi	r22, 0xE2	; 226
     ad0:	74 e0       	ldi	r23, 0x04	; 4
     ad2:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
		case 'p':
			P_pitch += 1;
     ad6:	80 91 08 01 	lds	r24, 0x0108
     ada:	90 91 09 01 	lds	r25, 0x0109
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <PID_command+0x178>
			break;
		case 'o':
			if(P_pitch >= 1)
     ae2:	80 91 08 01 	lds	r24, 0x0108
     ae6:	90 91 09 01 	lds	r25, 0x0109
     aea:	18 16       	cp	r1, r24
     aec:	19 06       	cpc	r1, r25
     aee:	5c f5       	brge	.+86     	; 0xb46 <__stack+0x47>
				P_pitch -= 1;
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	90 93 09 01 	sts	0x0109, r25
     af6:	80 93 08 01 	sts	0x0108, r24
     afa:	25 c0       	rjmp	.+74     	; 0xb46 <__stack+0x47>
			break;
		case 'l':
			D_pitch += 2;
     afc:	80 91 0a 01 	lds	r24, 0x010A
     b00:	90 91 0b 01 	lds	r25, 0x010B
     b04:	02 96       	adiw	r24, 0x02	; 2
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <__stack+0x19>
			break;
		case 'k':
			if(D_pitch >= 2)
     b08:	80 91 0a 01 	lds	r24, 0x010A
     b0c:	90 91 0b 01 	lds	r25, 0x010B
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	91 05       	cpc	r25, r1
     b14:	c4 f0       	brlt	.+48     	; 0xb46 <__stack+0x47>
				D_pitch -= 2;
     b16:	02 97       	sbiw	r24, 0x02	; 2
     b18:	90 93 0b 01 	sts	0x010B, r25
     b1c:	80 93 0a 01 	sts	0x010A, r24
     b20:	12 c0       	rjmp	.+36     	; 0xb46 <__stack+0x47>
			break;
		case 'i':
			PID_BAND += 1;
     b22:	80 91 04 01 	lds	r24, 0x0104
     b26:	90 91 05 01 	lds	r25, 0x0105
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	08 c0       	rjmp	.+16     	; 0xb3e <__stack+0x3f>
			break;
		case 'u':
			if(PID_BAND >= 1)
     b2e:	80 91 04 01 	lds	r24, 0x0104
     b32:	90 91 05 01 	lds	r25, 0x0105
     b36:	18 16       	cp	r1, r24
     b38:	19 06       	cpc	r1, r25
     b3a:	2c f4       	brge	.+10     	; 0xb46 <__stack+0x47>
				PID_BAND -= 1;
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	90 93 05 01 	sts	0x0105, r25
     b42:	80 93 04 01 	sts	0x0104, r24
			break;
		default:
			break;
	}
}
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <PID_setPosition>:
Function: PID_setPosition()
Purpose:  changes PID gain values
Input:    desired yaw,pitch,roll,alt
Returns:  None
**************************************************************************/
void PID_setPosition(packet_com_t* data){
     b4a:	fc 01       	movw	r30, r24
	yaw_des 	= (data->yaw)/10;
     b4c:	85 81       	ldd	r24, Z+5	; 0x05
     b4e:	96 81       	ldd	r25, Z+6	; 0x06
     b50:	6a e0       	ldi	r22, 0x0A	; 10
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	0e 94 c5 12 	call	0x258a	; 0x258a <__divmodhi4>
     b58:	70 93 45 02 	sts	0x0245, r23
     b5c:	60 93 44 02 	sts	0x0244, r22
	pitch_des 	= (data->pitch)/70;
     b60:	81 81       	ldd	r24, Z+1	; 0x01
     b62:	92 81       	ldd	r25, Z+2	; 0x02
     b64:	66 e4       	ldi	r22, 0x46	; 70
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	0e 94 c5 12 	call	0x258a	; 0x258a <__divmodhi4>
     b6c:	70 93 47 02 	sts	0x0247, r23
     b70:	60 93 46 02 	sts	0x0246, r22
	roll_des 	= (data->roll)/70;
     b74:	83 81       	ldd	r24, Z+3	; 0x03
     b76:	94 81       	ldd	r25, Z+4	; 0x04
     b78:	66 e4       	ldi	r22, 0x46	; 70
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	0e 94 c5 12 	call	0x258a	; 0x258a <__divmodhi4>
     b80:	70 93 49 02 	sts	0x0249, r23
     b84:	60 93 48 02 	sts	0x0248, r22
}
     b88:	08 95       	ret

00000b8a <PID_updatePWM>:
Function: PID_updatePWM()
Purpose:  stabilize PWM using PID
Input:    IMU values: yaw,pitch,roll,altitude
Returns:  None
**************************************************************************/
void PID_updatePWM(packet_razordata_t* data){
     b8a:	2f 92       	push	r2
     b8c:	3f 92       	push	r3
     b8e:	4f 92       	push	r4
     b90:	5f 92       	push	r5
     b92:	6f 92       	push	r6
     b94:	7f 92       	push	r7
     b96:	8f 92       	push	r8
     b98:	9f 92       	push	r9
     b9a:	af 92       	push	r10
     b9c:	bf 92       	push	r11
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <PID_updatePWM+0x26>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	1c 01       	movw	r2, r24
	if(motorEnable == 1){
     bb6:	80 91 b4 02 	lds	r24, 0x02B4
     bba:	90 91 b5 02 	lds	r25, 0x02B5
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <PID_updatePWM+0x3a>
     bc2:	4d c3       	rjmp	.+1690   	; 0x125e <PID_updatePWM+0x6d4>
	
		//	YAW
		error_yaw = 0 - ((int)((data->yaw)-20000));
     bc4:	d1 01       	movw	r26, r2
     bc6:	8d 91       	ld	r24, X+
     bc8:	9c 91       	ld	r25, X
     bca:	80 52       	subi	r24, 0x20	; 32
     bcc:	9e 44       	sbci	r25, 0x4E	; 78
     bce:	cc 24       	eor	r12, r12
     bd0:	dd 24       	eor	r13, r13
     bd2:	c8 1a       	sub	r12, r24
     bd4:	d9 0a       	sbc	r13, r25
     bd6:	d0 92 53 02 	sts	0x0253, r13
     bda:	c0 92 52 02 	sts	0x0252, r12
		yaw_P = ((double)(P_yaw)*(double)(error_yaw))/GAIN_DIVIDE;
     bde:	60 91 22 02 	lds	r22, 0x0222
     be2:	70 91 23 02 	lds	r23, 0x0223
     be6:	88 27       	eor	r24, r24
     be8:	77 fd       	sbrc	r23, 7
     bea:	80 95       	com	r24
     bec:	98 2f       	mov	r25, r24
     bee:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     bf2:	7b 01       	movw	r14, r22
     bf4:	8c 01       	movw	r16, r24
     bf6:	b6 01       	movw	r22, r12
     bf8:	88 27       	eor	r24, r24
     bfa:	77 fd       	sbrc	r23, 7
     bfc:	80 95       	com	r24
     bfe:	98 2f       	mov	r25, r24
     c00:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     c04:	9b 01       	movw	r18, r22
     c06:	ac 01       	movw	r20, r24
     c08:	c8 01       	movw	r24, r16
     c0a:	b7 01       	movw	r22, r14
     c0c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e4       	ldi	r19, 0x40	; 64
     c14:	4c e1       	ldi	r20, 0x1C	; 28
     c16:	56 e4       	ldi	r21, 0x46	; 70
     c18:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     c1c:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
     c20:	70 93 6f 02 	sts	0x026F, r23
     c24:	60 93 6e 02 	sts	0x026E, r22
		if(yaw_P > PID_BAND){
     c28:	40 90 04 01 	lds	r4, 0x0104
     c2c:	50 90 05 01 	lds	r5, 0x0105
     c30:	46 16       	cp	r4, r22
     c32:	57 06       	cpc	r5, r23
     c34:	2c f4       	brge	.+10     	; 0xc40 <PID_updatePWM+0xb6>
			yaw_P = PID_BAND;
     c36:	50 92 6f 02 	sts	0x026F, r5
     c3a:	40 92 6e 02 	sts	0x026E, r4
     c3e:	0b c0       	rjmp	.+22     	; 0xc56 <PID_updatePWM+0xcc>
		}else if(yaw_P < -1*PID_BAND){
     c40:	22 27       	eor	r18, r18
     c42:	33 27       	eor	r19, r19
     c44:	24 19       	sub	r18, r4
     c46:	35 09       	sbc	r19, r5
     c48:	62 17       	cp	r22, r18
     c4a:	73 07       	cpc	r23, r19
     c4c:	24 f4       	brge	.+8      	; 0xc56 <PID_updatePWM+0xcc>
			yaw_P = -1*PID_BAND;
     c4e:	30 93 6f 02 	sts	0x026F, r19
     c52:	20 93 6e 02 	sts	0x026E, r18
		}
		yaw_I += error_yaw;
     c56:	80 90 70 02 	lds	r8, 0x0270
     c5a:	90 90 71 02 	lds	r9, 0x0271
     c5e:	8c 0c       	add	r8, r12
     c60:	9d 1c       	adc	r9, r13
     c62:	90 92 71 02 	sts	0x0271, r9
     c66:	80 92 70 02 	sts	0x0270, r8
		yaw_D = ((int)((data->omegatwo)-20000));
     c6a:	f1 01       	movw	r30, r2
     c6c:	82 85       	ldd	r24, Z+10	; 0x0a
     c6e:	93 85       	ldd	r25, Z+11	; 0x0b
     c70:	80 52       	subi	r24, 0x20	; 32
     c72:	9e 44       	sbci	r25, 0x4E	; 78
     c74:	90 93 73 02 	sts	0x0273, r25
     c78:	80 93 72 02 	sts	0x0272, r24
		if(yaw_D < 20 && yaw_D > -20){
     c7c:	43 96       	adiw	r24, 0x13	; 19
     c7e:	87 97       	sbiw	r24, 0x27	; 39
     c80:	20 f4       	brcc	.+8      	; 0xc8a <PID_updatePWM+0x100>
			yaw_D = 0;
     c82:	10 92 73 02 	sts	0x0273, r1
     c86:	10 92 72 02 	sts	0x0272, r1
		}
		yaw_D = 0-((double)(D_yaw)*(double)(yaw_D))/GAIN_DIVIDE;
     c8a:	60 91 06 01 	lds	r22, 0x0106
     c8e:	70 91 07 01 	lds	r23, 0x0107
     c92:	88 27       	eor	r24, r24
     c94:	77 fd       	sbrc	r23, 7
     c96:	80 95       	com	r24
     c98:	98 2f       	mov	r25, r24
     c9a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     c9e:	7b 01       	movw	r14, r22
     ca0:	8c 01       	movw	r16, r24
     ca2:	60 91 72 02 	lds	r22, 0x0272
     ca6:	70 91 73 02 	lds	r23, 0x0273
     caa:	88 27       	eor	r24, r24
     cac:	77 fd       	sbrc	r23, 7
     cae:	80 95       	com	r24
     cb0:	98 2f       	mov	r25, r24
     cb2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c8 01       	movw	r24, r16
     cbc:	b7 01       	movw	r22, r14
     cbe:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e4       	ldi	r19, 0x40	; 64
     cc6:	4c e1       	ldi	r20, 0x1C	; 28
     cc8:	56 ec       	ldi	r21, 0xC6	; 198
     cca:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
     cda:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
     cde:	70 93 73 02 	sts	0x0273, r23
     ce2:	60 93 72 02 	sts	0x0272, r22
		if(yaw_D > 100){
     ce6:	65 36       	cpi	r22, 0x65	; 101
     ce8:	71 05       	cpc	r23, r1
     cea:	1c f0       	brlt	.+6      	; 0xcf2 <PID_updatePWM+0x168>
			yaw_D = 100;
     cec:	84 e6       	ldi	r24, 0x64	; 100
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	06 c0       	rjmp	.+12     	; 0xcfe <PID_updatePWM+0x174>
		}else if(yaw_D < -100){
     cf2:	ff ef       	ldi	r31, 0xFF	; 255
     cf4:	6c 39       	cpi	r22, 0x9C	; 156
     cf6:	7f 07       	cpc	r23, r31
     cf8:	34 f4       	brge	.+12     	; 0xd06 <PID_updatePWM+0x17c>
			yaw_D = -100;
     cfa:	8c e9       	ldi	r24, 0x9C	; 156
     cfc:	9f ef       	ldi	r25, 0xFF	; 255
     cfe:	90 93 73 02 	sts	0x0273, r25
     d02:	80 93 72 02 	sts	0x0272, r24
		}
		yaw_sum = yaw_P + ((double)(I_yaw)*(double)(yaw_I))/GAIN_DIVIDE + yaw_D + yaw_des;
     d06:	60 91 6e 02 	lds	r22, 0x026E
     d0a:	70 91 6f 02 	lds	r23, 0x026F
     d0e:	88 27       	eor	r24, r24
     d10:	77 fd       	sbrc	r23, 7
     d12:	80 95       	com	r24
     d14:	98 2f       	mov	r25, r24
     d16:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     d1a:	5b 01       	movw	r10, r22
     d1c:	6c 01       	movw	r12, r24
     d1e:	60 91 24 02 	lds	r22, 0x0224
     d22:	70 91 25 02 	lds	r23, 0x0225
     d26:	88 27       	eor	r24, r24
     d28:	77 fd       	sbrc	r23, 7
     d2a:	80 95       	com	r24
     d2c:	98 2f       	mov	r25, r24
     d2e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     d32:	7b 01       	movw	r14, r22
     d34:	8c 01       	movw	r16, r24
     d36:	b4 01       	movw	r22, r8
     d38:	88 27       	eor	r24, r24
     d3a:	77 fd       	sbrc	r23, 7
     d3c:	80 95       	com	r24
     d3e:	98 2f       	mov	r25, r24
     d40:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     d44:	9b 01       	movw	r18, r22
     d46:	ac 01       	movw	r20, r24
     d48:	c8 01       	movw	r24, r16
     d4a:	b7 01       	movw	r22, r14
     d4c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e4       	ldi	r19, 0x40	; 64
     d54:	4c e1       	ldi	r20, 0x1C	; 28
     d56:	56 e4       	ldi	r21, 0x46	; 70
     d58:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     d5c:	9b 01       	movw	r18, r22
     d5e:	ac 01       	movw	r20, r24
     d60:	c6 01       	movw	r24, r12
     d62:	b5 01       	movw	r22, r10
     d64:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
     d68:	7b 01       	movw	r14, r22
     d6a:	8c 01       	movw	r16, r24
     d6c:	60 91 72 02 	lds	r22, 0x0272
     d70:	70 91 73 02 	lds	r23, 0x0273
     d74:	88 27       	eor	r24, r24
     d76:	77 fd       	sbrc	r23, 7
     d78:	80 95       	com	r24
     d7a:	98 2f       	mov	r25, r24
     d7c:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	c8 01       	movw	r24, r16
     d86:	b7 01       	movw	r22, r14
     d88:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
     d8c:	7b 01       	movw	r14, r22
     d8e:	8c 01       	movw	r16, r24
     d90:	60 91 44 02 	lds	r22, 0x0244
     d94:	70 91 45 02 	lds	r23, 0x0245
     d98:	88 27       	eor	r24, r24
     d9a:	77 fd       	sbrc	r23, 7
     d9c:	80 95       	com	r24
     d9e:	98 2f       	mov	r25, r24
     da0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	c8 01       	movw	r24, r16
     daa:	b7 01       	movw	r22, r14
     dac:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
     db0:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
     db4:	7a 83       	std	Y+2, r23	; 0x02
     db6:	69 83       	std	Y+1, r22	; 0x01
     db8:	70 93 75 02 	sts	0x0275, r23
     dbc:	60 93 74 02 	sts	0x0274, r22
	

		//	PITCH
		//error_pitch_past = error_pitch;
		error_pitch = 0 - ((int)((data->pitch)-20000));
     dc0:	d1 01       	movw	r26, r2
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	8d 91       	ld	r24, X+
     dc6:	9c 91       	ld	r25, X
     dc8:	13 97       	sbiw	r26, 0x03	; 3
     dca:	80 52       	subi	r24, 0x20	; 32
     dcc:	9e 44       	sbci	r25, 0x4E	; 78
     dce:	88 24       	eor	r8, r8
     dd0:	99 24       	eor	r9, r9
     dd2:	88 1a       	sub	r8, r24
     dd4:	99 0a       	sbc	r9, r25
     dd6:	90 92 55 02 	sts	0x0255, r9
     dda:	80 92 54 02 	sts	0x0254, r8
		pitch_P = ((double)(P_pitch)*(double)(error_pitch))/GAIN_DIVIDE;
     dde:	60 91 08 01 	lds	r22, 0x0108
     de2:	70 91 09 01 	lds	r23, 0x0109
     de6:	88 27       	eor	r24, r24
     de8:	77 fd       	sbrc	r23, 7
     dea:	80 95       	com	r24
     dec:	98 2f       	mov	r25, r24
     dee:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     df2:	7b 01       	movw	r14, r22
     df4:	8c 01       	movw	r16, r24
     df6:	b4 01       	movw	r22, r8
     df8:	88 27       	eor	r24, r24
     dfa:	77 fd       	sbrc	r23, 7
     dfc:	80 95       	com	r24
     dfe:	98 2f       	mov	r25, r24
     e00:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	c8 01       	movw	r24, r16
     e0a:	b7 01       	movw	r22, r14
     e0c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e4       	ldi	r19, 0x40	; 64
     e14:	4c e1       	ldi	r20, 0x1C	; 28
     e16:	56 e4       	ldi	r21, 0x46	; 70
     e18:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     e1c:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
     e20:	70 93 77 02 	sts	0x0277, r23
     e24:	60 93 76 02 	sts	0x0276, r22
		if(pitch_P > PID_BAND){
     e28:	46 16       	cp	r4, r22
     e2a:	57 06       	cpc	r5, r23
     e2c:	2c f4       	brge	.+10     	; 0xe38 <PID_updatePWM+0x2ae>
			pitch_P = PID_BAND;
     e2e:	50 92 77 02 	sts	0x0277, r5
     e32:	40 92 76 02 	sts	0x0276, r4
     e36:	0b c0       	rjmp	.+22     	; 0xe4e <PID_updatePWM+0x2c4>
		}else if(pitch_P < -1*PID_BAND){
     e38:	22 27       	eor	r18, r18
     e3a:	33 27       	eor	r19, r19
     e3c:	24 19       	sub	r18, r4
     e3e:	35 09       	sbc	r19, r5
     e40:	62 17       	cp	r22, r18
     e42:	73 07       	cpc	r23, r19
     e44:	24 f4       	brge	.+8      	; 0xe4e <PID_updatePWM+0x2c4>
			pitch_P = -1*PID_BAND;
     e46:	30 93 77 02 	sts	0x0277, r19
     e4a:	20 93 76 02 	sts	0x0276, r18
		}
		pitch_I += error_pitch;
     e4e:	c0 90 78 02 	lds	r12, 0x0278
     e52:	d0 90 79 02 	lds	r13, 0x0279
     e56:	c8 0c       	add	r12, r8
     e58:	d9 1c       	adc	r13, r9
     e5a:	d0 92 79 02 	sts	0x0279, r13
     e5e:	c0 92 78 02 	sts	0x0278, r12
		pitch_D = 0-((int)((data->omegaone)-20000));
     e62:	f1 01       	movw	r30, r2
     e64:	80 85       	ldd	r24, Z+8	; 0x08
     e66:	91 85       	ldd	r25, Z+9	; 0x09
     e68:	80 52       	subi	r24, 0x20	; 32
     e6a:	9e 44       	sbci	r25, 0x4E	; 78
     e6c:	90 95       	com	r25
     e6e:	81 95       	neg	r24
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	90 93 7b 02 	sts	0x027B, r25
     e76:	80 93 7a 02 	sts	0x027A, r24
		if(pitch_D < 20 && pitch_D > -20){
     e7a:	43 96       	adiw	r24, 0x13	; 19
     e7c:	87 97       	sbiw	r24, 0x27	; 39
     e7e:	20 f4       	brcc	.+8      	; 0xe88 <PID_updatePWM+0x2fe>
			pitch_D = 0;
     e80:	10 92 7b 02 	sts	0x027B, r1
     e84:	10 92 7a 02 	sts	0x027A, r1
		}
		pitch_D = ((double)(D_pitch)*(double)(pitch_D))/GAIN_DIVIDE + pitch_des;
     e88:	60 91 0a 01 	lds	r22, 0x010A
     e8c:	70 91 0b 01 	lds	r23, 0x010B
     e90:	88 27       	eor	r24, r24
     e92:	77 fd       	sbrc	r23, 7
     e94:	80 95       	com	r24
     e96:	98 2f       	mov	r25, r24
     e98:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     e9c:	7b 01       	movw	r14, r22
     e9e:	8c 01       	movw	r16, r24
     ea0:	60 91 7a 02 	lds	r22, 0x027A
     ea4:	70 91 7b 02 	lds	r23, 0x027B
     ea8:	88 27       	eor	r24, r24
     eaa:	77 fd       	sbrc	r23, 7
     eac:	80 95       	com	r24
     eae:	98 2f       	mov	r25, r24
     eb0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	c8 01       	movw	r24, r16
     eba:	b7 01       	movw	r22, r14
     ebc:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e4       	ldi	r19, 0x40	; 64
     ec4:	4c e1       	ldi	r20, 0x1C	; 28
     ec6:	56 e4       	ldi	r21, 0x46	; 70
     ec8:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     ecc:	7b 01       	movw	r14, r22
     ece:	8c 01       	movw	r16, r24
     ed0:	60 91 46 02 	lds	r22, 0x0246
     ed4:	70 91 47 02 	lds	r23, 0x0247
     ed8:	88 27       	eor	r24, r24
     eda:	77 fd       	sbrc	r23, 7
     edc:	80 95       	com	r24
     ede:	98 2f       	mov	r25, r24
     ee0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	c8 01       	movw	r24, r16
     eea:	b7 01       	movw	r22, r14
     eec:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
     ef0:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
     ef4:	5b 01       	movw	r10, r22
     ef6:	70 93 7b 02 	sts	0x027B, r23
     efa:	60 93 7a 02 	sts	0x027A, r22
		pitch_sum = pitch_P + ((double)(I_pitch)*(double)(pitch_I))/GAIN_DIVIDE + pitch_D;
     efe:	60 91 76 02 	lds	r22, 0x0276
     f02:	70 91 77 02 	lds	r23, 0x0277
     f06:	88 27       	eor	r24, r24
     f08:	77 fd       	sbrc	r23, 7
     f0a:	80 95       	com	r24
     f0c:	98 2f       	mov	r25, r24
     f0e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     f12:	3b 01       	movw	r6, r22
     f14:	4c 01       	movw	r8, r24
     f16:	60 91 26 02 	lds	r22, 0x0226
     f1a:	70 91 27 02 	lds	r23, 0x0227
     f1e:	88 27       	eor	r24, r24
     f20:	77 fd       	sbrc	r23, 7
     f22:	80 95       	com	r24
     f24:	98 2f       	mov	r25, r24
     f26:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     f2a:	7b 01       	movw	r14, r22
     f2c:	8c 01       	movw	r16, r24
     f2e:	b6 01       	movw	r22, r12
     f30:	88 27       	eor	r24, r24
     f32:	77 fd       	sbrc	r23, 7
     f34:	80 95       	com	r24
     f36:	98 2f       	mov	r25, r24
     f38:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     f3c:	9b 01       	movw	r18, r22
     f3e:	ac 01       	movw	r20, r24
     f40:	c8 01       	movw	r24, r16
     f42:	b7 01       	movw	r22, r14
     f44:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e4       	ldi	r19, 0x40	; 64
     f4c:	4c e1       	ldi	r20, 0x1C	; 28
     f4e:	56 e4       	ldi	r21, 0x46	; 70
     f50:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     f54:	9b 01       	movw	r18, r22
     f56:	ac 01       	movw	r20, r24
     f58:	c4 01       	movw	r24, r8
     f5a:	b3 01       	movw	r22, r6
     f5c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
     f60:	7b 01       	movw	r14, r22
     f62:	8c 01       	movw	r16, r24
     f64:	cc 24       	eor	r12, r12
     f66:	b7 fc       	sbrc	r11, 7
     f68:	c0 94       	com	r12
     f6a:	dc 2c       	mov	r13, r12
     f6c:	c6 01       	movw	r24, r12
     f6e:	b5 01       	movw	r22, r10
     f70:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	c8 01       	movw	r24, r16
     f7a:	b7 01       	movw	r22, r14
     f7c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
     f80:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
     f84:	4b 01       	movw	r8, r22
     f86:	70 93 7d 02 	sts	0x027D, r23
     f8a:	60 93 7c 02 	sts	0x027C, r22
	
		//	ROLL
		error_roll = 0 - ((int)((data->roll)-20000));
     f8e:	d1 01       	movw	r26, r2
     f90:	14 96       	adiw	r26, 0x04	; 4
     f92:	8d 91       	ld	r24, X+
     f94:	9c 91       	ld	r25, X
     f96:	15 97       	sbiw	r26, 0x05	; 5
     f98:	80 52       	subi	r24, 0x20	; 32
     f9a:	9e 44       	sbci	r25, 0x4E	; 78
     f9c:	cc 24       	eor	r12, r12
     f9e:	dd 24       	eor	r13, r13
     fa0:	c8 1a       	sub	r12, r24
     fa2:	d9 0a       	sbc	r13, r25
     fa4:	d0 92 57 02 	sts	0x0257, r13
     fa8:	c0 92 56 02 	sts	0x0256, r12
		roll_P = ((double)(P_roll)*(double)(error_roll))/GAIN_DIVIDE;
     fac:	60 91 0c 01 	lds	r22, 0x010C
     fb0:	70 91 0d 01 	lds	r23, 0x010D
     fb4:	88 27       	eor	r24, r24
     fb6:	77 fd       	sbrc	r23, 7
     fb8:	80 95       	com	r24
     fba:	98 2f       	mov	r25, r24
     fbc:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     fc0:	7b 01       	movw	r14, r22
     fc2:	8c 01       	movw	r16, r24
     fc4:	b6 01       	movw	r22, r12
     fc6:	88 27       	eor	r24, r24
     fc8:	77 fd       	sbrc	r23, 7
     fca:	80 95       	com	r24
     fcc:	98 2f       	mov	r25, r24
     fce:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
     fd2:	9b 01       	movw	r18, r22
     fd4:	ac 01       	movw	r20, r24
     fd6:	c8 01       	movw	r24, r16
     fd8:	b7 01       	movw	r22, r14
     fda:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e4       	ldi	r19, 0x40	; 64
     fe2:	4c e1       	ldi	r20, 0x1C	; 28
     fe4:	56 e4       	ldi	r21, 0x46	; 70
     fe6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
     fea:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
     fee:	70 93 7f 02 	sts	0x027F, r23
     ff2:	60 93 7e 02 	sts	0x027E, r22
		if(roll_P > PID_BAND){
     ff6:	46 16       	cp	r4, r22
     ff8:	57 06       	cpc	r5, r23
     ffa:	2c f4       	brge	.+10     	; 0x1006 <PID_updatePWM+0x47c>
			roll_P = PID_BAND;
     ffc:	50 92 7f 02 	sts	0x027F, r5
    1000:	40 92 7e 02 	sts	0x027E, r4
    1004:	0b c0       	rjmp	.+22     	; 0x101c <PID_updatePWM+0x492>
		}else if(roll_P < -1*PID_BAND){
    1006:	22 27       	eor	r18, r18
    1008:	33 27       	eor	r19, r19
    100a:	24 19       	sub	r18, r4
    100c:	35 09       	sbc	r19, r5
    100e:	62 17       	cp	r22, r18
    1010:	73 07       	cpc	r23, r19
    1012:	24 f4       	brge	.+8      	; 0x101c <PID_updatePWM+0x492>
			roll_P = -1*PID_BAND;
    1014:	30 93 7f 02 	sts	0x027F, r19
    1018:	20 93 7e 02 	sts	0x027E, r18
		}
		roll_I += error_roll;
    101c:	40 90 80 02 	lds	r4, 0x0280
    1020:	50 90 81 02 	lds	r5, 0x0281
    1024:	4c 0c       	add	r4, r12
    1026:	5d 1c       	adc	r5, r13
    1028:	50 92 81 02 	sts	0x0281, r5
    102c:	40 92 80 02 	sts	0x0280, r4
		roll_D = ((int)((data->omegazero)-20000));
    1030:	f1 01       	movw	r30, r2
    1032:	86 81       	ldd	r24, Z+6	; 0x06
    1034:	97 81       	ldd	r25, Z+7	; 0x07
    1036:	80 52       	subi	r24, 0x20	; 32
    1038:	9e 44       	sbci	r25, 0x4E	; 78
    103a:	90 93 83 02 	sts	0x0283, r25
    103e:	80 93 82 02 	sts	0x0282, r24
		if(roll_D < 20 && roll_D > -20){
    1042:	43 96       	adiw	r24, 0x13	; 19
    1044:	87 97       	sbiw	r24, 0x27	; 39
    1046:	20 f4       	brcc	.+8      	; 0x1050 <PID_updatePWM+0x4c6>
			roll_D = 0;
    1048:	10 92 83 02 	sts	0x0283, r1
    104c:	10 92 82 02 	sts	0x0282, r1
		}
		roll_sum = roll_P + ((double)(I_roll)*(double)(roll_I))/GAIN_DIVIDE + ((double)(D_roll)*(double)(roll_D))/GAIN_DIVIDE + roll_des;
    1050:	60 91 7e 02 	lds	r22, 0x027E
    1054:	70 91 7f 02 	lds	r23, 0x027F
    1058:	88 27       	eor	r24, r24
    105a:	77 fd       	sbrc	r23, 7
    105c:	80 95       	com	r24
    105e:	98 2f       	mov	r25, r24
    1060:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
    1064:	5b 01       	movw	r10, r22
    1066:	6c 01       	movw	r12, r24
    1068:	60 91 28 02 	lds	r22, 0x0228
    106c:	70 91 29 02 	lds	r23, 0x0229
    1070:	88 27       	eor	r24, r24
    1072:	77 fd       	sbrc	r23, 7
    1074:	80 95       	com	r24
    1076:	98 2f       	mov	r25, r24
    1078:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
    107c:	7b 01       	movw	r14, r22
    107e:	8c 01       	movw	r16, r24
    1080:	b2 01       	movw	r22, r4
    1082:	88 27       	eor	r24, r24
    1084:	77 fd       	sbrc	r23, 7
    1086:	80 95       	com	r24
    1088:	98 2f       	mov	r25, r24
    108a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
    108e:	9b 01       	movw	r18, r22
    1090:	ac 01       	movw	r20, r24
    1092:	c8 01       	movw	r24, r16
    1094:	b7 01       	movw	r22, r14
    1096:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e4       	ldi	r19, 0x40	; 64
    109e:	4c e1       	ldi	r20, 0x1C	; 28
    10a0:	56 e4       	ldi	r21, 0x46	; 70
    10a2:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	c6 01       	movw	r24, r12
    10ac:	b5 01       	movw	r22, r10
    10ae:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
    10b2:	5b 01       	movw	r10, r22
    10b4:	6c 01       	movw	r12, r24
    10b6:	60 91 0e 01 	lds	r22, 0x010E
    10ba:	70 91 0f 01 	lds	r23, 0x010F
    10be:	88 27       	eor	r24, r24
    10c0:	77 fd       	sbrc	r23, 7
    10c2:	80 95       	com	r24
    10c4:	98 2f       	mov	r25, r24
    10c6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
    10ca:	7b 01       	movw	r14, r22
    10cc:	8c 01       	movw	r16, r24
    10ce:	60 91 82 02 	lds	r22, 0x0282
    10d2:	70 91 83 02 	lds	r23, 0x0283
    10d6:	88 27       	eor	r24, r24
    10d8:	77 fd       	sbrc	r23, 7
    10da:	80 95       	com	r24
    10dc:	98 2f       	mov	r25, r24
    10de:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
    10e2:	9b 01       	movw	r18, r22
    10e4:	ac 01       	movw	r20, r24
    10e6:	c8 01       	movw	r24, r16
    10e8:	b7 01       	movw	r22, r14
    10ea:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e4       	ldi	r19, 0x40	; 64
    10f2:	4c e1       	ldi	r20, 0x1C	; 28
    10f4:	56 e4       	ldi	r21, 0x46	; 70
    10f6:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
    10fa:	9b 01       	movw	r18, r22
    10fc:	ac 01       	movw	r20, r24
    10fe:	c6 01       	movw	r24, r12
    1100:	b5 01       	movw	r22, r10
    1102:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
    1106:	7b 01       	movw	r14, r22
    1108:	8c 01       	movw	r16, r24
    110a:	60 91 48 02 	lds	r22, 0x0248
    110e:	70 91 49 02 	lds	r23, 0x0249
    1112:	88 27       	eor	r24, r24
    1114:	77 fd       	sbrc	r23, 7
    1116:	80 95       	com	r24
    1118:	98 2f       	mov	r25, r24
    111a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__floatsisf>
    111e:	9b 01       	movw	r18, r22
    1120:	ac 01       	movw	r20, r24
    1122:	c8 01       	movw	r24, r16
    1124:	b7 01       	movw	r22, r14
    1126:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__addsf3>
    112a:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
    112e:	ab 01       	movw	r20, r22
    1130:	70 93 85 02 	sts	0x0285, r23
    1134:	60 93 84 02 	sts	0x0284, r22

		// 	Calculate motor responses

		PWM_MOT1 = thrustFloor + userThrust - roll_sum + yaw_sum;
    1138:	20 91 aa 02 	lds	r18, 0x02AA
    113c:	30 91 ab 02 	lds	r19, 0x02AB
    1140:	80 91 a8 02 	lds	r24, 0x02A8
    1144:	90 91 a9 02 	lds	r25, 0x02A9
    1148:	28 0f       	add	r18, r24
    114a:	39 1f       	adc	r19, r25
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	82 0f       	add	r24, r18
    1152:	93 1f       	adc	r25, r19
    1154:	84 1b       	sub	r24, r20
    1156:	95 0b       	sbc	r25, r21
    1158:	90 93 ad 02 	sts	0x02AD, r25
    115c:	80 93 ac 02 	sts	0x02AC, r24
		PWM_MOT2 = thrustFloor + userThrust + pitch_sum - yaw_sum;
    1160:	f4 01       	movw	r30, r8
    1162:	e2 0f       	add	r30, r18
    1164:	f3 1f       	adc	r31, r19
    1166:	69 81       	ldd	r22, Y+1	; 0x01
    1168:	7a 81       	ldd	r23, Y+2	; 0x02
    116a:	e6 1b       	sub	r30, r22
    116c:	f7 0b       	sbc	r31, r23
    116e:	f0 93 af 02 	sts	0x02AF, r31
    1172:	e0 93 ae 02 	sts	0x02AE, r30
		PWM_MOT3 = thrustFloor + userThrust + roll_sum + yaw_sum;
    1176:	46 0f       	add	r20, r22
    1178:	57 1f       	adc	r21, r23
    117a:	42 0f       	add	r20, r18
    117c:	53 1f       	adc	r21, r19
    117e:	50 93 b1 02 	sts	0x02B1, r21
    1182:	40 93 b0 02 	sts	0x02B0, r20
		PWM_MOT4 = thrustFloor + userThrust - pitch_sum - yaw_sum;
    1186:	28 19       	sub	r18, r8
    1188:	39 09       	sbc	r19, r9
    118a:	26 1b       	sub	r18, r22
    118c:	37 0b       	sbc	r19, r23
    118e:	30 93 b3 02 	sts	0x02B3, r19
    1192:	20 93 b2 02 	sts	0x02B2, r18

		//TransmitString("z_sum: "); TransmitInt(z_sum); TransmitString("\n\r");

		if(PWM_MOT1 > MAX_THRUST){
    1196:	76 e0       	ldi	r23, 0x06	; 6
    1198:	81 34       	cpi	r24, 0x41	; 65
    119a:	97 07       	cpc	r25, r23
    119c:	1c f0       	brlt	.+6      	; 0x11a4 <PID_updatePWM+0x61a>
			PWM_MOT1 = MAX_THRUST;
    119e:	80 e4       	ldi	r24, 0x40	; 64
    11a0:	96 e0       	ldi	r25, 0x06	; 6
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <PID_updatePWM+0x624>
		}else if(PWM_MOT1 < MIN_THRUST){
    11a4:	82 55       	subi	r24, 0x52	; 82
    11a6:	94 40       	sbci	r25, 0x04	; 4
    11a8:	34 f4       	brge	.+12     	; 0x11b6 <PID_updatePWM+0x62c>
			PWM_MOT1 = MIN_THRUST;
    11aa:	82 e5       	ldi	r24, 0x52	; 82
    11ac:	94 e0       	ldi	r25, 0x04	; 4
    11ae:	90 93 ad 02 	sts	0x02AD, r25
    11b2:	80 93 ac 02 	sts	0x02AC, r24
		}
	
		if(PWM_MOT2 > MAX_THRUST){
    11b6:	b6 e0       	ldi	r27, 0x06	; 6
    11b8:	e1 34       	cpi	r30, 0x41	; 65
    11ba:	fb 07       	cpc	r31, r27
    11bc:	1c f0       	brlt	.+6      	; 0x11c4 <PID_updatePWM+0x63a>
			PWM_MOT2 = MAX_THRUST;
    11be:	80 e4       	ldi	r24, 0x40	; 64
    11c0:	96 e0       	ldi	r25, 0x06	; 6
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <PID_updatePWM+0x644>
		}else if(PWM_MOT2 < MIN_THRUST){
    11c4:	e2 55       	subi	r30, 0x52	; 82
    11c6:	f4 40       	sbci	r31, 0x04	; 4
    11c8:	34 f4       	brge	.+12     	; 0x11d6 <PID_updatePWM+0x64c>
			PWM_MOT2 = MIN_THRUST;
    11ca:	82 e5       	ldi	r24, 0x52	; 82
    11cc:	94 e0       	ldi	r25, 0x04	; 4
    11ce:	90 93 af 02 	sts	0x02AF, r25
    11d2:	80 93 ae 02 	sts	0x02AE, r24
		}

		if(PWM_MOT3 > MAX_THRUST){
    11d6:	76 e0       	ldi	r23, 0x06	; 6
    11d8:	41 34       	cpi	r20, 0x41	; 65
    11da:	57 07       	cpc	r21, r23
    11dc:	1c f0       	brlt	.+6      	; 0x11e4 <PID_updatePWM+0x65a>
			PWM_MOT3 = MAX_THRUST;
    11de:	80 e4       	ldi	r24, 0x40	; 64
    11e0:	96 e0       	ldi	r25, 0x06	; 6
    11e2:	05 c0       	rjmp	.+10     	; 0x11ee <PID_updatePWM+0x664>
		}else if(PWM_MOT3 < MIN_THRUST){
    11e4:	42 55       	subi	r20, 0x52	; 82
    11e6:	54 40       	sbci	r21, 0x04	; 4
    11e8:	34 f4       	brge	.+12     	; 0x11f6 <PID_updatePWM+0x66c>
			PWM_MOT3 = MIN_THRUST;
    11ea:	82 e5       	ldi	r24, 0x52	; 82
    11ec:	94 e0       	ldi	r25, 0x04	; 4
    11ee:	90 93 b1 02 	sts	0x02B1, r25
    11f2:	80 93 b0 02 	sts	0x02B0, r24
		}
	
		if(PWM_MOT4 > MAX_THRUST){
    11f6:	a6 e0       	ldi	r26, 0x06	; 6
    11f8:	21 34       	cpi	r18, 0x41	; 65
    11fa:	3a 07       	cpc	r19, r26
    11fc:	1c f0       	brlt	.+6      	; 0x1204 <PID_updatePWM+0x67a>
			PWM_MOT4 = MAX_THRUST;
    11fe:	80 e4       	ldi	r24, 0x40	; 64
    1200:	96 e0       	ldi	r25, 0x06	; 6
    1202:	05 c0       	rjmp	.+10     	; 0x120e <PID_updatePWM+0x684>
		}else if(PWM_MOT4 < MIN_THRUST){
    1204:	22 55       	subi	r18, 0x52	; 82
    1206:	34 40       	sbci	r19, 0x04	; 4
    1208:	34 f4       	brge	.+12     	; 0x1216 <PID_updatePWM+0x68c>
			PWM_MOT4 = MIN_THRUST;
    120a:	82 e5       	ldi	r24, 0x52	; 82
    120c:	94 e0       	ldi	r25, 0x04	; 4
    120e:	90 93 b3 02 	sts	0x02B3, r25
    1212:	80 93 b2 02 	sts	0x02B2, r24
		}
	
		set_duty(MOT1,PWM_MOT1);
    1216:	60 91 ac 02 	lds	r22, 0x02AC
    121a:	70 91 ad 02 	lds	r23, 0x02AD
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
		set_duty(MOT2,PWM_MOT2+10);
    1226:	60 91 ae 02 	lds	r22, 0x02AE
    122a:	70 91 af 02 	lds	r23, 0x02AF
    122e:	66 5f       	subi	r22, 0xF6	; 246
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
		set_duty(MOT3,PWM_MOT3+8);
    123a:	60 91 b0 02 	lds	r22, 0x02B0
    123e:	70 91 b1 02 	lds	r23, 0x02B1
    1242:	68 5f       	subi	r22, 0xF8	; 248
    1244:	7f 4f       	sbci	r23, 0xFF	; 255
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
		set_duty(MOT4,PWM_MOT4);
    124e:	60 91 b2 02 	lds	r22, 0x02B2
    1252:	70 91 b3 02 	lds	r23, 0x02B3
    1256:	84 e0       	ldi	r24, 0x04	; 4
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 b4 01 	call	0x368	; 0x368 <set_duty>
	TransmitString(" ");
	TransmitInt(error_pitch);
	TransmitString("\n\r");
	*/
	
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	8f 90       	pop	r8
    127a:	7f 90       	pop	r7
    127c:	6f 90       	pop	r6
    127e:	5f 90       	pop	r5
    1280:	4f 90       	pop	r4
    1282:	3f 90       	pop	r3
    1284:	2f 90       	pop	r2
    1286:	08 95       	ret

00001288 <executeCommand>:
Input:    Command character
Returns:  None
**************************************************************************/
void executeCommand(char command){
			
	switch(command){
    1288:	89 36       	cpi	r24, 0x69	; 105
    128a:	09 f4       	brne	.+2      	; 0x128e <executeCommand+0x6>
    128c:	48 c0       	rjmp	.+144    	; 0x131e <executeCommand+0x96>
    128e:	8a 36       	cpi	r24, 0x6A	; 106
    1290:	a8 f4       	brcc	.+42     	; 0x12bc <executeCommand+0x34>
    1292:	83 33       	cpi	r24, 0x33	; 51
    1294:	c1 f1       	breq	.+112    	; 0x1306 <executeCommand+0x7e>
    1296:	84 33       	cpi	r24, 0x34	; 52
    1298:	50 f4       	brcc	.+20     	; 0x12ae <executeCommand+0x26>
    129a:	81 33       	cpi	r24, 0x31	; 49
    129c:	81 f1       	breq	.+96     	; 0x12fe <executeCommand+0x76>
    129e:	82 33       	cpi	r24, 0x32	; 50
    12a0:	80 f5       	brcc	.+96     	; 0x1302 <executeCommand+0x7a>
    12a2:	80 32       	cpi	r24, 0x20	; 32
    12a4:	31 f1       	breq	.+76     	; 0x12f2 <executeCommand+0x6a>
    12a6:	8d 32       	cpi	r24, 0x2D	; 45
    12a8:	09 f0       	breq	.+2      	; 0x12ac <executeCommand+0x24>
    12aa:	40 c0       	rjmp	.+128    	; 0x132c <executeCommand+0xa4>
    12ac:	26 c0       	rjmp	.+76     	; 0x12fa <executeCommand+0x72>
    12ae:	8d 33       	cpi	r24, 0x3D	; 61
    12b0:	11 f1       	breq	.+68     	; 0x12f6 <executeCommand+0x6e>
    12b2:	87 36       	cpi	r24, 0x67	; 103
    12b4:	b9 f0       	breq	.+46     	; 0x12e4 <executeCommand+0x5c>
    12b6:	84 33       	cpi	r24, 0x34	; 52
    12b8:	c9 f5       	brne	.+114    	; 0x132c <executeCommand+0xa4>
    12ba:	27 c0       	rjmp	.+78     	; 0x130a <executeCommand+0x82>
    12bc:	80 37       	cpi	r24, 0x70	; 112
    12be:	39 f1       	breq	.+78     	; 0x130e <executeCommand+0x86>
    12c0:	81 37       	cpi	r24, 0x71	; 113
    12c2:	38 f4       	brcc	.+14     	; 0x12d2 <executeCommand+0x4a>
    12c4:	8c 36       	cpi	r24, 0x6C	; 108
    12c6:	39 f1       	breq	.+78     	; 0x1316 <executeCommand+0x8e>
    12c8:	8f 36       	cpi	r24, 0x6F	; 111
    12ca:	19 f1       	breq	.+70     	; 0x1312 <executeCommand+0x8a>
    12cc:	8b 36       	cpi	r24, 0x6B	; 107
    12ce:	71 f5       	brne	.+92     	; 0x132c <executeCommand+0xa4>
    12d0:	24 c0       	rjmp	.+72     	; 0x131a <executeCommand+0x92>
    12d2:	83 37       	cpi	r24, 0x73	; 115
    12d4:	61 f0       	breq	.+24     	; 0x12ee <executeCommand+0x66>
    12d6:	85 37       	cpi	r24, 0x75	; 117
    12d8:	31 f1       	breq	.+76     	; 0x1326 <executeCommand+0x9e>
    12da:	82 37       	cpi	r24, 0x72	; 114
    12dc:	39 f5       	brne	.+78     	; 0x132c <executeCommand+0xa4>
		case 'r':
			LED_ucred_toggle();
    12de:	8e b1       	in	r24, 0x0e	; 14
    12e0:	90 e4       	ldi	r25, 0x40	; 64
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <executeCommand+0x60>
			break;
		case 'g':
			LED_ucgreen_toggle();
    12e4:	8e b1       	in	r24, 0x0e	; 14
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	89 27       	eor	r24, r25
    12ea:	8e b9       	out	0x0e, r24	; 14
    12ec:	08 95       	ret
			break;
		case 's':	// Wyvern Startup
			PID_command('s');
    12ee:	83 e7       	ldi	r24, 0x73	; 115
    12f0:	17 c0       	rjmp	.+46     	; 0x1320 <executeCommand+0x98>
			break;
		case ' ':	// Emergency Motor Stop (decrease power to duty factor of 0 immediately)
			PID_command(' ');
    12f2:	80 e2       	ldi	r24, 0x20	; 32
    12f4:	15 c0       	rjmp	.+42     	; 0x1320 <executeCommand+0x98>
			break;
		case '=':	// increases thrust
			PID_command('=');
    12f6:	8d e3       	ldi	r24, 0x3D	; 61
    12f8:	13 c0       	rjmp	.+38     	; 0x1320 <executeCommand+0x98>
			break;
		case '-':	// decreases thrust
			PID_command('-');
    12fa:	8d e2       	ldi	r24, 0x2D	; 45
    12fc:	11 c0       	rjmp	.+34     	; 0x1320 <executeCommand+0x98>
			break;
		case '1':	// Start Motor 1
			PID_command('1');
    12fe:	81 e3       	ldi	r24, 0x31	; 49
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <executeCommand+0x98>
			break;
		case '2':	// Start Motor 2
			PID_command('2');
    1302:	82 e3       	ldi	r24, 0x32	; 50
    1304:	0d c0       	rjmp	.+26     	; 0x1320 <executeCommand+0x98>
			break;
		case '3':	// Start Motor 3
			PID_command('3');
    1306:	83 e3       	ldi	r24, 0x33	; 51
    1308:	0b c0       	rjmp	.+22     	; 0x1320 <executeCommand+0x98>
			break;
		case '4':	// Start Motor 4
			PID_command('4');
    130a:	84 e3       	ldi	r24, 0x34	; 52
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <executeCommand+0x98>
			break;
		case 'p':
			PID_command('p');
    130e:	80 e7       	ldi	r24, 0x70	; 112
    1310:	07 c0       	rjmp	.+14     	; 0x1320 <executeCommand+0x98>
			break;
		case 'o':
			PID_command('o');
    1312:	8f e6       	ldi	r24, 0x6F	; 111
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <executeCommand+0x98>
			break;
		case 'l':
			PID_command('l');
    1316:	8c e6       	ldi	r24, 0x6C	; 108
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <executeCommand+0x98>
			break;
		case 'k':
			PID_command('k');
    131a:	8b e6       	ldi	r24, 0x6B	; 107
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <executeCommand+0x98>
			break;
		case 'i':
			PID_command('i');
    131e:	89 e6       	ldi	r24, 0x69	; 105
    1320:	0e 94 bd 04 	call	0x97a	; 0x97a <PID_command>
    1324:	08 95       	ret
			break;
		case 'u':
			PID_command('u');
    1326:	85 e7       	ldi	r24, 0x75	; 117
    1328:	0e 94 bd 04 	call	0x97a	; 0x97a <PID_command>
    132c:	08 95       	ret

0000132e <__vector_9>:
/*************************************************************************
Interrupt Subroutines (ISRs)
**************************************************************************/

ISR(PCINT0_vect)
{
    132e:	1f 92       	push	r1
    1330:	0f 92       	push	r0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	0f 92       	push	r0
    1336:	11 24       	eor	r1, r1
    1338:	2f 93       	push	r18
    133a:	3f 93       	push	r19
    133c:	4f 93       	push	r20
    133e:	5f 93       	push	r21
    1340:	6f 93       	push	r22
    1342:	7f 93       	push	r23
    1344:	8f 93       	push	r24
    1346:	9f 93       	push	r25
    1348:	af 93       	push	r26
    134a:	bf 93       	push	r27
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
	// change was high-to-low
	if(!check(PINB,4)){ 
    1350:	1c 99       	sbic	0x03, 4	; 3
    1352:	08 c0       	rjmp	.+16     	; 0x1364 <__vector_9+0x36>
		// a wireless packet was received
		RFreceive((char*) &incoming);
    1354:	8d ec       	ldi	r24, 0xCD	; 205
    1356:	96 e0       	ldi	r25, 0x06	; 6
    1358:	0e 94 a3 03 	call	0x746	; 0x746 <RFreceive>
		// Run received command
		executeCommand(incoming.command);
    135c:	80 91 cd 06 	lds	r24, 0x06CD
    1360:	0e 94 44 09 	call	0x1288	; 0x1288 <executeCommand>
	}
}
    1364:	ff 91       	pop	r31
    1366:	ef 91       	pop	r30
    1368:	bf 91       	pop	r27
    136a:	af 91       	pop	r26
    136c:	9f 91       	pop	r25
    136e:	8f 91       	pop	r24
    1370:	7f 91       	pop	r23
    1372:	6f 91       	pop	r22
    1374:	5f 91       	pop	r21
    1376:	4f 91       	pop	r20
    1378:	3f 91       	pop	r19
    137a:	2f 91       	pop	r18
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	0f 90       	pop	r0
    1382:	1f 90       	pop	r1
    1384:	18 95       	reti

00001386 <init_wyvern>:
Returns:
**************************************************************************/
void init_wyvern(void)
{
	// Setup Wyvern Systems
	init_uc();		//UC
    1386:	0e 94 7f 00 	call	0xfe	; 0xfe <init_uc>
	init_uart();	// Serial  Communication
    138a:	0e 94 93 00 	call	0x126	; 0x126 <init_uart>
	init_pwm();		// Motor PWM Control
    138e:	0e 94 49 01 	call	0x292	; 0x292 <init_pwm>
	init_adc();		// ADC Initialization
    1392:	0e 94 06 04 	call	0x80c	; 0x80c <init_adc>
		// Something is not right...
	}
	*/
	
	// Setup Wyvern RF
	RFsetup(local,max(sizeof(packet_com_t),sizeof(packet_inf_t)));
    1396:	80 e1       	ldi	r24, 0x10	; 16
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	67 e1       	ldi	r22, 0x17	; 23
    139c:	0e 94 bb 03 	call	0x776	; 0x776 <RFsetup>
	set(PCICR,PCIE0); // enable pin-change interrupts
    13a0:	80 91 68 00 	lds	r24, 0x0068
    13a4:	81 60       	ori	r24, 0x01	; 1
    13a6:	80 93 68 00 	sts	0x0068, r24
	PCMSK0 =0x00;
    13aa:	10 92 6b 00 	sts	0x006B, r1
	set(PCMSK0, PCINT4); // demask PCINT4
    13ae:	80 91 6b 00 	lds	r24, 0x006B
    13b2:	80 61       	ori	r24, 0x10	; 16
    13b4:	80 93 6b 00 	sts	0x006B, r24
	set(TCCR0B,CS02);
    13b8:	85 b5       	in	r24, 0x25	; 37
    13ba:	84 60       	ori	r24, 0x04	; 4
    13bc:	85 bd       	out	0x25, r24	; 37
	set(TCCR0B,CS00);	// Timer0 Clock = System Clock/1024
    13be:	85 b5       	in	r24, 0x25	; 37
    13c0:	81 60       	ori	r24, 0x01	; 1
    13c2:	85 bd       	out	0x25, r24	; 37
	set(TIMSK0,TOIE0);	// Enable Timer0 Overflow Interrupt
    13c4:	80 91 6e 00 	lds	r24, 0x006E
    13c8:	81 60       	ori	r24, 0x01	; 1
    13ca:	80 93 6e 00 	sts	0x006E, r24
	
	// Enable Global Interrupts
	sei();
    13ce:	78 94       	sei

	// Force RF Interrupt (Pin Change Interrupt Channel 4) to run once
	clear(PORTB,4);
    13d0:	2c 98       	cbi	0x05, 4	; 5
	if(RFRXdataReady()){
    13d2:	0e 94 14 03 	call	0x628	; 0x628 <RFRXdataReady>
    13d6:	89 2b       	or	r24, r25
    13d8:	21 f0       	breq	.+8      	; 0x13e2 <init_wyvern+0x5c>
     	RFreceive((char*) &incoming);
    13da:	8d ec       	ldi	r24, 0xCD	; 205
    13dc:	96 e0       	ldi	r25, 0x06	; 6
    13de:	0e 94 a3 03 	call	0x746	; 0x746 <RFreceive>
	}

	// Set initial orientation
	initial.yaw = 0;
    13e2:	10 92 dc 06 	sts	0x06DC, r1
    13e6:	10 92 db 06 	sts	0x06DB, r1
	initial.pitch = 0;
    13ea:	10 92 d8 06 	sts	0x06D8, r1
    13ee:	10 92 d7 06 	sts	0x06D7, r1
	initial.roll = 0;
    13f2:	10 92 da 06 	sts	0x06DA, r1
    13f6:	10 92 d9 06 	sts	0x06D9, r1
	initial.throttle = 0;
    13fa:	10 92 de 06 	sts	0x06DE, r1
    13fe:	10 92 dd 06 	sts	0x06DD, r1
}
    1402:	08 95       	ret

00001404 <batteryVoltage>:
Returns:
**************************************************************************/
void batteryVoltage(void){
	// voltage divider: 19.8k -> 147.1k
	uint16_t battVoltage;
	battVoltage = get_adc(4);
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 16 04 	call	0x82c	; 0x82c <get_adc>
	// return Volts*10
	battVoltage = ((double)4119*(double)battVoltage/10000);
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 57 10 	call	0x20ae	; 0x20ae <__floatunsisf>
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	38 eb       	ldi	r19, 0xB8	; 184
    141c:	40 e8       	ldi	r20, 0x80	; 128
    141e:	55 e4       	ldi	r21, 0x45	; 69
    1420:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulsf3>
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e4       	ldi	r19, 0x40	; 64
    1428:	4c e1       	ldi	r20, 0x1C	; 28
    142a:	56 e4       	ldi	r21, 0x46	; 70
    142c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__divsf3>
	outgoing.battery = (int) battVoltage;
    1430:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__fixunssfsi>
    1434:	70 93 e8 06 	sts	0x06E8, r23
    1438:	60 93 e7 06 	sts	0x06E7, r22
}
    143c:	08 95       	ret

0000143e <__vector_23>:
		// Run received command
		executeCommand(incoming.command);
	}
}

ISR(TIMER0_OVF_vect){
    143e:	1f 92       	push	r1
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	0f 92       	push	r0
    1446:	11 24       	eor	r1, r1
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
	// Used to send telemetry data back to Wyvern Controller
	// Timer1 Clock = 1MHz, 8-bit
	set(TIFR0,TOV0);	// Clear flag
    1460:	a8 9a       	sbi	0x15, 0	; 21
	overflowcounter++;
    1462:	20 91 b8 02 	lds	r18, 0x02B8
    1466:	30 91 b9 02 	lds	r19, 0x02B9
    146a:	2f 5f       	subi	r18, 0xFF	; 255
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	30 93 b9 02 	sts	0x02B9, r19
    1472:	20 93 b8 02 	sts	0x02B8, r18
	overflowcounterbattery++;
    1476:	80 91 ba 02 	lds	r24, 0x02BA
    147a:	90 91 bb 02 	lds	r25, 0x02BB
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	90 93 bb 02 	sts	0x02BB, r25
    1484:	80 93 ba 02 	sts	0x02BA, r24
	if(overflowcounter >32){
    1488:	21 32       	cpi	r18, 0x21	; 33
    148a:	31 05       	cpc	r19, r1
    148c:	5c f0       	brlt	.+22     	; 0x14a4 <__vector_23+0x66>
		// Send Telemetry Data
		RFtransmitUntil((char*) &outgoing,contr,1);
    148e:	8f ed       	ldi	r24, 0xDF	; 223
    1490:	96 e0       	ldi	r25, 0x06	; 6
    1492:	65 e1       	ldi	r22, 0x15	; 21
    1494:	71 e0       	ldi	r23, 0x01	; 1
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	0e 94 73 02 	call	0x4e6	; 0x4e6 <RFtransmitUntil>
		overflowcounter = 0;
    149c:	10 92 b9 02 	sts	0x02B9, r1
    14a0:	10 92 b8 02 	sts	0x02B8, r1
	}
	if(overflowcounterbattery>200){
    14a4:	80 91 ba 02 	lds	r24, 0x02BA
    14a8:	90 91 bb 02 	lds	r25, 0x02BB
    14ac:	89 3c       	cpi	r24, 0xC9	; 201
    14ae:	91 05       	cpc	r25, r1
    14b0:	34 f0       	brlt	.+12     	; 0x14be <__vector_23+0x80>
		batteryVoltage();
    14b2:	0e 94 02 0a 	call	0x1404	; 0x1404 <batteryVoltage>
		overflowcounterbattery = 0;
    14b6:	10 92 bb 02 	sts	0x02BB, r1
    14ba:	10 92 ba 02 	sts	0x02BA, r1
	}
}
    14be:	ff 91       	pop	r31
    14c0:	ef 91       	pop	r30
    14c2:	bf 91       	pop	r27
    14c4:	af 91       	pop	r26
    14c6:	9f 91       	pop	r25
    14c8:	8f 91       	pop	r24
    14ca:	7f 91       	pop	r23
    14cc:	6f 91       	pop	r22
    14ce:	5f 91       	pop	r21
    14d0:	4f 91       	pop	r20
    14d2:	3f 91       	pop	r19
    14d4:	2f 91       	pop	r18
    14d6:	0f 90       	pop	r0
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	0f 90       	pop	r0
    14dc:	1f 90       	pop	r1
    14de:	18 95       	reti

000014e0 <ReceiveRazorData>:
Purpose:  Receives the data output from the razor
Input:
Returns:
**************************************************************************/
void ReceiveRazorData(void)
{
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	2c 97       	sbiw	r28, 0x0c	; 12
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
	clear(PCICR,PCIE0); // disable pin-change interrupts
    14fa:	80 91 68 00 	lds	r24, 0x0068
    14fe:	8e 7f       	andi	r24, 0xFE	; 254
    1500:	80 93 68 00 	sts	0x0068, r24
Input:
Returns:
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
    1504:	80 91 bd 04 	lds	r24, 0x04BD
    1508:	80 93 bc 04 	sts	0x04BC, r24
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    1510:	90 91 bc 04 	lds	r25, 0x04BC
    1514:	80 91 bd 04 	lds	r24, 0x04BD
    1518:	98 17       	cp	r25, r24
    151a:	d1 f3       	breq	.-12     	; 0x1510 <ReceiveRazorData+0x30>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    151c:	e0 91 bd 04 	lds	r30, 0x04BD
    1520:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    1522:	e0 93 bd 04 	sts	0x04BD, r30
	char datain;
	char data[12];
	//int datacounter = 0;	
	do{
		datain = ReceiveByte();
		if(datain == 0xFF){
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	e4 54       	subi	r30, 0x44	; 68
    152a:	fd 4f       	sbci	r31, 0xFD	; 253
    152c:	80 81       	ld	r24, Z
    152e:	8f 3f       	cpi	r24, 0xFF	; 255
    1530:	69 f7       	brne	.-38     	; 0x150c <ReceiveRazorData+0x2c>
			startcounter++;
    1532:	2f 5f       	subi	r18, 0xFF	; 255
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		else{
			startcounter =0;
		}
	}while(startcounter<3);
    1536:	23 30       	cpi	r18, 0x03	; 3
    1538:	31 05       	cpc	r19, r1
    153a:	54 f3       	brlt	.-44     	; 0x1510 <ReceiveRazorData+0x30>
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    153c:	90 91 bc 04 	lds	r25, 0x04BC
    1540:	80 91 bd 04 	lds	r24, 0x04BD
    1544:	98 17       	cp	r25, r24
    1546:	d1 f3       	breq	.-12     	; 0x153c <ReceiveRazorData+0x5c>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    1548:	e0 91 bd 04 	lds	r30, 0x04BD
    154c:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    154e:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	e4 54       	subi	r30, 0x44	; 68
    1556:	fd 4f       	sbci	r31, 0xFD	; 253
    1558:	f0 80       	ld	r15, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    155a:	90 91 bc 04 	lds	r25, 0x04BC
    155e:	80 91 bd 04 	lds	r24, 0x04BD
    1562:	98 17       	cp	r25, r24
    1564:	d1 f3       	breq	.-12     	; 0x155a <ReceiveRazorData+0x7a>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    1566:	e0 91 bd 04 	lds	r30, 0x04BD
    156a:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    156c:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	e4 54       	subi	r30, 0x44	; 68
    1574:	fd 4f       	sbci	r31, 0xFD	; 253
    1576:	00 81       	ld	r16, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    1578:	90 91 bc 04 	lds	r25, 0x04BC
    157c:	80 91 bd 04 	lds	r24, 0x04BD
    1580:	98 17       	cp	r25, r24
    1582:	d1 f3       	breq	.-12     	; 0x1578 <ReceiveRazorData+0x98>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    1584:	e0 91 bd 04 	lds	r30, 0x04BD
    1588:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    158a:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	e4 54       	subi	r30, 0x44	; 68
    1592:	fd 4f       	sbci	r31, 0xFD	; 253
    1594:	10 81       	ld	r17, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    1596:	90 91 bc 04 	lds	r25, 0x04BC
    159a:	80 91 bd 04 	lds	r24, 0x04BD
    159e:	98 17       	cp	r25, r24
    15a0:	d1 f3       	breq	.-12     	; 0x1596 <ReceiveRazorData+0xb6>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    15a2:	e0 91 bd 04 	lds	r30, 0x04BD
    15a6:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    15a8:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	e4 54       	subi	r30, 0x44	; 68
    15b0:	fd 4f       	sbci	r31, 0xFD	; 253
    15b2:	b0 81       	ld	r27, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    15b4:	90 91 bc 04 	lds	r25, 0x04BC
    15b8:	80 91 bd 04 	lds	r24, 0x04BD
    15bc:	98 17       	cp	r25, r24
    15be:	d1 f3       	breq	.-12     	; 0x15b4 <ReceiveRazorData+0xd4>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    15c0:	e0 91 bd 04 	lds	r30, 0x04BD
    15c4:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    15c6:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	e4 54       	subi	r30, 0x44	; 68
    15ce:	fd 4f       	sbci	r31, 0xFD	; 253
    15d0:	a0 81       	ld	r26, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    15d2:	90 91 bc 04 	lds	r25, 0x04BC
    15d6:	80 91 bd 04 	lds	r24, 0x04BD
    15da:	98 17       	cp	r25, r24
    15dc:	d1 f3       	breq	.-12     	; 0x15d2 <ReceiveRazorData+0xf2>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    15de:	e0 91 bd 04 	lds	r30, 0x04BD
    15e2:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    15e4:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	e4 54       	subi	r30, 0x44	; 68
    15ec:	fd 4f       	sbci	r31, 0xFD	; 253
    15ee:	70 81       	ld	r23, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    15f0:	90 91 bc 04 	lds	r25, 0x04BC
    15f4:	80 91 bd 04 	lds	r24, 0x04BD
    15f8:	98 17       	cp	r25, r24
    15fa:	d1 f3       	breq	.-12     	; 0x15f0 <ReceiveRazorData+0x110>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    15fc:	e0 91 bd 04 	lds	r30, 0x04BD
    1600:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    1602:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	e4 54       	subi	r30, 0x44	; 68
    160a:	fd 4f       	sbci	r31, 0xFD	; 253
    160c:	60 81       	ld	r22, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    160e:	90 91 bc 04 	lds	r25, 0x04BC
    1612:	80 91 bd 04 	lds	r24, 0x04BD
    1616:	98 17       	cp	r25, r24
    1618:	d1 f3       	breq	.-12     	; 0x160e <ReceiveRazorData+0x12e>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    161a:	e0 91 bd 04 	lds	r30, 0x04BD
    161e:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    1620:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	e4 54       	subi	r30, 0x44	; 68
    1628:	fd 4f       	sbci	r31, 0xFD	; 253
    162a:	50 81       	ld	r21, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    162c:	90 91 bc 04 	lds	r25, 0x04BC
    1630:	80 91 bd 04 	lds	r24, 0x04BD
    1634:	98 17       	cp	r25, r24
    1636:	d1 f3       	breq	.-12     	; 0x162c <ReceiveRazorData+0x14c>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    1638:	e0 91 bd 04 	lds	r30, 0x04BD
    163c:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    163e:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	e4 54       	subi	r30, 0x44	; 68
    1646:	fd 4f       	sbci	r31, 0xFD	; 253
    1648:	40 81       	ld	r20, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    164a:	90 91 bc 04 	lds	r25, 0x04BC
    164e:	80 91 bd 04 	lds	r24, 0x04BD
    1652:	98 17       	cp	r25, r24
    1654:	d1 f3       	breq	.-12     	; 0x164a <ReceiveRazorData+0x16a>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    1656:	e0 91 bd 04 	lds	r30, 0x04BD
    165a:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    165c:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	e4 54       	subi	r30, 0x44	; 68
    1664:	fd 4f       	sbci	r31, 0xFD	; 253
    1666:	30 81       	ld	r19, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    1668:	90 91 bc 04 	lds	r25, 0x04BC
    166c:	80 91 bd 04 	lds	r24, 0x04BD
    1670:	98 17       	cp	r25, r24
    1672:	d1 f3       	breq	.-12     	; 0x1668 <ReceiveRazorData+0x188>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    1674:	e0 91 bd 04 	lds	r30, 0x04BD
    1678:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    167a:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	e4 54       	subi	r30, 0x44	; 68
    1682:	fd 4f       	sbci	r31, 0xFD	; 253
    1684:	20 81       	ld	r18, Z
**************************************************************************/
unsigned char ReceiveByte(void)
{
	unsigned char tmptail;
	// Wait for incoming data
	while ( UART_RxHead == UART_RxTail );
    1686:	90 91 bc 04 	lds	r25, 0x04BC
    168a:	80 91 bd 04 	lds	r24, 0x04BD
    168e:	98 17       	cp	r25, r24
    1690:	d1 f3       	breq	.-12     	; 0x1686 <ReceiveRazorData+0x1a6>
	// Calculate buffer index
	tmptail = ( UART_RxTail + 1 ) & UART_RX_BUFFER_MASK;
    1692:	e0 91 bd 04 	lds	r30, 0x04BD
    1696:	ef 5f       	subi	r30, 0xFF	; 255
	// Store new index
	UART_RxTail = tmptail;
    1698:	e0 93 bd 04 	sts	0x04BD, r30
	 // Return data
	return UART_RxBuf[tmptail];
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	e4 54       	subi	r30, 0x44	; 68
    16a0:	fd 4f       	sbci	r31, 0xFD	; 253
    16a2:	80 81       	ld	r24, Z
	data[0]=ReceiveByte();
    16a4:	f9 82       	std	Y+1, r15	; 0x01
	data[1]=ReceiveByte();
    16a6:	0a 83       	std	Y+2, r16	; 0x02
	data[2]=ReceiveByte();
    16a8:	1b 83       	std	Y+3, r17	; 0x03
	data[3]=ReceiveByte();
    16aa:	bc 83       	std	Y+4, r27	; 0x04
	data[4]=ReceiveByte();
    16ac:	ad 83       	std	Y+5, r26	; 0x05
	data[5]=ReceiveByte();
    16ae:	7e 83       	std	Y+6, r23	; 0x06
	data[6]=ReceiveByte();
    16b0:	6f 83       	std	Y+7, r22	; 0x07
	data[7]=ReceiveByte();
    16b2:	58 87       	std	Y+8, r21	; 0x08
	data[8]=ReceiveByte();
    16b4:	49 87       	std	Y+9, r20	; 0x09
	data[9]=ReceiveByte();
    16b6:	3a 87       	std	Y+10, r19	; 0x0a
	data[10]=ReceiveByte();
    16b8:	2b 87       	std	Y+11, r18	; 0x0b
	data[11]=ReceiveByte();
    16ba:	8c 87       	std	Y+12, r24	; 0x0c
	memcpy(&razordata,data,12);
    16bc:	a1 ec       	ldi	r26, 0xC1	; 193
    16be:	b6 e0       	ldi	r27, 0x06	; 6
    16c0:	fe 01       	movw	r30, r28
    16c2:	31 96       	adiw	r30, 0x01	; 1
    16c4:	8c e0       	ldi	r24, 0x0C	; 12
    16c6:	01 90       	ld	r0, Z+
    16c8:	0d 92       	st	X+, r0
    16ca:	81 50       	subi	r24, 0x01	; 1
    16cc:	e1 f7       	brne	.-8      	; 0x16c6 <ReceiveRazorData+0x1e6>
	if((int)razordata.pitch<0){
    16ce:	80 91 c3 06 	lds	r24, 0x06C3
    16d2:	90 91 c4 06 	lds	r25, 0x06C4
    16d6:	97 ff       	sbrs	r25, 7
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <ReceiveRazorData+0x1fe>
		ReceiveRazorData();
    16da:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <ReceiveRazorData>
	}
	outgoing.yaw = (int)(razordata.yaw-20000);
    16de:	80 91 c1 06 	lds	r24, 0x06C1
    16e2:	90 91 c2 06 	lds	r25, 0x06C2
    16e6:	80 52       	subi	r24, 0x20	; 32
    16e8:	9e 44       	sbci	r25, 0x4E	; 78
    16ea:	90 93 e0 06 	sts	0x06E0, r25
    16ee:	80 93 df 06 	sts	0x06DF, r24
	outgoing.pitch = (int)(razordata.pitch-20000);
    16f2:	80 91 c3 06 	lds	r24, 0x06C3
    16f6:	90 91 c4 06 	lds	r25, 0x06C4
    16fa:	80 52       	subi	r24, 0x20	; 32
    16fc:	9e 44       	sbci	r25, 0x4E	; 78
    16fe:	90 93 e2 06 	sts	0x06E2, r25
    1702:	80 93 e1 06 	sts	0x06E1, r24
	outgoing.roll = (int)(razordata.roll-20000);
    1706:	80 91 c5 06 	lds	r24, 0x06C5
    170a:	90 91 c6 06 	lds	r25, 0x06C6
    170e:	80 52       	subi	r24, 0x20	; 32
    1710:	9e 44       	sbci	r25, 0x4E	; 78
    1712:	90 93 e4 06 	sts	0x06E4, r25
    1716:	80 93 e3 06 	sts	0x06E3, r24
	outgoing.p = P_pitch;
    171a:	80 91 08 01 	lds	r24, 0x0108
    171e:	90 91 09 01 	lds	r25, 0x0109
    1722:	90 93 ea 06 	sts	0x06EA, r25
    1726:	80 93 e9 06 	sts	0x06E9, r24
	outgoing.i = I_pitch;
    172a:	80 91 26 02 	lds	r24, 0x0226
    172e:	90 91 27 02 	lds	r25, 0x0227
    1732:	90 93 ec 06 	sts	0x06EC, r25
    1736:	80 93 eb 06 	sts	0x06EB, r24
	outgoing.d = D_pitch;
    173a:	80 91 0a 01 	lds	r24, 0x010A
    173e:	90 91 0b 01 	lds	r25, 0x010B
    1742:	90 93 ee 06 	sts	0x06EE, r25
    1746:	80 93 ed 06 	sts	0x06ED, r24
	outgoing.pidband = PID_BAND;
    174a:	80 91 04 01 	lds	r24, 0x0104
    174e:	90 91 05 01 	lds	r25, 0x0105
    1752:	90 93 f0 06 	sts	0x06F0, r25
    1756:	80 93 ef 06 	sts	0x06EF, r24
	corrected = (int)(razordata.pitch - 20000);
	TransmitInt(corrected);
	TransmitString("\n\r");
	*/

	set(PCICR,PCIE0); // enable pin-change interrupts
    175a:	80 91 68 00 	lds	r24, 0x0068
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	80 93 68 00 	sts	0x0068, r24
}
    1764:	2c 96       	adiw	r28, 0x0c	; 12
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	ff 90       	pop	r15
    177a:	08 95       	ret

0000177c <main>:
/*************************************************************************
Function: main()
**************************************************************************/
int main(void)
{
	init_wyvern();
    177c:	0e 94 c3 09 	call	0x1386	; 0x1386 <init_wyvern>
	LED_ucgreen_on();
    1780:	72 98       	cbi	0x0e, 2	; 14
	set(DDRF,7);
    1782:	87 9a       	sbi	0x10, 7	; 16
	PID_setPosition(&initial);
    1784:	86 ed       	ldi	r24, 0xD6	; 214
    1786:	96 e0       	ldi	r25, 0x06	; 6
    1788:	0e 94 a5 05 	call	0xb4a	; 0xb4a <PID_setPosition>
	
	for(;;){
		ReceiveRazorData();
    178c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <ReceiveRazorData>
		PID_setPosition(&incoming);
    1790:	8d ec       	ldi	r24, 0xCD	; 205
    1792:	96 e0       	ldi	r25, 0x06	; 6
    1794:	0e 94 a5 05 	call	0xb4a	; 0xb4a <PID_setPosition>
		PID_setThrust(incoming.throttle);
    1798:	80 91 d4 06 	lds	r24, 0x06D4
    179c:	90 91 d5 06 	lds	r25, 0x06D5
    17a0:	0e 94 a6 04 	call	0x94c	; 0x94c <PID_setThrust>
		PID_updatePWM(&razordata);
    17a4:	81 ec       	ldi	r24, 0xC1	; 193
    17a6:	96 e0       	ldi	r25, 0x06	; 6
    17a8:	0e 94 c5 05 	call	0xb8a	; 0xb8a <PID_updatePWM>
    17ac:	ef cf       	rjmp	.-34     	; 0x178c <main+0x10>

000017ae <TransmitInt>:
Purpose:  Transmit integer to UART
Input:    Integer to be transmitted
Returns:
**************************************************************************/
void TransmitInt(int i )
{
    17ae:	0f 93       	push	r16
    17b0:	1f 93       	push	r17
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
    17ba:	28 97       	sbiw	r28, 0x08	; 8
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
	char s[8];
	itoa(i,s,10);
    17c6:	8e 01       	movw	r16, r28
    17c8:	0f 5f       	subi	r16, 0xFF	; 255
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	b8 01       	movw	r22, r16
    17ce:	4a e0       	ldi	r20, 0x0A	; 10
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	0e 94 23 13 	call	0x2646	; 0x2646 <itoa>
	TransmitString(s);
    17d6:	c8 01       	movw	r24, r16
    17d8:	0e 94 20 01 	call	0x240	; 0x240 <TransmitString>
}
    17dc:	28 96       	adiw	r28, 0x08	; 8
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <__fixunssfsi>:
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	7b 01       	movw	r14, r22
    17fc:	8c 01       	movw	r16, r24
    17fe:	20 e0       	ldi	r18, 0x00	; 0
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	5f e4       	ldi	r21, 0x4F	; 79
    1806:	0e 94 75 0f 	call	0x1eea	; 0x1eea <__gesf2>
    180a:	88 23       	and	r24, r24
    180c:	8c f0       	brlt	.+34     	; 0x1830 <__fixunssfsi+0x3e>
    180e:	c8 01       	movw	r24, r16
    1810:	b7 01       	movw	r22, r14
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	5f e4       	ldi	r21, 0x4F	; 79
    181a:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__subsf3>
    181e:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	20 50       	subi	r18, 0x00	; 0
    1828:	30 40       	sbci	r19, 0x00	; 0
    182a:	40 40       	sbci	r20, 0x00	; 0
    182c:	50 48       	sbci	r21, 0x80	; 128
    182e:	06 c0       	rjmp	.+12     	; 0x183c <__fixunssfsi+0x4a>
    1830:	c8 01       	movw	r24, r16
    1832:	b7 01       	movw	r22, r14
    1834:	0e 94 03 10 	call	0x2006	; 0x2006 <__fixsfsi>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	b9 01       	movw	r22, r18
    183e:	ca 01       	movw	r24, r20
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	08 95       	ret

0000184a <_fpadd_parts>:
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e2       	ldi	r30, 0x2B	; 43
    1850:	fc e0       	ldi	r31, 0x0C	; 12
    1852:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__prologue_saves__>
    1856:	dc 01       	movw	r26, r24
    1858:	2b 01       	movw	r4, r22
    185a:	fa 01       	movw	r30, r20
    185c:	9c 91       	ld	r25, X
    185e:	92 30       	cpi	r25, 0x02	; 2
    1860:	08 f4       	brcc	.+2      	; 0x1864 <_fpadd_parts+0x1a>
    1862:	39 c1       	rjmp	.+626    	; 0x1ad6 <_fpadd_parts+0x28c>
    1864:	eb 01       	movw	r28, r22
    1866:	88 81       	ld	r24, Y
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	08 f4       	brcc	.+2      	; 0x186e <_fpadd_parts+0x24>
    186c:	33 c1       	rjmp	.+614    	; 0x1ad4 <_fpadd_parts+0x28a>
    186e:	94 30       	cpi	r25, 0x04	; 4
    1870:	69 f4       	brne	.+26     	; 0x188c <_fpadd_parts+0x42>
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	09 f0       	breq	.+2      	; 0x1878 <_fpadd_parts+0x2e>
    1876:	2f c1       	rjmp	.+606    	; 0x1ad6 <_fpadd_parts+0x28c>
    1878:	11 96       	adiw	r26, 0x01	; 1
    187a:	9c 91       	ld	r25, X
    187c:	11 97       	sbiw	r26, 0x01	; 1
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	98 17       	cp	r25, r24
    1882:	09 f4       	brne	.+2      	; 0x1886 <_fpadd_parts+0x3c>
    1884:	28 c1       	rjmp	.+592    	; 0x1ad6 <_fpadd_parts+0x28c>
    1886:	aa e1       	ldi	r26, 0x1A	; 26
    1888:	b1 e0       	ldi	r27, 0x01	; 1
    188a:	25 c1       	rjmp	.+586    	; 0x1ad6 <_fpadd_parts+0x28c>
    188c:	84 30       	cpi	r24, 0x04	; 4
    188e:	09 f4       	brne	.+2      	; 0x1892 <_fpadd_parts+0x48>
    1890:	21 c1       	rjmp	.+578    	; 0x1ad4 <_fpadd_parts+0x28a>
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	a9 f4       	brne	.+42     	; 0x18c0 <_fpadd_parts+0x76>
    1896:	92 30       	cpi	r25, 0x02	; 2
    1898:	09 f0       	breq	.+2      	; 0x189c <_fpadd_parts+0x52>
    189a:	1d c1       	rjmp	.+570    	; 0x1ad6 <_fpadd_parts+0x28c>
    189c:	9a 01       	movw	r18, r20
    189e:	ad 01       	movw	r20, r26
    18a0:	88 e0       	ldi	r24, 0x08	; 8
    18a2:	ea 01       	movw	r28, r20
    18a4:	09 90       	ld	r0, Y+
    18a6:	ae 01       	movw	r20, r28
    18a8:	e9 01       	movw	r28, r18
    18aa:	09 92       	st	Y+, r0
    18ac:	9e 01       	movw	r18, r28
    18ae:	81 50       	subi	r24, 0x01	; 1
    18b0:	c1 f7       	brne	.-16     	; 0x18a2 <_fpadd_parts+0x58>
    18b2:	e2 01       	movw	r28, r4
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	11 96       	adiw	r26, 0x01	; 1
    18b8:	9c 91       	ld	r25, X
    18ba:	89 23       	and	r24, r25
    18bc:	81 83       	std	Z+1, r24	; 0x01
    18be:	08 c1       	rjmp	.+528    	; 0x1ad0 <_fpadd_parts+0x286>
    18c0:	92 30       	cpi	r25, 0x02	; 2
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <_fpadd_parts+0x7c>
    18c4:	07 c1       	rjmp	.+526    	; 0x1ad4 <_fpadd_parts+0x28a>
    18c6:	12 96       	adiw	r26, 0x02	; 2
    18c8:	2d 90       	ld	r2, X+
    18ca:	3c 90       	ld	r3, X
    18cc:	13 97       	sbiw	r26, 0x03	; 3
    18ce:	eb 01       	movw	r28, r22
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	14 96       	adiw	r26, 0x04	; 4
    18d6:	ad 90       	ld	r10, X+
    18d8:	bd 90       	ld	r11, X+
    18da:	cd 90       	ld	r12, X+
    18dc:	dc 90       	ld	r13, X
    18de:	17 97       	sbiw	r26, 0x07	; 7
    18e0:	ec 80       	ldd	r14, Y+4	; 0x04
    18e2:	fd 80       	ldd	r15, Y+5	; 0x05
    18e4:	0e 81       	ldd	r16, Y+6	; 0x06
    18e6:	1f 81       	ldd	r17, Y+7	; 0x07
    18e8:	91 01       	movw	r18, r2
    18ea:	28 1b       	sub	r18, r24
    18ec:	39 0b       	sbc	r19, r25
    18ee:	b9 01       	movw	r22, r18
    18f0:	37 ff       	sbrs	r19, 7
    18f2:	04 c0       	rjmp	.+8      	; 0x18fc <_fpadd_parts+0xb2>
    18f4:	66 27       	eor	r22, r22
    18f6:	77 27       	eor	r23, r23
    18f8:	62 1b       	sub	r22, r18
    18fa:	73 0b       	sbc	r23, r19
    18fc:	60 32       	cpi	r22, 0x20	; 32
    18fe:	71 05       	cpc	r23, r1
    1900:	0c f0       	brlt	.+2      	; 0x1904 <_fpadd_parts+0xba>
    1902:	61 c0       	rjmp	.+194    	; 0x19c6 <_fpadd_parts+0x17c>
    1904:	12 16       	cp	r1, r18
    1906:	13 06       	cpc	r1, r19
    1908:	6c f5       	brge	.+90     	; 0x1964 <_fpadd_parts+0x11a>
    190a:	37 01       	movw	r6, r14
    190c:	48 01       	movw	r8, r16
    190e:	06 2e       	mov	r0, r22
    1910:	04 c0       	rjmp	.+8      	; 0x191a <_fpadd_parts+0xd0>
    1912:	96 94       	lsr	r9
    1914:	87 94       	ror	r8
    1916:	77 94       	ror	r7
    1918:	67 94       	ror	r6
    191a:	0a 94       	dec	r0
    191c:	d2 f7       	brpl	.-12     	; 0x1912 <_fpadd_parts+0xc8>
    191e:	21 e0       	ldi	r18, 0x01	; 1
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	50 e0       	ldi	r21, 0x00	; 0
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <_fpadd_parts+0xe6>
    1928:	22 0f       	add	r18, r18
    192a:	33 1f       	adc	r19, r19
    192c:	44 1f       	adc	r20, r20
    192e:	55 1f       	adc	r21, r21
    1930:	6a 95       	dec	r22
    1932:	d2 f7       	brpl	.-12     	; 0x1928 <_fpadd_parts+0xde>
    1934:	21 50       	subi	r18, 0x01	; 1
    1936:	30 40       	sbci	r19, 0x00	; 0
    1938:	40 40       	sbci	r20, 0x00	; 0
    193a:	50 40       	sbci	r21, 0x00	; 0
    193c:	2e 21       	and	r18, r14
    193e:	3f 21       	and	r19, r15
    1940:	40 23       	and	r20, r16
    1942:	51 23       	and	r21, r17
    1944:	21 15       	cp	r18, r1
    1946:	31 05       	cpc	r19, r1
    1948:	41 05       	cpc	r20, r1
    194a:	51 05       	cpc	r21, r1
    194c:	21 f0       	breq	.+8      	; 0x1956 <_fpadd_parts+0x10c>
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	79 01       	movw	r14, r18
    1958:	8a 01       	movw	r16, r20
    195a:	e6 28       	or	r14, r6
    195c:	f7 28       	or	r15, r7
    195e:	08 29       	or	r16, r8
    1960:	19 29       	or	r17, r9
    1962:	3c c0       	rjmp	.+120    	; 0x19dc <_fpadd_parts+0x192>
    1964:	23 2b       	or	r18, r19
    1966:	d1 f1       	breq	.+116    	; 0x19dc <_fpadd_parts+0x192>
    1968:	26 0e       	add	r2, r22
    196a:	37 1e       	adc	r3, r23
    196c:	35 01       	movw	r6, r10
    196e:	46 01       	movw	r8, r12
    1970:	06 2e       	mov	r0, r22
    1972:	04 c0       	rjmp	.+8      	; 0x197c <_fpadd_parts+0x132>
    1974:	96 94       	lsr	r9
    1976:	87 94       	ror	r8
    1978:	77 94       	ror	r7
    197a:	67 94       	ror	r6
    197c:	0a 94       	dec	r0
    197e:	d2 f7       	brpl	.-12     	; 0x1974 <_fpadd_parts+0x12a>
    1980:	21 e0       	ldi	r18, 0x01	; 1
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	04 c0       	rjmp	.+8      	; 0x1992 <_fpadd_parts+0x148>
    198a:	22 0f       	add	r18, r18
    198c:	33 1f       	adc	r19, r19
    198e:	44 1f       	adc	r20, r20
    1990:	55 1f       	adc	r21, r21
    1992:	6a 95       	dec	r22
    1994:	d2 f7       	brpl	.-12     	; 0x198a <_fpadd_parts+0x140>
    1996:	21 50       	subi	r18, 0x01	; 1
    1998:	30 40       	sbci	r19, 0x00	; 0
    199a:	40 40       	sbci	r20, 0x00	; 0
    199c:	50 40       	sbci	r21, 0x00	; 0
    199e:	2a 21       	and	r18, r10
    19a0:	3b 21       	and	r19, r11
    19a2:	4c 21       	and	r20, r12
    19a4:	5d 21       	and	r21, r13
    19a6:	21 15       	cp	r18, r1
    19a8:	31 05       	cpc	r19, r1
    19aa:	41 05       	cpc	r20, r1
    19ac:	51 05       	cpc	r21, r1
    19ae:	21 f0       	breq	.+8      	; 0x19b8 <_fpadd_parts+0x16e>
    19b0:	21 e0       	ldi	r18, 0x01	; 1
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	59 01       	movw	r10, r18
    19ba:	6a 01       	movw	r12, r20
    19bc:	a6 28       	or	r10, r6
    19be:	b7 28       	or	r11, r7
    19c0:	c8 28       	or	r12, r8
    19c2:	d9 28       	or	r13, r9
    19c4:	0b c0       	rjmp	.+22     	; 0x19dc <_fpadd_parts+0x192>
    19c6:	82 15       	cp	r24, r2
    19c8:	93 05       	cpc	r25, r3
    19ca:	2c f0       	brlt	.+10     	; 0x19d6 <_fpadd_parts+0x18c>
    19cc:	1c 01       	movw	r2, r24
    19ce:	aa 24       	eor	r10, r10
    19d0:	bb 24       	eor	r11, r11
    19d2:	65 01       	movw	r12, r10
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <_fpadd_parts+0x192>
    19d6:	ee 24       	eor	r14, r14
    19d8:	ff 24       	eor	r15, r15
    19da:	87 01       	movw	r16, r14
    19dc:	11 96       	adiw	r26, 0x01	; 1
    19de:	9c 91       	ld	r25, X
    19e0:	d2 01       	movw	r26, r4
    19e2:	11 96       	adiw	r26, 0x01	; 1
    19e4:	8c 91       	ld	r24, X
    19e6:	98 17       	cp	r25, r24
    19e8:	09 f4       	brne	.+2      	; 0x19ec <_fpadd_parts+0x1a2>
    19ea:	45 c0       	rjmp	.+138    	; 0x1a76 <_fpadd_parts+0x22c>
    19ec:	99 23       	and	r25, r25
    19ee:	39 f0       	breq	.+14     	; 0x19fe <_fpadd_parts+0x1b4>
    19f0:	a8 01       	movw	r20, r16
    19f2:	97 01       	movw	r18, r14
    19f4:	2a 19       	sub	r18, r10
    19f6:	3b 09       	sbc	r19, r11
    19f8:	4c 09       	sbc	r20, r12
    19fa:	5d 09       	sbc	r21, r13
    19fc:	06 c0       	rjmp	.+12     	; 0x1a0a <_fpadd_parts+0x1c0>
    19fe:	a6 01       	movw	r20, r12
    1a00:	95 01       	movw	r18, r10
    1a02:	2e 19       	sub	r18, r14
    1a04:	3f 09       	sbc	r19, r15
    1a06:	40 0b       	sbc	r20, r16
    1a08:	51 0b       	sbc	r21, r17
    1a0a:	57 fd       	sbrc	r21, 7
    1a0c:	08 c0       	rjmp	.+16     	; 0x1a1e <_fpadd_parts+0x1d4>
    1a0e:	11 82       	std	Z+1, r1	; 0x01
    1a10:	33 82       	std	Z+3, r3	; 0x03
    1a12:	22 82       	std	Z+2, r2	; 0x02
    1a14:	24 83       	std	Z+4, r18	; 0x04
    1a16:	35 83       	std	Z+5, r19	; 0x05
    1a18:	46 83       	std	Z+6, r20	; 0x06
    1a1a:	57 83       	std	Z+7, r21	; 0x07
    1a1c:	1d c0       	rjmp	.+58     	; 0x1a58 <_fpadd_parts+0x20e>
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	81 83       	std	Z+1, r24	; 0x01
    1a22:	33 82       	std	Z+3, r3	; 0x03
    1a24:	22 82       	std	Z+2, r2	; 0x02
    1a26:	88 27       	eor	r24, r24
    1a28:	99 27       	eor	r25, r25
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	82 1b       	sub	r24, r18
    1a2e:	93 0b       	sbc	r25, r19
    1a30:	a4 0b       	sbc	r26, r20
    1a32:	b5 0b       	sbc	r27, r21
    1a34:	84 83       	std	Z+4, r24	; 0x04
    1a36:	95 83       	std	Z+5, r25	; 0x05
    1a38:	a6 83       	std	Z+6, r26	; 0x06
    1a3a:	b7 83       	std	Z+7, r27	; 0x07
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <_fpadd_parts+0x20e>
    1a3e:	22 0f       	add	r18, r18
    1a40:	33 1f       	adc	r19, r19
    1a42:	44 1f       	adc	r20, r20
    1a44:	55 1f       	adc	r21, r21
    1a46:	24 83       	std	Z+4, r18	; 0x04
    1a48:	35 83       	std	Z+5, r19	; 0x05
    1a4a:	46 83       	std	Z+6, r20	; 0x06
    1a4c:	57 83       	std	Z+7, r21	; 0x07
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	93 83       	std	Z+3, r25	; 0x03
    1a56:	82 83       	std	Z+2, r24	; 0x02
    1a58:	24 81       	ldd	r18, Z+4	; 0x04
    1a5a:	35 81       	ldd	r19, Z+5	; 0x05
    1a5c:	46 81       	ldd	r20, Z+6	; 0x06
    1a5e:	57 81       	ldd	r21, Z+7	; 0x07
    1a60:	da 01       	movw	r26, r20
    1a62:	c9 01       	movw	r24, r18
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	a1 09       	sbc	r26, r1
    1a68:	b1 09       	sbc	r27, r1
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6e:	af 4f       	sbci	r26, 0xFF	; 255
    1a70:	bf 43       	sbci	r27, 0x3F	; 63
    1a72:	28 f3       	brcs	.-54     	; 0x1a3e <_fpadd_parts+0x1f4>
    1a74:	0b c0       	rjmp	.+22     	; 0x1a8c <_fpadd_parts+0x242>
    1a76:	91 83       	std	Z+1, r25	; 0x01
    1a78:	33 82       	std	Z+3, r3	; 0x03
    1a7a:	22 82       	std	Z+2, r2	; 0x02
    1a7c:	ea 0c       	add	r14, r10
    1a7e:	fb 1c       	adc	r15, r11
    1a80:	0c 1d       	adc	r16, r12
    1a82:	1d 1d       	adc	r17, r13
    1a84:	e4 82       	std	Z+4, r14	; 0x04
    1a86:	f5 82       	std	Z+5, r15	; 0x05
    1a88:	06 83       	std	Z+6, r16	; 0x06
    1a8a:	17 83       	std	Z+7, r17	; 0x07
    1a8c:	83 e0       	ldi	r24, 0x03	; 3
    1a8e:	80 83       	st	Z, r24
    1a90:	24 81       	ldd	r18, Z+4	; 0x04
    1a92:	35 81       	ldd	r19, Z+5	; 0x05
    1a94:	46 81       	ldd	r20, Z+6	; 0x06
    1a96:	57 81       	ldd	r21, Z+7	; 0x07
    1a98:	57 ff       	sbrs	r21, 7
    1a9a:	1a c0       	rjmp	.+52     	; 0x1ad0 <_fpadd_parts+0x286>
    1a9c:	c9 01       	movw	r24, r18
    1a9e:	aa 27       	eor	r26, r26
    1aa0:	97 fd       	sbrc	r25, 7
    1aa2:	a0 95       	com	r26
    1aa4:	ba 2f       	mov	r27, r26
    1aa6:	81 70       	andi	r24, 0x01	; 1
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	a0 70       	andi	r26, 0x00	; 0
    1aac:	b0 70       	andi	r27, 0x00	; 0
    1aae:	56 95       	lsr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	37 95       	ror	r19
    1ab4:	27 95       	ror	r18
    1ab6:	82 2b       	or	r24, r18
    1ab8:	93 2b       	or	r25, r19
    1aba:	a4 2b       	or	r26, r20
    1abc:	b5 2b       	or	r27, r21
    1abe:	84 83       	std	Z+4, r24	; 0x04
    1ac0:	95 83       	std	Z+5, r25	; 0x05
    1ac2:	a6 83       	std	Z+6, r26	; 0x06
    1ac4:	b7 83       	std	Z+7, r27	; 0x07
    1ac6:	82 81       	ldd	r24, Z+2	; 0x02
    1ac8:	93 81       	ldd	r25, Z+3	; 0x03
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	93 83       	std	Z+3, r25	; 0x03
    1ace:	82 83       	std	Z+2, r24	; 0x02
    1ad0:	df 01       	movw	r26, r30
    1ad2:	01 c0       	rjmp	.+2      	; 0x1ad6 <_fpadd_parts+0x28c>
    1ad4:	d2 01       	movw	r26, r4
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	e2 e1       	ldi	r30, 0x12	; 18
    1ade:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__epilogue_restores__>

00001ae2 <__subsf3>:
    1ae2:	a0 e2       	ldi	r26, 0x20	; 32
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e7 e7       	ldi	r30, 0x77	; 119
    1ae8:	fd e0       	ldi	r31, 0x0D	; 13
    1aea:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
    1aee:	69 83       	std	Y+1, r22	; 0x01
    1af0:	7a 83       	std	Y+2, r23	; 0x02
    1af2:	8b 83       	std	Y+3, r24	; 0x03
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	2d 83       	std	Y+5, r18	; 0x05
    1af8:	3e 83       	std	Y+6, r19	; 0x06
    1afa:	4f 83       	std	Y+7, r20	; 0x07
    1afc:	58 87       	std	Y+8, r21	; 0x08
    1afe:	e9 e0       	ldi	r30, 0x09	; 9
    1b00:	ee 2e       	mov	r14, r30
    1b02:	f1 2c       	mov	r15, r1
    1b04:	ec 0e       	add	r14, r28
    1b06:	fd 1e       	adc	r15, r29
    1b08:	ce 01       	movw	r24, r28
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	b7 01       	movw	r22, r14
    1b0e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1b12:	8e 01       	movw	r16, r28
    1b14:	0f 5e       	subi	r16, 0xEF	; 239
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	ce 01       	movw	r24, r28
    1b1a:	05 96       	adiw	r24, 0x05	; 5
    1b1c:	b8 01       	movw	r22, r16
    1b1e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1b22:	8a 89       	ldd	r24, Y+18	; 0x12
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	89 27       	eor	r24, r25
    1b28:	8a 8b       	std	Y+18, r24	; 0x12
    1b2a:	c7 01       	movw	r24, r14
    1b2c:	b8 01       	movw	r22, r16
    1b2e:	ae 01       	movw	r20, r28
    1b30:	47 5e       	subi	r20, 0xE7	; 231
    1b32:	5f 4f       	sbci	r21, 0xFF	; 255
    1b34:	0e 94 25 0c 	call	0x184a	; 0x184a <_fpadd_parts>
    1b38:	0e 94 1f 11 	call	0x223e	; 0x223e <__pack_f>
    1b3c:	a0 96       	adiw	r28, 0x20	; 32
    1b3e:	e6 e0       	ldi	r30, 0x06	; 6
    1b40:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

00001b44 <__addsf3>:
    1b44:	a0 e2       	ldi	r26, 0x20	; 32
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e8 ea       	ldi	r30, 0xA8	; 168
    1b4a:	fd e0       	ldi	r31, 0x0D	; 13
    1b4c:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
    1b50:	69 83       	std	Y+1, r22	; 0x01
    1b52:	7a 83       	std	Y+2, r23	; 0x02
    1b54:	8b 83       	std	Y+3, r24	; 0x03
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	2d 83       	std	Y+5, r18	; 0x05
    1b5a:	3e 83       	std	Y+6, r19	; 0x06
    1b5c:	4f 83       	std	Y+7, r20	; 0x07
    1b5e:	58 87       	std	Y+8, r21	; 0x08
    1b60:	f9 e0       	ldi	r31, 0x09	; 9
    1b62:	ef 2e       	mov	r14, r31
    1b64:	f1 2c       	mov	r15, r1
    1b66:	ec 0e       	add	r14, r28
    1b68:	fd 1e       	adc	r15, r29
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	b7 01       	movw	r22, r14
    1b70:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1b74:	8e 01       	movw	r16, r28
    1b76:	0f 5e       	subi	r16, 0xEF	; 239
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	05 96       	adiw	r24, 0x05	; 5
    1b7e:	b8 01       	movw	r22, r16
    1b80:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1b84:	c7 01       	movw	r24, r14
    1b86:	b8 01       	movw	r22, r16
    1b88:	ae 01       	movw	r20, r28
    1b8a:	47 5e       	subi	r20, 0xE7	; 231
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	0e 94 25 0c 	call	0x184a	; 0x184a <_fpadd_parts>
    1b92:	0e 94 1f 11 	call	0x223e	; 0x223e <__pack_f>
    1b96:	a0 96       	adiw	r28, 0x20	; 32
    1b98:	e6 e0       	ldi	r30, 0x06	; 6
    1b9a:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

00001b9e <__mulsf3>:
    1b9e:	a0 e2       	ldi	r26, 0x20	; 32
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e5 ed       	ldi	r30, 0xD5	; 213
    1ba4:	fd e0       	ldi	r31, 0x0D	; 13
    1ba6:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__prologue_saves__>
    1baa:	69 83       	std	Y+1, r22	; 0x01
    1bac:	7a 83       	std	Y+2, r23	; 0x02
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	2d 83       	std	Y+5, r18	; 0x05
    1bb4:	3e 83       	std	Y+6, r19	; 0x06
    1bb6:	4f 83       	std	Y+7, r20	; 0x07
    1bb8:	58 87       	std	Y+8, r21	; 0x08
    1bba:	ce 01       	movw	r24, r28
    1bbc:	01 96       	adiw	r24, 0x01	; 1
    1bbe:	be 01       	movw	r22, r28
    1bc0:	67 5f       	subi	r22, 0xF7	; 247
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1bc8:	ce 01       	movw	r24, r28
    1bca:	05 96       	adiw	r24, 0x05	; 5
    1bcc:	be 01       	movw	r22, r28
    1bce:	6f 5e       	subi	r22, 0xEF	; 239
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1bd6:	99 85       	ldd	r25, Y+9	; 0x09
    1bd8:	92 30       	cpi	r25, 0x02	; 2
    1bda:	88 f0       	brcs	.+34     	; 0x1bfe <__mulsf3+0x60>
    1bdc:	89 89       	ldd	r24, Y+17	; 0x11
    1bde:	82 30       	cpi	r24, 0x02	; 2
    1be0:	c8 f0       	brcs	.+50     	; 0x1c14 <__mulsf3+0x76>
    1be2:	94 30       	cpi	r25, 0x04	; 4
    1be4:	19 f4       	brne	.+6      	; 0x1bec <__mulsf3+0x4e>
    1be6:	82 30       	cpi	r24, 0x02	; 2
    1be8:	51 f4       	brne	.+20     	; 0x1bfe <__mulsf3+0x60>
    1bea:	04 c0       	rjmp	.+8      	; 0x1bf4 <__mulsf3+0x56>
    1bec:	84 30       	cpi	r24, 0x04	; 4
    1bee:	29 f4       	brne	.+10     	; 0x1bfa <__mulsf3+0x5c>
    1bf0:	92 30       	cpi	r25, 0x02	; 2
    1bf2:	81 f4       	brne	.+32     	; 0x1c14 <__mulsf3+0x76>
    1bf4:	8a e1       	ldi	r24, 0x1A	; 26
    1bf6:	91 e0       	ldi	r25, 0x01	; 1
    1bf8:	c6 c0       	rjmp	.+396    	; 0x1d86 <__mulsf3+0x1e8>
    1bfa:	92 30       	cpi	r25, 0x02	; 2
    1bfc:	49 f4       	brne	.+18     	; 0x1c10 <__mulsf3+0x72>
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	8a 89       	ldd	r24, Y+18	; 0x12
    1c04:	98 13       	cpse	r25, r24
    1c06:	21 e0       	ldi	r18, 0x01	; 1
    1c08:	2a 87       	std	Y+10, r18	; 0x0a
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	09 96       	adiw	r24, 0x09	; 9
    1c0e:	bb c0       	rjmp	.+374    	; 0x1d86 <__mulsf3+0x1e8>
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	49 f4       	brne	.+18     	; 0x1c26 <__mulsf3+0x88>
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	8a 89       	ldd	r24, Y+18	; 0x12
    1c1a:	98 13       	cpse	r25, r24
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	2a 8b       	std	Y+18, r18	; 0x12
    1c20:	ce 01       	movw	r24, r28
    1c22:	41 96       	adiw	r24, 0x11	; 17
    1c24:	b0 c0       	rjmp	.+352    	; 0x1d86 <__mulsf3+0x1e8>
    1c26:	2d 84       	ldd	r2, Y+13	; 0x0d
    1c28:	3e 84       	ldd	r3, Y+14	; 0x0e
    1c2a:	4f 84       	ldd	r4, Y+15	; 0x0f
    1c2c:	58 88       	ldd	r5, Y+16	; 0x10
    1c2e:	6d 88       	ldd	r6, Y+21	; 0x15
    1c30:	7e 88       	ldd	r7, Y+22	; 0x16
    1c32:	8f 88       	ldd	r8, Y+23	; 0x17
    1c34:	98 8c       	ldd	r9, Y+24	; 0x18
    1c36:	ee 24       	eor	r14, r14
    1c38:	ff 24       	eor	r15, r15
    1c3a:	87 01       	movw	r16, r14
    1c3c:	aa 24       	eor	r10, r10
    1c3e:	bb 24       	eor	r11, r11
    1c40:	65 01       	movw	r12, r10
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	e0 e0       	ldi	r30, 0x00	; 0
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	c1 01       	movw	r24, r2
    1c50:	81 70       	andi	r24, 0x01	; 1
    1c52:	90 70       	andi	r25, 0x00	; 0
    1c54:	89 2b       	or	r24, r25
    1c56:	e9 f0       	breq	.+58     	; 0x1c92 <__mulsf3+0xf4>
    1c58:	e6 0c       	add	r14, r6
    1c5a:	f7 1c       	adc	r15, r7
    1c5c:	08 1d       	adc	r16, r8
    1c5e:	19 1d       	adc	r17, r9
    1c60:	9a 01       	movw	r18, r20
    1c62:	ab 01       	movw	r20, r22
    1c64:	2a 0d       	add	r18, r10
    1c66:	3b 1d       	adc	r19, r11
    1c68:	4c 1d       	adc	r20, r12
    1c6a:	5d 1d       	adc	r21, r13
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e6 14       	cp	r14, r6
    1c76:	f7 04       	cpc	r15, r7
    1c78:	08 05       	cpc	r16, r8
    1c7a:	19 05       	cpc	r17, r9
    1c7c:	20 f4       	brcc	.+8      	; 0x1c86 <__mulsf3+0xe8>
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	ba 01       	movw	r22, r20
    1c88:	a9 01       	movw	r20, r18
    1c8a:	48 0f       	add	r20, r24
    1c8c:	59 1f       	adc	r21, r25
    1c8e:	6a 1f       	adc	r22, r26
    1c90:	7b 1f       	adc	r23, r27
    1c92:	aa 0c       	add	r10, r10
    1c94:	bb 1c       	adc	r11, r11
    1c96:	cc 1c       	adc	r12, r12
    1c98:	dd 1c       	adc	r13, r13
    1c9a:	97 fe       	sbrs	r9, 7
    1c9c:	08 c0       	rjmp	.+16     	; 0x1cae <__mulsf3+0x110>
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a0 e0       	ldi	r26, 0x00	; 0
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	a8 2a       	or	r10, r24
    1ca8:	b9 2a       	or	r11, r25
    1caa:	ca 2a       	or	r12, r26
    1cac:	db 2a       	or	r13, r27
    1cae:	31 96       	adiw	r30, 0x01	; 1
    1cb0:	e0 32       	cpi	r30, 0x20	; 32
    1cb2:	f1 05       	cpc	r31, r1
    1cb4:	49 f0       	breq	.+18     	; 0x1cc8 <__mulsf3+0x12a>
    1cb6:	66 0c       	add	r6, r6
    1cb8:	77 1c       	adc	r7, r7
    1cba:	88 1c       	adc	r8, r8
    1cbc:	99 1c       	adc	r9, r9
    1cbe:	56 94       	lsr	r5
    1cc0:	47 94       	ror	r4
    1cc2:	37 94       	ror	r3
    1cc4:	27 94       	ror	r2
    1cc6:	c3 cf       	rjmp	.-122    	; 0x1c4e <__mulsf3+0xb0>
    1cc8:	fa 85       	ldd	r31, Y+10	; 0x0a
    1cca:	ea 89       	ldd	r30, Y+18	; 0x12
    1ccc:	2b 89       	ldd	r18, Y+19	; 0x13
    1cce:	3c 89       	ldd	r19, Y+20	; 0x14
    1cd0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cd2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cd4:	28 0f       	add	r18, r24
    1cd6:	39 1f       	adc	r19, r25
    1cd8:	2e 5f       	subi	r18, 0xFE	; 254
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	17 c0       	rjmp	.+46     	; 0x1d0c <__mulsf3+0x16e>
    1cde:	ca 01       	movw	r24, r20
    1ce0:	81 70       	andi	r24, 0x01	; 1
    1ce2:	90 70       	andi	r25, 0x00	; 0
    1ce4:	89 2b       	or	r24, r25
    1ce6:	61 f0       	breq	.+24     	; 0x1d00 <__mulsf3+0x162>
    1ce8:	16 95       	lsr	r17
    1cea:	07 95       	ror	r16
    1cec:	f7 94       	ror	r15
    1cee:	e7 94       	ror	r14
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 e0       	ldi	r26, 0x00	; 0
    1cf6:	b0 e8       	ldi	r27, 0x80	; 128
    1cf8:	e8 2a       	or	r14, r24
    1cfa:	f9 2a       	or	r15, r25
    1cfc:	0a 2b       	or	r16, r26
    1cfe:	1b 2b       	or	r17, r27
    1d00:	76 95       	lsr	r23
    1d02:	67 95       	ror	r22
    1d04:	57 95       	ror	r21
    1d06:	47 95       	ror	r20
    1d08:	2f 5f       	subi	r18, 0xFF	; 255
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	77 fd       	sbrc	r23, 7
    1d0e:	e7 cf       	rjmp	.-50     	; 0x1cde <__mulsf3+0x140>
    1d10:	0c c0       	rjmp	.+24     	; 0x1d2a <__mulsf3+0x18c>
    1d12:	44 0f       	add	r20, r20
    1d14:	55 1f       	adc	r21, r21
    1d16:	66 1f       	adc	r22, r22
    1d18:	77 1f       	adc	r23, r23
    1d1a:	17 fd       	sbrc	r17, 7
    1d1c:	41 60       	ori	r20, 0x01	; 1
    1d1e:	ee 0c       	add	r14, r14
    1d20:	ff 1c       	adc	r15, r15
    1d22:	00 1f       	adc	r16, r16
    1d24:	11 1f       	adc	r17, r17
    1d26:	21 50       	subi	r18, 0x01	; 1
    1d28:	30 40       	sbci	r19, 0x00	; 0
    1d2a:	40 30       	cpi	r20, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	59 07       	cpc	r21, r25
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	69 07       	cpc	r22, r25
    1d34:	90 e4       	ldi	r25, 0x40	; 64
    1d36:	79 07       	cpc	r23, r25
    1d38:	60 f3       	brcs	.-40     	; 0x1d12 <__mulsf3+0x174>
    1d3a:	2b 8f       	std	Y+27, r18	; 0x1b
    1d3c:	3c 8f       	std	Y+28, r19	; 0x1c
    1d3e:	db 01       	movw	r26, r22
    1d40:	ca 01       	movw	r24, r20
    1d42:	8f 77       	andi	r24, 0x7F	; 127
    1d44:	90 70       	andi	r25, 0x00	; 0
    1d46:	a0 70       	andi	r26, 0x00	; 0
    1d48:	b0 70       	andi	r27, 0x00	; 0
    1d4a:	80 34       	cpi	r24, 0x40	; 64
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	a1 05       	cpc	r26, r1
    1d50:	b1 05       	cpc	r27, r1
    1d52:	61 f4       	brne	.+24     	; 0x1d6c <__mulsf3+0x1ce>
    1d54:	47 fd       	sbrc	r20, 7
    1d56:	0a c0       	rjmp	.+20     	; 0x1d6c <__mulsf3+0x1ce>
    1d58:	e1 14       	cp	r14, r1
    1d5a:	f1 04       	cpc	r15, r1
    1d5c:	01 05       	cpc	r16, r1
    1d5e:	11 05       	cpc	r17, r1
    1d60:	29 f0       	breq	.+10     	; 0x1d6c <__mulsf3+0x1ce>
    1d62:	40 5c       	subi	r20, 0xC0	; 192
    1d64:	5f 4f       	sbci	r21, 0xFF	; 255
    1d66:	6f 4f       	sbci	r22, 0xFF	; 255
    1d68:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6a:	40 78       	andi	r20, 0x80	; 128
    1d6c:	1a 8e       	std	Y+26, r1	; 0x1a
    1d6e:	fe 17       	cp	r31, r30
    1d70:	11 f0       	breq	.+4      	; 0x1d76 <__mulsf3+0x1d8>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	8a 8f       	std	Y+26, r24	; 0x1a
    1d76:	4d 8f       	std	Y+29, r20	; 0x1d
    1d78:	5e 8f       	std	Y+30, r21	; 0x1e
    1d7a:	6f 8f       	std	Y+31, r22	; 0x1f
    1d7c:	78 a3       	std	Y+32, r23	; 0x20
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	89 8f       	std	Y+25, r24	; 0x19
    1d82:	ce 01       	movw	r24, r28
    1d84:	49 96       	adiw	r24, 0x19	; 25
    1d86:	0e 94 1f 11 	call	0x223e	; 0x223e <__pack_f>
    1d8a:	a0 96       	adiw	r28, 0x20	; 32
    1d8c:	e2 e1       	ldi	r30, 0x12	; 18
    1d8e:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__epilogue_restores__>

00001d92 <__divsf3>:
    1d92:	a8 e1       	ldi	r26, 0x18	; 24
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	ef ec       	ldi	r30, 0xCF	; 207
    1d98:	fe e0       	ldi	r31, 0x0E	; 14
    1d9a:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x10>
    1d9e:	69 83       	std	Y+1, r22	; 0x01
    1da0:	7a 83       	std	Y+2, r23	; 0x02
    1da2:	8b 83       	std	Y+3, r24	; 0x03
    1da4:	9c 83       	std	Y+4, r25	; 0x04
    1da6:	2d 83       	std	Y+5, r18	; 0x05
    1da8:	3e 83       	std	Y+6, r19	; 0x06
    1daa:	4f 83       	std	Y+7, r20	; 0x07
    1dac:	58 87       	std	Y+8, r21	; 0x08
    1dae:	b9 e0       	ldi	r27, 0x09	; 9
    1db0:	eb 2e       	mov	r14, r27
    1db2:	f1 2c       	mov	r15, r1
    1db4:	ec 0e       	add	r14, r28
    1db6:	fd 1e       	adc	r15, r29
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1dc2:	8e 01       	movw	r16, r28
    1dc4:	0f 5e       	subi	r16, 0xEF	; 239
    1dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc8:	ce 01       	movw	r24, r28
    1dca:	05 96       	adiw	r24, 0x05	; 5
    1dcc:	b8 01       	movw	r22, r16
    1dce:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1dd2:	29 85       	ldd	r18, Y+9	; 0x09
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	08 f4       	brcc	.+2      	; 0x1dda <__divsf3+0x48>
    1dd8:	7e c0       	rjmp	.+252    	; 0x1ed6 <__divsf3+0x144>
    1dda:	39 89       	ldd	r19, Y+17	; 0x11
    1ddc:	32 30       	cpi	r19, 0x02	; 2
    1dde:	10 f4       	brcc	.+4      	; 0x1de4 <__divsf3+0x52>
    1de0:	b8 01       	movw	r22, r16
    1de2:	7c c0       	rjmp	.+248    	; 0x1edc <__divsf3+0x14a>
    1de4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de6:	9a 89       	ldd	r25, Y+18	; 0x12
    1de8:	89 27       	eor	r24, r25
    1dea:	8a 87       	std	Y+10, r24	; 0x0a
    1dec:	24 30       	cpi	r18, 0x04	; 4
    1dee:	11 f0       	breq	.+4      	; 0x1df4 <__divsf3+0x62>
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 f4       	brne	.+12     	; 0x1e00 <__divsf3+0x6e>
    1df4:	23 17       	cp	r18, r19
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <__divsf3+0x68>
    1df8:	6e c0       	rjmp	.+220    	; 0x1ed6 <__divsf3+0x144>
    1dfa:	6a e1       	ldi	r22, 0x1A	; 26
    1dfc:	71 e0       	ldi	r23, 0x01	; 1
    1dfe:	6e c0       	rjmp	.+220    	; 0x1edc <__divsf3+0x14a>
    1e00:	34 30       	cpi	r19, 0x04	; 4
    1e02:	39 f4       	brne	.+14     	; 0x1e12 <__divsf3+0x80>
    1e04:	1d 86       	std	Y+13, r1	; 0x0d
    1e06:	1e 86       	std	Y+14, r1	; 0x0e
    1e08:	1f 86       	std	Y+15, r1	; 0x0f
    1e0a:	18 8a       	std	Y+16, r1	; 0x10
    1e0c:	1c 86       	std	Y+12, r1	; 0x0c
    1e0e:	1b 86       	std	Y+11, r1	; 0x0b
    1e10:	04 c0       	rjmp	.+8      	; 0x1e1a <__divsf3+0x88>
    1e12:	32 30       	cpi	r19, 0x02	; 2
    1e14:	21 f4       	brne	.+8      	; 0x1e1e <__divsf3+0x8c>
    1e16:	84 e0       	ldi	r24, 0x04	; 4
    1e18:	89 87       	std	Y+9, r24	; 0x09
    1e1a:	b7 01       	movw	r22, r14
    1e1c:	5f c0       	rjmp	.+190    	; 0x1edc <__divsf3+0x14a>
    1e1e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1e20:	3c 85       	ldd	r19, Y+12	; 0x0c
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	9c 89       	ldd	r25, Y+20	; 0x14
    1e26:	28 1b       	sub	r18, r24
    1e28:	39 0b       	sbc	r19, r25
    1e2a:	3c 87       	std	Y+12, r19	; 0x0c
    1e2c:	2b 87       	std	Y+11, r18	; 0x0b
    1e2e:	ed 84       	ldd	r14, Y+13	; 0x0d
    1e30:	fe 84       	ldd	r15, Y+14	; 0x0e
    1e32:	0f 85       	ldd	r16, Y+15	; 0x0f
    1e34:	18 89       	ldd	r17, Y+16	; 0x10
    1e36:	ad 88       	ldd	r10, Y+21	; 0x15
    1e38:	be 88       	ldd	r11, Y+22	; 0x16
    1e3a:	cf 88       	ldd	r12, Y+23	; 0x17
    1e3c:	d8 8c       	ldd	r13, Y+24	; 0x18
    1e3e:	ea 14       	cp	r14, r10
    1e40:	fb 04       	cpc	r15, r11
    1e42:	0c 05       	cpc	r16, r12
    1e44:	1d 05       	cpc	r17, r13
    1e46:	40 f4       	brcc	.+16     	; 0x1e58 <__divsf3+0xc6>
    1e48:	ee 0c       	add	r14, r14
    1e4a:	ff 1c       	adc	r15, r15
    1e4c:	00 1f       	adc	r16, r16
    1e4e:	11 1f       	adc	r17, r17
    1e50:	21 50       	subi	r18, 0x01	; 1
    1e52:	30 40       	sbci	r19, 0x00	; 0
    1e54:	3c 87       	std	Y+12, r19	; 0x0c
    1e56:	2b 87       	std	Y+11, r18	; 0x0b
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e0       	ldi	r26, 0x00	; 0
    1e66:	b0 e4       	ldi	r27, 0x40	; 64
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	70 e0       	ldi	r23, 0x00	; 0
    1e6c:	ea 14       	cp	r14, r10
    1e6e:	fb 04       	cpc	r15, r11
    1e70:	0c 05       	cpc	r16, r12
    1e72:	1d 05       	cpc	r17, r13
    1e74:	40 f0       	brcs	.+16     	; 0x1e86 <__divsf3+0xf4>
    1e76:	28 2b       	or	r18, r24
    1e78:	39 2b       	or	r19, r25
    1e7a:	4a 2b       	or	r20, r26
    1e7c:	5b 2b       	or	r21, r27
    1e7e:	ea 18       	sub	r14, r10
    1e80:	fb 08       	sbc	r15, r11
    1e82:	0c 09       	sbc	r16, r12
    1e84:	1d 09       	sbc	r17, r13
    1e86:	b6 95       	lsr	r27
    1e88:	a7 95       	ror	r26
    1e8a:	97 95       	ror	r25
    1e8c:	87 95       	ror	r24
    1e8e:	ee 0c       	add	r14, r14
    1e90:	ff 1c       	adc	r15, r15
    1e92:	00 1f       	adc	r16, r16
    1e94:	11 1f       	adc	r17, r17
    1e96:	6f 5f       	subi	r22, 0xFF	; 255
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	6f 31       	cpi	r22, 0x1F	; 31
    1e9c:	71 05       	cpc	r23, r1
    1e9e:	31 f7       	brne	.-52     	; 0x1e6c <__divsf3+0xda>
    1ea0:	da 01       	movw	r26, r20
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	8f 77       	andi	r24, 0x7F	; 127
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	a0 70       	andi	r26, 0x00	; 0
    1eaa:	b0 70       	andi	r27, 0x00	; 0
    1eac:	80 34       	cpi	r24, 0x40	; 64
    1eae:	91 05       	cpc	r25, r1
    1eb0:	a1 05       	cpc	r26, r1
    1eb2:	b1 05       	cpc	r27, r1
    1eb4:	61 f4       	brne	.+24     	; 0x1ece <__divsf3+0x13c>
    1eb6:	27 fd       	sbrc	r18, 7
    1eb8:	0a c0       	rjmp	.+20     	; 0x1ece <__divsf3+0x13c>
    1eba:	e1 14       	cp	r14, r1
    1ebc:	f1 04       	cpc	r15, r1
    1ebe:	01 05       	cpc	r16, r1
    1ec0:	11 05       	cpc	r17, r1
    1ec2:	29 f0       	breq	.+10     	; 0x1ece <__divsf3+0x13c>
    1ec4:	20 5c       	subi	r18, 0xC0	; 192
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	4f 4f       	sbci	r20, 0xFF	; 255
    1eca:	5f 4f       	sbci	r21, 0xFF	; 255
    1ecc:	20 78       	andi	r18, 0x80	; 128
    1ece:	2d 87       	std	Y+13, r18	; 0x0d
    1ed0:	3e 87       	std	Y+14, r19	; 0x0e
    1ed2:	4f 87       	std	Y+15, r20	; 0x0f
    1ed4:	58 8b       	std	Y+16, r21	; 0x10
    1ed6:	be 01       	movw	r22, r28
    1ed8:	67 5f       	subi	r22, 0xF7	; 247
    1eda:	7f 4f       	sbci	r23, 0xFF	; 255
    1edc:	cb 01       	movw	r24, r22
    1ede:	0e 94 1f 11 	call	0x223e	; 0x223e <__pack_f>
    1ee2:	68 96       	adiw	r28, 0x18	; 24
    1ee4:	ea e0       	ldi	r30, 0x0A	; 10
    1ee6:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x10>

00001eea <__gesf2>:
    1eea:	a8 e1       	ldi	r26, 0x18	; 24
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	eb e7       	ldi	r30, 0x7B	; 123
    1ef0:	ff e0       	ldi	r31, 0x0F	; 15
    1ef2:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <__prologue_saves__+0x18>
    1ef6:	69 83       	std	Y+1, r22	; 0x01
    1ef8:	7a 83       	std	Y+2, r23	; 0x02
    1efa:	8b 83       	std	Y+3, r24	; 0x03
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	2d 83       	std	Y+5, r18	; 0x05
    1f00:	3e 83       	std	Y+6, r19	; 0x06
    1f02:	4f 83       	std	Y+7, r20	; 0x07
    1f04:	58 87       	std	Y+8, r21	; 0x08
    1f06:	89 e0       	ldi	r24, 0x09	; 9
    1f08:	e8 2e       	mov	r14, r24
    1f0a:	f1 2c       	mov	r15, r1
    1f0c:	ec 0e       	add	r14, r28
    1f0e:	fd 1e       	adc	r15, r29
    1f10:	ce 01       	movw	r24, r28
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	b7 01       	movw	r22, r14
    1f16:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1f1a:	8e 01       	movw	r16, r28
    1f1c:	0f 5e       	subi	r16, 0xEF	; 239
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	ce 01       	movw	r24, r28
    1f22:	05 96       	adiw	r24, 0x05	; 5
    1f24:	b8 01       	movw	r22, r16
    1f26:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	82 30       	cpi	r24, 0x02	; 2
    1f2e:	40 f0       	brcs	.+16     	; 0x1f40 <__gesf2+0x56>
    1f30:	89 89       	ldd	r24, Y+17	; 0x11
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	28 f0       	brcs	.+10     	; 0x1f40 <__gesf2+0x56>
    1f36:	c7 01       	movw	r24, r14
    1f38:	b8 01       	movw	r22, r16
    1f3a:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__fpcmp_parts_f>
    1f3e:	01 c0       	rjmp	.+2      	; 0x1f42 <__gesf2+0x58>
    1f40:	8f ef       	ldi	r24, 0xFF	; 255
    1f42:	68 96       	adiw	r28, 0x18	; 24
    1f44:	e6 e0       	ldi	r30, 0x06	; 6
    1f46:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__epilogue_restores__+0x18>

00001f4a <__floatsisf>:
    1f4a:	a8 e0       	ldi	r26, 0x08	; 8
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	eb ea       	ldi	r30, 0xAB	; 171
    1f50:	ff e0       	ldi	r31, 0x0F	; 15
    1f52:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__prologue_saves__+0x12>
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	da 01       	movw	r26, r20
    1f60:	c9 01       	movw	r24, r18
    1f62:	88 27       	eor	r24, r24
    1f64:	b7 fd       	sbrc	r27, 7
    1f66:	83 95       	inc	r24
    1f68:	99 27       	eor	r25, r25
    1f6a:	aa 27       	eor	r26, r26
    1f6c:	bb 27       	eor	r27, r27
    1f6e:	b8 2e       	mov	r11, r24
    1f70:	21 15       	cp	r18, r1
    1f72:	31 05       	cpc	r19, r1
    1f74:	41 05       	cpc	r20, r1
    1f76:	51 05       	cpc	r21, r1
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <__floatsisf+0x36>
    1f7a:	82 e0       	ldi	r24, 0x02	; 2
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	3a c0       	rjmp	.+116    	; 0x1ff4 <__floatsisf+0xaa>
    1f80:	88 23       	and	r24, r24
    1f82:	a9 f0       	breq	.+42     	; 0x1fae <__floatsisf+0x64>
    1f84:	20 30       	cpi	r18, 0x00	; 0
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	38 07       	cpc	r19, r24
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	48 07       	cpc	r20, r24
    1f8e:	80 e8       	ldi	r24, 0x80	; 128
    1f90:	58 07       	cpc	r21, r24
    1f92:	29 f4       	brne	.+10     	; 0x1f9e <__floatsisf+0x54>
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	9f ec       	ldi	r25, 0xCF	; 207
    1f9c:	30 c0       	rjmp	.+96     	; 0x1ffe <__floatsisf+0xb4>
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	e2 1a       	sub	r14, r18
    1fa6:	f3 0a       	sbc	r15, r19
    1fa8:	04 0b       	sbc	r16, r20
    1faa:	15 0b       	sbc	r17, r21
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <__floatsisf+0x68>
    1fae:	79 01       	movw	r14, r18
    1fb0:	8a 01       	movw	r16, r20
    1fb2:	8e e1       	ldi	r24, 0x1E	; 30
    1fb4:	c8 2e       	mov	r12, r24
    1fb6:	d1 2c       	mov	r13, r1
    1fb8:	dc 82       	std	Y+4, r13	; 0x04
    1fba:	cb 82       	std	Y+3, r12	; 0x03
    1fbc:	ed 82       	std	Y+5, r14	; 0x05
    1fbe:	fe 82       	std	Y+6, r15	; 0x06
    1fc0:	0f 83       	std	Y+7, r16	; 0x07
    1fc2:	18 87       	std	Y+8, r17	; 0x08
    1fc4:	c8 01       	movw	r24, r16
    1fc6:	b7 01       	movw	r22, r14
    1fc8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__clzsi2>
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	18 16       	cp	r1, r24
    1fd0:	19 06       	cpc	r1, r25
    1fd2:	84 f4       	brge	.+32     	; 0x1ff4 <__floatsisf+0xaa>
    1fd4:	08 2e       	mov	r0, r24
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <__floatsisf+0x96>
    1fd8:	ee 0c       	add	r14, r14
    1fda:	ff 1c       	adc	r15, r15
    1fdc:	00 1f       	adc	r16, r16
    1fde:	11 1f       	adc	r17, r17
    1fe0:	0a 94       	dec	r0
    1fe2:	d2 f7       	brpl	.-12     	; 0x1fd8 <__floatsisf+0x8e>
    1fe4:	ed 82       	std	Y+5, r14	; 0x05
    1fe6:	fe 82       	std	Y+6, r15	; 0x06
    1fe8:	0f 83       	std	Y+7, r16	; 0x07
    1fea:	18 87       	std	Y+8, r17	; 0x08
    1fec:	c8 1a       	sub	r12, r24
    1fee:	d9 0a       	sbc	r13, r25
    1ff0:	dc 82       	std	Y+4, r13	; 0x04
    1ff2:	cb 82       	std	Y+3, r12	; 0x03
    1ff4:	ba 82       	std	Y+2, r11	; 0x02
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	0e 94 1f 11 	call	0x223e	; 0x223e <__pack_f>
    1ffe:	28 96       	adiw	r28, 0x08	; 8
    2000:	e9 e0       	ldi	r30, 0x09	; 9
    2002:	0c 94 11 13 	jmp	0x2622	; 0x2622 <__epilogue_restores__+0x12>

00002006 <__fixsfsi>:
    2006:	ac e0       	ldi	r26, 0x0C	; 12
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e9 e0       	ldi	r30, 0x09	; 9
    200c:	f0 e1       	ldi	r31, 0x10	; 16
    200e:	0c 94 fc 12 	jmp	0x25f8	; 0x25f8 <__prologue_saves__+0x20>
    2012:	69 83       	std	Y+1, r22	; 0x01
    2014:	7a 83       	std	Y+2, r23	; 0x02
    2016:	8b 83       	std	Y+3, r24	; 0x03
    2018:	9c 83       	std	Y+4, r25	; 0x04
    201a:	ce 01       	movw	r24, r28
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	be 01       	movw	r22, r28
    2020:	6b 5f       	subi	r22, 0xFB	; 251
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__unpack_f>
    2028:	8d 81       	ldd	r24, Y+5	; 0x05
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	61 f1       	breq	.+88     	; 0x2086 <__fixsfsi+0x80>
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	50 f1       	brcs	.+84     	; 0x2086 <__fixsfsi+0x80>
    2032:	84 30       	cpi	r24, 0x04	; 4
    2034:	21 f4       	brne	.+8      	; 0x203e <__fixsfsi+0x38>
    2036:	8e 81       	ldd	r24, Y+6	; 0x06
    2038:	88 23       	and	r24, r24
    203a:	51 f1       	breq	.+84     	; 0x2090 <__fixsfsi+0x8a>
    203c:	2e c0       	rjmp	.+92     	; 0x209a <__fixsfsi+0x94>
    203e:	2f 81       	ldd	r18, Y+7	; 0x07
    2040:	38 85       	ldd	r19, Y+8	; 0x08
    2042:	37 fd       	sbrc	r19, 7
    2044:	20 c0       	rjmp	.+64     	; 0x2086 <__fixsfsi+0x80>
    2046:	6e 81       	ldd	r22, Y+6	; 0x06
    2048:	2f 31       	cpi	r18, 0x1F	; 31
    204a:	31 05       	cpc	r19, r1
    204c:	1c f0       	brlt	.+6      	; 0x2054 <__fixsfsi+0x4e>
    204e:	66 23       	and	r22, r22
    2050:	f9 f0       	breq	.+62     	; 0x2090 <__fixsfsi+0x8a>
    2052:	23 c0       	rjmp	.+70     	; 0x209a <__fixsfsi+0x94>
    2054:	8e e1       	ldi	r24, 0x1E	; 30
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	82 1b       	sub	r24, r18
    205a:	93 0b       	sbc	r25, r19
    205c:	29 85       	ldd	r18, Y+9	; 0x09
    205e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2060:	4b 85       	ldd	r20, Y+11	; 0x0b
    2062:	5c 85       	ldd	r21, Y+12	; 0x0c
    2064:	04 c0       	rjmp	.+8      	; 0x206e <__fixsfsi+0x68>
    2066:	56 95       	lsr	r21
    2068:	47 95       	ror	r20
    206a:	37 95       	ror	r19
    206c:	27 95       	ror	r18
    206e:	8a 95       	dec	r24
    2070:	d2 f7       	brpl	.-12     	; 0x2066 <__fixsfsi+0x60>
    2072:	66 23       	and	r22, r22
    2074:	b1 f0       	breq	.+44     	; 0x20a2 <__fixsfsi+0x9c>
    2076:	50 95       	com	r21
    2078:	40 95       	com	r20
    207a:	30 95       	com	r19
    207c:	21 95       	neg	r18
    207e:	3f 4f       	sbci	r19, 0xFF	; 255
    2080:	4f 4f       	sbci	r20, 0xFF	; 255
    2082:	5f 4f       	sbci	r21, 0xFF	; 255
    2084:	0e c0       	rjmp	.+28     	; 0x20a2 <__fixsfsi+0x9c>
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <__fixsfsi+0x9c>
    2090:	2f ef       	ldi	r18, 0xFF	; 255
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f ef       	ldi	r20, 0xFF	; 255
    2096:	5f e7       	ldi	r21, 0x7F	; 127
    2098:	04 c0       	rjmp	.+8      	; 0x20a2 <__fixsfsi+0x9c>
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	50 e8       	ldi	r21, 0x80	; 128
    20a2:	b9 01       	movw	r22, r18
    20a4:	ca 01       	movw	r24, r20
    20a6:	2c 96       	adiw	r28, 0x0c	; 12
    20a8:	e2 e0       	ldi	r30, 0x02	; 2
    20aa:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__epilogue_restores__+0x20>

000020ae <__floatunsisf>:
    20ae:	a8 e0       	ldi	r26, 0x08	; 8
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	ed e5       	ldi	r30, 0x5D	; 93
    20b4:	f0 e1       	ldi	r31, 0x10	; 16
    20b6:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__prologue_saves__+0x10>
    20ba:	7b 01       	movw	r14, r22
    20bc:	8c 01       	movw	r16, r24
    20be:	61 15       	cp	r22, r1
    20c0:	71 05       	cpc	r23, r1
    20c2:	81 05       	cpc	r24, r1
    20c4:	91 05       	cpc	r25, r1
    20c6:	19 f4       	brne	.+6      	; 0x20ce <__floatunsisf+0x20>
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	60 c0       	rjmp	.+192    	; 0x218e <__floatunsisf+0xe0>
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	8e e1       	ldi	r24, 0x1E	; 30
    20d4:	c8 2e       	mov	r12, r24
    20d6:	d1 2c       	mov	r13, r1
    20d8:	dc 82       	std	Y+4, r13	; 0x04
    20da:	cb 82       	std	Y+3, r12	; 0x03
    20dc:	ed 82       	std	Y+5, r14	; 0x05
    20de:	fe 82       	std	Y+6, r15	; 0x06
    20e0:	0f 83       	std	Y+7, r16	; 0x07
    20e2:	18 87       	std	Y+8, r17	; 0x08
    20e4:	c8 01       	movw	r24, r16
    20e6:	b7 01       	movw	r22, r14
    20e8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__clzsi2>
    20ec:	fc 01       	movw	r30, r24
    20ee:	31 97       	sbiw	r30, 0x01	; 1
    20f0:	f7 ff       	sbrs	r31, 7
    20f2:	3b c0       	rjmp	.+118    	; 0x216a <__floatunsisf+0xbc>
    20f4:	22 27       	eor	r18, r18
    20f6:	33 27       	eor	r19, r19
    20f8:	2e 1b       	sub	r18, r30
    20fa:	3f 0b       	sbc	r19, r31
    20fc:	57 01       	movw	r10, r14
    20fe:	68 01       	movw	r12, r16
    2100:	02 2e       	mov	r0, r18
    2102:	04 c0       	rjmp	.+8      	; 0x210c <__floatunsisf+0x5e>
    2104:	d6 94       	lsr	r13
    2106:	c7 94       	ror	r12
    2108:	b7 94       	ror	r11
    210a:	a7 94       	ror	r10
    210c:	0a 94       	dec	r0
    210e:	d2 f7       	brpl	.-12     	; 0x2104 <__floatunsisf+0x56>
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e0       	ldi	r26, 0x00	; 0
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	04 c0       	rjmp	.+8      	; 0x212a <__floatunsisf+0x7c>
    2122:	88 0f       	add	r24, r24
    2124:	99 1f       	adc	r25, r25
    2126:	aa 1f       	adc	r26, r26
    2128:	bb 1f       	adc	r27, r27
    212a:	2a 95       	dec	r18
    212c:	d2 f7       	brpl	.-12     	; 0x2122 <__floatunsisf+0x74>
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	a1 09       	sbc	r26, r1
    2132:	b1 09       	sbc	r27, r1
    2134:	8e 21       	and	r24, r14
    2136:	9f 21       	and	r25, r15
    2138:	a0 23       	and	r26, r16
    213a:	b1 23       	and	r27, r17
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	a1 05       	cpc	r26, r1
    2140:	b1 05       	cpc	r27, r1
    2142:	21 f0       	breq	.+8      	; 0x214c <__floatunsisf+0x9e>
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	60 e0       	ldi	r22, 0x00	; 0
    214a:	70 e0       	ldi	r23, 0x00	; 0
    214c:	4a 29       	or	r20, r10
    214e:	5b 29       	or	r21, r11
    2150:	6c 29       	or	r22, r12
    2152:	7d 29       	or	r23, r13
    2154:	4d 83       	std	Y+5, r20	; 0x05
    2156:	5e 83       	std	Y+6, r21	; 0x06
    2158:	6f 83       	std	Y+7, r22	; 0x07
    215a:	78 87       	std	Y+8, r23	; 0x08
    215c:	8e e1       	ldi	r24, 0x1E	; 30
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	8e 1b       	sub	r24, r30
    2162:	9f 0b       	sbc	r25, r31
    2164:	9c 83       	std	Y+4, r25	; 0x04
    2166:	8b 83       	std	Y+3, r24	; 0x03
    2168:	12 c0       	rjmp	.+36     	; 0x218e <__floatunsisf+0xe0>
    216a:	30 97       	sbiw	r30, 0x00	; 0
    216c:	81 f0       	breq	.+32     	; 0x218e <__floatunsisf+0xe0>
    216e:	0e 2e       	mov	r0, r30
    2170:	04 c0       	rjmp	.+8      	; 0x217a <__floatunsisf+0xcc>
    2172:	ee 0c       	add	r14, r14
    2174:	ff 1c       	adc	r15, r15
    2176:	00 1f       	adc	r16, r16
    2178:	11 1f       	adc	r17, r17
    217a:	0a 94       	dec	r0
    217c:	d2 f7       	brpl	.-12     	; 0x2172 <__floatunsisf+0xc4>
    217e:	ed 82       	std	Y+5, r14	; 0x05
    2180:	fe 82       	std	Y+6, r15	; 0x06
    2182:	0f 83       	std	Y+7, r16	; 0x07
    2184:	18 87       	std	Y+8, r17	; 0x08
    2186:	ce 1a       	sub	r12, r30
    2188:	df 0a       	sbc	r13, r31
    218a:	dc 82       	std	Y+4, r13	; 0x04
    218c:	cb 82       	std	Y+3, r12	; 0x03
    218e:	1a 82       	std	Y+2, r1	; 0x02
    2190:	ce 01       	movw	r24, r28
    2192:	01 96       	adiw	r24, 0x01	; 1
    2194:	0e 94 1f 11 	call	0x223e	; 0x223e <__pack_f>
    2198:	28 96       	adiw	r28, 0x08	; 8
    219a:	ea e0       	ldi	r30, 0x0A	; 10
    219c:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__epilogue_restores__+0x10>

000021a0 <__clzsi2>:
    21a0:	ef 92       	push	r14
    21a2:	ff 92       	push	r15
    21a4:	0f 93       	push	r16
    21a6:	1f 93       	push	r17
    21a8:	7b 01       	movw	r14, r22
    21aa:	8c 01       	movw	r16, r24
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	e8 16       	cp	r14, r24
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	f8 06       	cpc	r15, r24
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	08 07       	cpc	r16, r24
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	18 07       	cpc	r17, r24
    21bc:	88 f4       	brcc	.+34     	; 0x21e0 <__clzsi2+0x40>
    21be:	8f ef       	ldi	r24, 0xFF	; 255
    21c0:	e8 16       	cp	r14, r24
    21c2:	f1 04       	cpc	r15, r1
    21c4:	01 05       	cpc	r16, r1
    21c6:	11 05       	cpc	r17, r1
    21c8:	31 f0       	breq	.+12     	; 0x21d6 <__clzsi2+0x36>
    21ca:	28 f0       	brcs	.+10     	; 0x21d6 <__clzsi2+0x36>
    21cc:	88 e0       	ldi	r24, 0x08	; 8
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	17 c0       	rjmp	.+46     	; 0x2204 <__clzsi2+0x64>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e0       	ldi	r26, 0x00	; 0
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	12 c0       	rjmp	.+36     	; 0x2204 <__clzsi2+0x64>
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	e8 16       	cp	r14, r24
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	f8 06       	cpc	r15, r24
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	08 07       	cpc	r16, r24
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	18 07       	cpc	r17, r24
    21f0:	28 f0       	brcs	.+10     	; 0x21fc <__clzsi2+0x5c>
    21f2:	88 e1       	ldi	r24, 0x18	; 24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	a0 e0       	ldi	r26, 0x00	; 0
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <__clzsi2+0x64>
    21fc:	80 e1       	ldi	r24, 0x10	; 16
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	20 e2       	ldi	r18, 0x20	; 32
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	28 1b       	sub	r18, r24
    220e:	39 0b       	sbc	r19, r25
    2210:	4a 0b       	sbc	r20, r26
    2212:	5b 0b       	sbc	r21, r27
    2214:	04 c0       	rjmp	.+8      	; 0x221e <__clzsi2+0x7e>
    2216:	16 95       	lsr	r17
    2218:	07 95       	ror	r16
    221a:	f7 94       	ror	r15
    221c:	e7 94       	ror	r14
    221e:	8a 95       	dec	r24
    2220:	d2 f7       	brpl	.-12     	; 0x2216 <__clzsi2+0x76>
    2222:	f7 01       	movw	r30, r14
    2224:	ee 5d       	subi	r30, 0xDE	; 222
    2226:	fe 4f       	sbci	r31, 0xFE	; 254
    2228:	80 81       	ld	r24, Z
    222a:	28 1b       	sub	r18, r24
    222c:	31 09       	sbc	r19, r1
    222e:	41 09       	sbc	r20, r1
    2230:	51 09       	sbc	r21, r1
    2232:	c9 01       	movw	r24, r18
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	08 95       	ret

0000223e <__pack_f>:
    223e:	df 92       	push	r13
    2240:	ef 92       	push	r14
    2242:	ff 92       	push	r15
    2244:	0f 93       	push	r16
    2246:	1f 93       	push	r17
    2248:	fc 01       	movw	r30, r24
    224a:	e4 80       	ldd	r14, Z+4	; 0x04
    224c:	f5 80       	ldd	r15, Z+5	; 0x05
    224e:	06 81       	ldd	r16, Z+6	; 0x06
    2250:	17 81       	ldd	r17, Z+7	; 0x07
    2252:	d1 80       	ldd	r13, Z+1	; 0x01
    2254:	80 81       	ld	r24, Z
    2256:	82 30       	cpi	r24, 0x02	; 2
    2258:	48 f4       	brcc	.+18     	; 0x226c <__pack_f+0x2e>
    225a:	80 e0       	ldi	r24, 0x00	; 0
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 e1       	ldi	r26, 0x10	; 16
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	e8 2a       	or	r14, r24
    2264:	f9 2a       	or	r15, r25
    2266:	0a 2b       	or	r16, r26
    2268:	1b 2b       	or	r17, r27
    226a:	a5 c0       	rjmp	.+330    	; 0x23b6 <__pack_f+0x178>
    226c:	84 30       	cpi	r24, 0x04	; 4
    226e:	09 f4       	brne	.+2      	; 0x2272 <__pack_f+0x34>
    2270:	9f c0       	rjmp	.+318    	; 0x23b0 <__pack_f+0x172>
    2272:	82 30       	cpi	r24, 0x02	; 2
    2274:	21 f4       	brne	.+8      	; 0x227e <__pack_f+0x40>
    2276:	ee 24       	eor	r14, r14
    2278:	ff 24       	eor	r15, r15
    227a:	87 01       	movw	r16, r14
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <__pack_f+0x4a>
    227e:	e1 14       	cp	r14, r1
    2280:	f1 04       	cpc	r15, r1
    2282:	01 05       	cpc	r16, r1
    2284:	11 05       	cpc	r17, r1
    2286:	19 f4       	brne	.+6      	; 0x228e <__pack_f+0x50>
    2288:	e0 e0       	ldi	r30, 0x00	; 0
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	96 c0       	rjmp	.+300    	; 0x23ba <__pack_f+0x17c>
    228e:	62 81       	ldd	r22, Z+2	; 0x02
    2290:	73 81       	ldd	r23, Z+3	; 0x03
    2292:	9f ef       	ldi	r25, 0xFF	; 255
    2294:	62 38       	cpi	r22, 0x82	; 130
    2296:	79 07       	cpc	r23, r25
    2298:	0c f0       	brlt	.+2      	; 0x229c <__pack_f+0x5e>
    229a:	5b c0       	rjmp	.+182    	; 0x2352 <__pack_f+0x114>
    229c:	22 e8       	ldi	r18, 0x82	; 130
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	26 1b       	sub	r18, r22
    22a2:	37 0b       	sbc	r19, r23
    22a4:	2a 31       	cpi	r18, 0x1A	; 26
    22a6:	31 05       	cpc	r19, r1
    22a8:	2c f0       	brlt	.+10     	; 0x22b4 <__pack_f+0x76>
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	2a c0       	rjmp	.+84     	; 0x2308 <__pack_f+0xca>
    22b4:	b8 01       	movw	r22, r16
    22b6:	a7 01       	movw	r20, r14
    22b8:	02 2e       	mov	r0, r18
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <__pack_f+0x86>
    22bc:	76 95       	lsr	r23
    22be:	67 95       	ror	r22
    22c0:	57 95       	ror	r21
    22c2:	47 95       	ror	r20
    22c4:	0a 94       	dec	r0
    22c6:	d2 f7       	brpl	.-12     	; 0x22bc <__pack_f+0x7e>
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e0       	ldi	r26, 0x00	; 0
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	04 c0       	rjmp	.+8      	; 0x22da <__pack_f+0x9c>
    22d2:	88 0f       	add	r24, r24
    22d4:	99 1f       	adc	r25, r25
    22d6:	aa 1f       	adc	r26, r26
    22d8:	bb 1f       	adc	r27, r27
    22da:	2a 95       	dec	r18
    22dc:	d2 f7       	brpl	.-12     	; 0x22d2 <__pack_f+0x94>
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	a1 09       	sbc	r26, r1
    22e2:	b1 09       	sbc	r27, r1
    22e4:	8e 21       	and	r24, r14
    22e6:	9f 21       	and	r25, r15
    22e8:	a0 23       	and	r26, r16
    22ea:	b1 23       	and	r27, r17
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	a1 05       	cpc	r26, r1
    22f0:	b1 05       	cpc	r27, r1
    22f2:	21 f0       	breq	.+8      	; 0x22fc <__pack_f+0xbe>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a0 e0       	ldi	r26, 0x00	; 0
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	9a 01       	movw	r18, r20
    22fe:	ab 01       	movw	r20, r22
    2300:	28 2b       	or	r18, r24
    2302:	39 2b       	or	r19, r25
    2304:	4a 2b       	or	r20, r26
    2306:	5b 2b       	or	r21, r27
    2308:	da 01       	movw	r26, r20
    230a:	c9 01       	movw	r24, r18
    230c:	8f 77       	andi	r24, 0x7F	; 127
    230e:	90 70       	andi	r25, 0x00	; 0
    2310:	a0 70       	andi	r26, 0x00	; 0
    2312:	b0 70       	andi	r27, 0x00	; 0
    2314:	80 34       	cpi	r24, 0x40	; 64
    2316:	91 05       	cpc	r25, r1
    2318:	a1 05       	cpc	r26, r1
    231a:	b1 05       	cpc	r27, r1
    231c:	39 f4       	brne	.+14     	; 0x232c <__pack_f+0xee>
    231e:	27 ff       	sbrs	r18, 7
    2320:	09 c0       	rjmp	.+18     	; 0x2334 <__pack_f+0xf6>
    2322:	20 5c       	subi	r18, 0xC0	; 192
    2324:	3f 4f       	sbci	r19, 0xFF	; 255
    2326:	4f 4f       	sbci	r20, 0xFF	; 255
    2328:	5f 4f       	sbci	r21, 0xFF	; 255
    232a:	04 c0       	rjmp	.+8      	; 0x2334 <__pack_f+0xf6>
    232c:	21 5c       	subi	r18, 0xC1	; 193
    232e:	3f 4f       	sbci	r19, 0xFF	; 255
    2330:	4f 4f       	sbci	r20, 0xFF	; 255
    2332:	5f 4f       	sbci	r21, 0xFF	; 255
    2334:	e0 e0       	ldi	r30, 0x00	; 0
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	20 30       	cpi	r18, 0x00	; 0
    233a:	a0 e0       	ldi	r26, 0x00	; 0
    233c:	3a 07       	cpc	r19, r26
    233e:	a0 e0       	ldi	r26, 0x00	; 0
    2340:	4a 07       	cpc	r20, r26
    2342:	a0 e4       	ldi	r26, 0x40	; 64
    2344:	5a 07       	cpc	r21, r26
    2346:	10 f0       	brcs	.+4      	; 0x234c <__pack_f+0x10e>
    2348:	e1 e0       	ldi	r30, 0x01	; 1
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	79 01       	movw	r14, r18
    234e:	8a 01       	movw	r16, r20
    2350:	27 c0       	rjmp	.+78     	; 0x23a0 <__pack_f+0x162>
    2352:	60 38       	cpi	r22, 0x80	; 128
    2354:	71 05       	cpc	r23, r1
    2356:	64 f5       	brge	.+88     	; 0x23b0 <__pack_f+0x172>
    2358:	fb 01       	movw	r30, r22
    235a:	e1 58       	subi	r30, 0x81	; 129
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	d8 01       	movw	r26, r16
    2360:	c7 01       	movw	r24, r14
    2362:	8f 77       	andi	r24, 0x7F	; 127
    2364:	90 70       	andi	r25, 0x00	; 0
    2366:	a0 70       	andi	r26, 0x00	; 0
    2368:	b0 70       	andi	r27, 0x00	; 0
    236a:	80 34       	cpi	r24, 0x40	; 64
    236c:	91 05       	cpc	r25, r1
    236e:	a1 05       	cpc	r26, r1
    2370:	b1 05       	cpc	r27, r1
    2372:	39 f4       	brne	.+14     	; 0x2382 <__pack_f+0x144>
    2374:	e7 fe       	sbrs	r14, 7
    2376:	0d c0       	rjmp	.+26     	; 0x2392 <__pack_f+0x154>
    2378:	80 e4       	ldi	r24, 0x40	; 64
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	04 c0       	rjmp	.+8      	; 0x238a <__pack_f+0x14c>
    2382:	8f e3       	ldi	r24, 0x3F	; 63
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e8 0e       	add	r14, r24
    238c:	f9 1e       	adc	r15, r25
    238e:	0a 1f       	adc	r16, r26
    2390:	1b 1f       	adc	r17, r27
    2392:	17 ff       	sbrs	r17, 7
    2394:	05 c0       	rjmp	.+10     	; 0x23a0 <__pack_f+0x162>
    2396:	16 95       	lsr	r17
    2398:	07 95       	ror	r16
    239a:	f7 94       	ror	r15
    239c:	e7 94       	ror	r14
    239e:	31 96       	adiw	r30, 0x01	; 1
    23a0:	87 e0       	ldi	r24, 0x07	; 7
    23a2:	16 95       	lsr	r17
    23a4:	07 95       	ror	r16
    23a6:	f7 94       	ror	r15
    23a8:	e7 94       	ror	r14
    23aa:	8a 95       	dec	r24
    23ac:	d1 f7       	brne	.-12     	; 0x23a2 <__pack_f+0x164>
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <__pack_f+0x17c>
    23b0:	ee 24       	eor	r14, r14
    23b2:	ff 24       	eor	r15, r15
    23b4:	87 01       	movw	r16, r14
    23b6:	ef ef       	ldi	r30, 0xFF	; 255
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	6e 2f       	mov	r22, r30
    23bc:	67 95       	ror	r22
    23be:	66 27       	eor	r22, r22
    23c0:	67 95       	ror	r22
    23c2:	90 2f       	mov	r25, r16
    23c4:	9f 77       	andi	r25, 0x7F	; 127
    23c6:	d7 94       	ror	r13
    23c8:	dd 24       	eor	r13, r13
    23ca:	d7 94       	ror	r13
    23cc:	8e 2f       	mov	r24, r30
    23ce:	86 95       	lsr	r24
    23d0:	49 2f       	mov	r20, r25
    23d2:	46 2b       	or	r20, r22
    23d4:	58 2f       	mov	r21, r24
    23d6:	5d 29       	or	r21, r13
    23d8:	b7 01       	movw	r22, r14
    23da:	ca 01       	movw	r24, r20
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	df 90       	pop	r13
    23e6:	08 95       	ret

000023e8 <__unpack_f>:
    23e8:	fc 01       	movw	r30, r24
    23ea:	db 01       	movw	r26, r22
    23ec:	40 81       	ld	r20, Z
    23ee:	51 81       	ldd	r21, Z+1	; 0x01
    23f0:	22 81       	ldd	r18, Z+2	; 0x02
    23f2:	62 2f       	mov	r22, r18
    23f4:	6f 77       	andi	r22, 0x7F	; 127
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	22 1f       	adc	r18, r18
    23fa:	22 27       	eor	r18, r18
    23fc:	22 1f       	adc	r18, r18
    23fe:	93 81       	ldd	r25, Z+3	; 0x03
    2400:	89 2f       	mov	r24, r25
    2402:	88 0f       	add	r24, r24
    2404:	82 2b       	or	r24, r18
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	99 1f       	adc	r25, r25
    240c:	99 27       	eor	r25, r25
    240e:	99 1f       	adc	r25, r25
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	9c 93       	st	X, r25
    2414:	11 97       	sbiw	r26, 0x01	; 1
    2416:	21 15       	cp	r18, r1
    2418:	31 05       	cpc	r19, r1
    241a:	a9 f5       	brne	.+106    	; 0x2486 <__unpack_f+0x9e>
    241c:	41 15       	cp	r20, r1
    241e:	51 05       	cpc	r21, r1
    2420:	61 05       	cpc	r22, r1
    2422:	71 05       	cpc	r23, r1
    2424:	11 f4       	brne	.+4      	; 0x242a <__unpack_f+0x42>
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	37 c0       	rjmp	.+110    	; 0x2498 <__unpack_f+0xb0>
    242a:	82 e8       	ldi	r24, 0x82	; 130
    242c:	9f ef       	ldi	r25, 0xFF	; 255
    242e:	13 96       	adiw	r26, 0x03	; 3
    2430:	9c 93       	st	X, r25
    2432:	8e 93       	st	-X, r24
    2434:	12 97       	sbiw	r26, 0x02	; 2
    2436:	9a 01       	movw	r18, r20
    2438:	ab 01       	movw	r20, r22
    243a:	67 e0       	ldi	r22, 0x07	; 7
    243c:	22 0f       	add	r18, r18
    243e:	33 1f       	adc	r19, r19
    2440:	44 1f       	adc	r20, r20
    2442:	55 1f       	adc	r21, r21
    2444:	6a 95       	dec	r22
    2446:	d1 f7       	brne	.-12     	; 0x243c <__unpack_f+0x54>
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	8c 93       	st	X, r24
    244c:	0d c0       	rjmp	.+26     	; 0x2468 <__unpack_f+0x80>
    244e:	22 0f       	add	r18, r18
    2450:	33 1f       	adc	r19, r19
    2452:	44 1f       	adc	r20, r20
    2454:	55 1f       	adc	r21, r21
    2456:	12 96       	adiw	r26, 0x02	; 2
    2458:	8d 91       	ld	r24, X+
    245a:	9c 91       	ld	r25, X
    245c:	13 97       	sbiw	r26, 0x03	; 3
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	13 96       	adiw	r26, 0x03	; 3
    2462:	9c 93       	st	X, r25
    2464:	8e 93       	st	-X, r24
    2466:	12 97       	sbiw	r26, 0x02	; 2
    2468:	20 30       	cpi	r18, 0x00	; 0
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	38 07       	cpc	r19, r24
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	48 07       	cpc	r20, r24
    2472:	80 e4       	ldi	r24, 0x40	; 64
    2474:	58 07       	cpc	r21, r24
    2476:	58 f3       	brcs	.-42     	; 0x244e <__unpack_f+0x66>
    2478:	14 96       	adiw	r26, 0x04	; 4
    247a:	2d 93       	st	X+, r18
    247c:	3d 93       	st	X+, r19
    247e:	4d 93       	st	X+, r20
    2480:	5c 93       	st	X, r21
    2482:	17 97       	sbiw	r26, 0x07	; 7
    2484:	08 95       	ret
    2486:	2f 3f       	cpi	r18, 0xFF	; 255
    2488:	31 05       	cpc	r19, r1
    248a:	79 f4       	brne	.+30     	; 0x24aa <__unpack_f+0xc2>
    248c:	41 15       	cp	r20, r1
    248e:	51 05       	cpc	r21, r1
    2490:	61 05       	cpc	r22, r1
    2492:	71 05       	cpc	r23, r1
    2494:	19 f4       	brne	.+6      	; 0x249c <__unpack_f+0xb4>
    2496:	84 e0       	ldi	r24, 0x04	; 4
    2498:	8c 93       	st	X, r24
    249a:	08 95       	ret
    249c:	64 ff       	sbrs	r22, 4
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <__unpack_f+0xbe>
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	8c 93       	st	X, r24
    24a4:	12 c0       	rjmp	.+36     	; 0x24ca <__unpack_f+0xe2>
    24a6:	1c 92       	st	X, r1
    24a8:	10 c0       	rjmp	.+32     	; 0x24ca <__unpack_f+0xe2>
    24aa:	2f 57       	subi	r18, 0x7F	; 127
    24ac:	30 40       	sbci	r19, 0x00	; 0
    24ae:	13 96       	adiw	r26, 0x03	; 3
    24b0:	3c 93       	st	X, r19
    24b2:	2e 93       	st	-X, r18
    24b4:	12 97       	sbiw	r26, 0x02	; 2
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	8c 93       	st	X, r24
    24ba:	87 e0       	ldi	r24, 0x07	; 7
    24bc:	44 0f       	add	r20, r20
    24be:	55 1f       	adc	r21, r21
    24c0:	66 1f       	adc	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	8a 95       	dec	r24
    24c6:	d1 f7       	brne	.-12     	; 0x24bc <__unpack_f+0xd4>
    24c8:	70 64       	ori	r23, 0x40	; 64
    24ca:	14 96       	adiw	r26, 0x04	; 4
    24cc:	4d 93       	st	X+, r20
    24ce:	5d 93       	st	X+, r21
    24d0:	6d 93       	st	X+, r22
    24d2:	7c 93       	st	X, r23
    24d4:	17 97       	sbiw	r26, 0x07	; 7
    24d6:	08 95       	ret

000024d8 <__fpcmp_parts_f>:
    24d8:	1f 93       	push	r17
    24da:	dc 01       	movw	r26, r24
    24dc:	fb 01       	movw	r30, r22
    24de:	9c 91       	ld	r25, X
    24e0:	92 30       	cpi	r25, 0x02	; 2
    24e2:	08 f4       	brcc	.+2      	; 0x24e6 <__fpcmp_parts_f+0xe>
    24e4:	47 c0       	rjmp	.+142    	; 0x2574 <__fpcmp_parts_f+0x9c>
    24e6:	80 81       	ld	r24, Z
    24e8:	82 30       	cpi	r24, 0x02	; 2
    24ea:	08 f4       	brcc	.+2      	; 0x24ee <__fpcmp_parts_f+0x16>
    24ec:	43 c0       	rjmp	.+134    	; 0x2574 <__fpcmp_parts_f+0x9c>
    24ee:	94 30       	cpi	r25, 0x04	; 4
    24f0:	51 f4       	brne	.+20     	; 0x2506 <__fpcmp_parts_f+0x2e>
    24f2:	11 96       	adiw	r26, 0x01	; 1
    24f4:	1c 91       	ld	r17, X
    24f6:	84 30       	cpi	r24, 0x04	; 4
    24f8:	99 f5       	brne	.+102    	; 0x2560 <__fpcmp_parts_f+0x88>
    24fa:	81 81       	ldd	r24, Z+1	; 0x01
    24fc:	68 2f       	mov	r22, r24
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	61 1b       	sub	r22, r17
    2502:	71 09       	sbc	r23, r1
    2504:	3f c0       	rjmp	.+126    	; 0x2584 <__fpcmp_parts_f+0xac>
    2506:	84 30       	cpi	r24, 0x04	; 4
    2508:	21 f0       	breq	.+8      	; 0x2512 <__fpcmp_parts_f+0x3a>
    250a:	92 30       	cpi	r25, 0x02	; 2
    250c:	31 f4       	brne	.+12     	; 0x251a <__fpcmp_parts_f+0x42>
    250e:	82 30       	cpi	r24, 0x02	; 2
    2510:	b9 f1       	breq	.+110    	; 0x2580 <__fpcmp_parts_f+0xa8>
    2512:	81 81       	ldd	r24, Z+1	; 0x01
    2514:	88 23       	and	r24, r24
    2516:	89 f1       	breq	.+98     	; 0x257a <__fpcmp_parts_f+0xa2>
    2518:	2d c0       	rjmp	.+90     	; 0x2574 <__fpcmp_parts_f+0x9c>
    251a:	11 96       	adiw	r26, 0x01	; 1
    251c:	1c 91       	ld	r17, X
    251e:	11 97       	sbiw	r26, 0x01	; 1
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	f1 f0       	breq	.+60     	; 0x2560 <__fpcmp_parts_f+0x88>
    2524:	81 81       	ldd	r24, Z+1	; 0x01
    2526:	18 17       	cp	r17, r24
    2528:	d9 f4       	brne	.+54     	; 0x2560 <__fpcmp_parts_f+0x88>
    252a:	12 96       	adiw	r26, 0x02	; 2
    252c:	2d 91       	ld	r18, X+
    252e:	3c 91       	ld	r19, X
    2530:	13 97       	sbiw	r26, 0x03	; 3
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	82 17       	cp	r24, r18
    2538:	93 07       	cpc	r25, r19
    253a:	94 f0       	brlt	.+36     	; 0x2560 <__fpcmp_parts_f+0x88>
    253c:	28 17       	cp	r18, r24
    253e:	39 07       	cpc	r19, r25
    2540:	bc f0       	brlt	.+46     	; 0x2570 <__fpcmp_parts_f+0x98>
    2542:	14 96       	adiw	r26, 0x04	; 4
    2544:	8d 91       	ld	r24, X+
    2546:	9d 91       	ld	r25, X+
    2548:	0d 90       	ld	r0, X+
    254a:	bc 91       	ld	r27, X
    254c:	a0 2d       	mov	r26, r0
    254e:	24 81       	ldd	r18, Z+4	; 0x04
    2550:	35 81       	ldd	r19, Z+5	; 0x05
    2552:	46 81       	ldd	r20, Z+6	; 0x06
    2554:	57 81       	ldd	r21, Z+7	; 0x07
    2556:	28 17       	cp	r18, r24
    2558:	39 07       	cpc	r19, r25
    255a:	4a 07       	cpc	r20, r26
    255c:	5b 07       	cpc	r21, r27
    255e:	18 f4       	brcc	.+6      	; 0x2566 <__fpcmp_parts_f+0x8e>
    2560:	11 23       	and	r17, r17
    2562:	41 f0       	breq	.+16     	; 0x2574 <__fpcmp_parts_f+0x9c>
    2564:	0a c0       	rjmp	.+20     	; 0x257a <__fpcmp_parts_f+0xa2>
    2566:	82 17       	cp	r24, r18
    2568:	93 07       	cpc	r25, r19
    256a:	a4 07       	cpc	r26, r20
    256c:	b5 07       	cpc	r27, r21
    256e:	40 f4       	brcc	.+16     	; 0x2580 <__fpcmp_parts_f+0xa8>
    2570:	11 23       	and	r17, r17
    2572:	19 f0       	breq	.+6      	; 0x257a <__fpcmp_parts_f+0xa2>
    2574:	61 e0       	ldi	r22, 0x01	; 1
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	05 c0       	rjmp	.+10     	; 0x2584 <__fpcmp_parts_f+0xac>
    257a:	6f ef       	ldi	r22, 0xFF	; 255
    257c:	7f ef       	ldi	r23, 0xFF	; 255
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <__fpcmp_parts_f+0xac>
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	cb 01       	movw	r24, r22
    2586:	1f 91       	pop	r17
    2588:	08 95       	ret

0000258a <__divmodhi4>:
    258a:	97 fb       	bst	r25, 7
    258c:	09 2e       	mov	r0, r25
    258e:	07 26       	eor	r0, r23
    2590:	0a d0       	rcall	.+20     	; 0x25a6 <__divmodhi4_neg1>
    2592:	77 fd       	sbrc	r23, 7
    2594:	04 d0       	rcall	.+8      	; 0x259e <__divmodhi4_neg2>
    2596:	0c d0       	rcall	.+24     	; 0x25b0 <__udivmodhi4>
    2598:	06 d0       	rcall	.+12     	; 0x25a6 <__divmodhi4_neg1>
    259a:	00 20       	and	r0, r0
    259c:	1a f4       	brpl	.+6      	; 0x25a4 <__divmodhi4_exit>

0000259e <__divmodhi4_neg2>:
    259e:	70 95       	com	r23
    25a0:	61 95       	neg	r22
    25a2:	7f 4f       	sbci	r23, 0xFF	; 255

000025a4 <__divmodhi4_exit>:
    25a4:	08 95       	ret

000025a6 <__divmodhi4_neg1>:
    25a6:	f6 f7       	brtc	.-4      	; 0x25a4 <__divmodhi4_exit>
    25a8:	90 95       	com	r25
    25aa:	81 95       	neg	r24
    25ac:	9f 4f       	sbci	r25, 0xFF	; 255
    25ae:	08 95       	ret

000025b0 <__udivmodhi4>:
    25b0:	aa 1b       	sub	r26, r26
    25b2:	bb 1b       	sub	r27, r27
    25b4:	51 e1       	ldi	r21, 0x11	; 17
    25b6:	07 c0       	rjmp	.+14     	; 0x25c6 <__udivmodhi4_ep>

000025b8 <__udivmodhi4_loop>:
    25b8:	aa 1f       	adc	r26, r26
    25ba:	bb 1f       	adc	r27, r27
    25bc:	a6 17       	cp	r26, r22
    25be:	b7 07       	cpc	r27, r23
    25c0:	10 f0       	brcs	.+4      	; 0x25c6 <__udivmodhi4_ep>
    25c2:	a6 1b       	sub	r26, r22
    25c4:	b7 0b       	sbc	r27, r23

000025c6 <__udivmodhi4_ep>:
    25c6:	88 1f       	adc	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	5a 95       	dec	r21
    25cc:	a9 f7       	brne	.-22     	; 0x25b8 <__udivmodhi4_loop>
    25ce:	80 95       	com	r24
    25d0:	90 95       	com	r25
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	08 95       	ret

000025d8 <__prologue_saves__>:
    25d8:	2f 92       	push	r2
    25da:	3f 92       	push	r3
    25dc:	4f 92       	push	r4
    25de:	5f 92       	push	r5
    25e0:	6f 92       	push	r6
    25e2:	7f 92       	push	r7
    25e4:	8f 92       	push	r8
    25e6:	9f 92       	push	r9
    25e8:	af 92       	push	r10
    25ea:	bf 92       	push	r11
    25ec:	cf 92       	push	r12
    25ee:	df 92       	push	r13
    25f0:	ef 92       	push	r14
    25f2:	ff 92       	push	r15
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	ca 1b       	sub	r28, r26
    2602:	db 0b       	sbc	r29, r27
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	09 94       	ijmp

00002610 <__epilogue_restores__>:
    2610:	2a 88       	ldd	r2, Y+18	; 0x12
    2612:	39 88       	ldd	r3, Y+17	; 0x11
    2614:	48 88       	ldd	r4, Y+16	; 0x10
    2616:	5f 84       	ldd	r5, Y+15	; 0x0f
    2618:	6e 84       	ldd	r6, Y+14	; 0x0e
    261a:	7d 84       	ldd	r7, Y+13	; 0x0d
    261c:	8c 84       	ldd	r8, Y+12	; 0x0c
    261e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2620:	aa 84       	ldd	r10, Y+10	; 0x0a
    2622:	b9 84       	ldd	r11, Y+9	; 0x09
    2624:	c8 84       	ldd	r12, Y+8	; 0x08
    2626:	df 80       	ldd	r13, Y+7	; 0x07
    2628:	ee 80       	ldd	r14, Y+6	; 0x06
    262a:	fd 80       	ldd	r15, Y+5	; 0x05
    262c:	0c 81       	ldd	r16, Y+4	; 0x04
    262e:	1b 81       	ldd	r17, Y+3	; 0x03
    2630:	aa 81       	ldd	r26, Y+2	; 0x02
    2632:	b9 81       	ldd	r27, Y+1	; 0x01
    2634:	ce 0f       	add	r28, r30
    2636:	d1 1d       	adc	r29, r1
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	ed 01       	movw	r28, r26
    2644:	08 95       	ret

00002646 <itoa>:
    2646:	fb 01       	movw	r30, r22
    2648:	9f 01       	movw	r18, r30
    264a:	e8 94       	clt
    264c:	42 30       	cpi	r20, 0x02	; 2
    264e:	c4 f0       	brlt	.+48     	; 0x2680 <itoa+0x3a>
    2650:	45 32       	cpi	r20, 0x25	; 37
    2652:	b4 f4       	brge	.+44     	; 0x2680 <itoa+0x3a>
    2654:	4a 30       	cpi	r20, 0x0A	; 10
    2656:	29 f4       	brne	.+10     	; 0x2662 <itoa+0x1c>
    2658:	97 fb       	bst	r25, 7
    265a:	1e f4       	brtc	.+6      	; 0x2662 <itoa+0x1c>
    265c:	90 95       	com	r25
    265e:	81 95       	neg	r24
    2660:	9f 4f       	sbci	r25, 0xFF	; 255
    2662:	64 2f       	mov	r22, r20
    2664:	77 27       	eor	r23, r23
    2666:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__udivmodhi4>
    266a:	80 5d       	subi	r24, 0xD0	; 208
    266c:	8a 33       	cpi	r24, 0x3A	; 58
    266e:	0c f0       	brlt	.+2      	; 0x2672 <itoa+0x2c>
    2670:	89 5d       	subi	r24, 0xD9	; 217
    2672:	81 93       	st	Z+, r24
    2674:	cb 01       	movw	r24, r22
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	a1 f7       	brne	.-24     	; 0x2662 <itoa+0x1c>
    267a:	16 f4       	brtc	.+4      	; 0x2680 <itoa+0x3a>
    267c:	5d e2       	ldi	r21, 0x2D	; 45
    267e:	51 93       	st	Z+, r21
    2680:	10 82       	st	Z, r1
    2682:	c9 01       	movw	r24, r18
    2684:	0c 94 44 13 	jmp	0x2688	; 0x2688 <strrev>

00002688 <strrev>:
    2688:	dc 01       	movw	r26, r24
    268a:	fc 01       	movw	r30, r24
    268c:	67 2f       	mov	r22, r23
    268e:	71 91       	ld	r23, Z+
    2690:	77 23       	and	r23, r23
    2692:	e1 f7       	brne	.-8      	; 0x268c <strrev+0x4>
    2694:	32 97       	sbiw	r30, 0x02	; 2
    2696:	04 c0       	rjmp	.+8      	; 0x26a0 <strrev+0x18>
    2698:	7c 91       	ld	r23, X
    269a:	6d 93       	st	X+, r22
    269c:	70 83       	st	Z, r23
    269e:	62 91       	ld	r22, -Z
    26a0:	ae 17       	cp	r26, r30
    26a2:	bf 07       	cpc	r27, r31
    26a4:	c8 f3       	brcs	.-14     	; 0x2698 <strrev+0x10>
    26a6:	08 95       	ret

000026a8 <_exit>:
    26a8:	f8 94       	cli

000026aa <__stop_program>:
    26aa:	ff cf       	rjmp	.-2      	; 0x26aa <__stop_program>

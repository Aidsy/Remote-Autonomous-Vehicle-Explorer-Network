// -------------------------------
// Wyvern Quadrotor
// On-Board Software
// version: 1.0.2
// date: April 10, 2010
// authors: William Etter, Paul Martin, Uriah Baalke
// -------------------------------

// DEFINES
// RF Packet Size
#define PACKET_SIZE 8

// INCLUDES
#include "wyvern.h"
#include "uart.h"
#include "pwm.h"
#include "wyvern-rf.h"

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// CONSTANT VARIABLES

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// GLOBAL VARIABLES
// RF Variables
char local[5] = {0x77, 0x79, 0x76, 0x30, 0x30}; // Wyvern Quadrotor Wyv00
char contr[5] = {0x63, 0x6F, 0x6E, 0x74, 0x72}; // Wyvern Controller
char incoming[8] = {0,0,0,0,0,0,0,0};
char outgoing[8] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// FUNCTION HEADERS
void init_wyvern(void);

// ===========================================================

/*************************************************************************
Interrupt Subroutines (ISRs)
**************************************************************************/
/*
ISR(PCINT0_vect)
{
	//LED_red_toggle();
	//char data_string[8];
	if(!check(PORTB,4)){
		// a wireless packet was received
		RFreceive(incoming);
		//TransmitString("packet received: ");
		//itoa(incoming[0], data_string,10);
		LED_red_toggle();
		_delay_ms(100);
	}
}
*/

/*************************************************************************
Function: main()
**************************************************************************/
int main(void)
{
	init_wyvern();
	LED_green_on();
	set(PORTB,4);
	toggle(PORTB,4);

	for( ; ; )
	{
		
		if(RFRXdataReady()){
			LED_red_toggle();
	     	RFreceive(incoming);
	    	if(incoming[0] == 0xFF){
				LED_green_off();
				_delay_ms(100);
				LED_green_on();
	     	}
		}
		
		
		/*
		TransmitString("Duty = ");
		itoa(duty,dutystring,10);
		TransmitString(dutystring);
		TransmitString("\n\r");
		input = ReceiveByte();
		set(PORTE,6);
		if(input == 'u'){
			if(duty<=1998)
				duty+=2;
		}
		else if(input == 'd'){
			if(duty>=1002)
				duty-=2;
		}
		else if(input == '='){
			if(duty<=1898)
				duty+=100;
		}
		else if(input == '-'){
			if(duty>=1102)
				duty-=100;
		}
		else if(input == '1'){
			duty=1480;
		}
		else if(input == '2'){
			duty=1300;
		}
		else if(input == '3'){
			duty=1200;
		}
		else if(input == 's'){
			duty=1106;
		}
		else if(input == ' '){
			duty = 1000;
			clear(PORTE,6);
		}
		set_duty(1,duty);
		toggle(PORTE,2);
		*/
	
	}
	return 0;
}

/*************************************************************************
Function: init_wyvern()
Purpose:  Runs all initialization functions
		  Enables interrupts
Input:    None
Returns:  None
**************************************************************************/
void init_wyvern(void)
{
	// Setup Wyvern Systems
	init_uc();		//UC
	init_uart();	// Serial  Communication
	init_pwm();		// Motor PWM Control
	RFsetup(local);	// RF
	/*
	set(PCICR,PCIE0); // enable pin-change interrupts
	PCMSK0 =0x00;
	set(PCMSK0, PCINT4); // demask PCINT4
	*/
	// Enable Interrupts
	sei();
}


